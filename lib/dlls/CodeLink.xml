<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CodeLink</name>
    </assembly>
    <members>
        <member name="T:CodeLink.About">
            <summary>
            Gives access to information about CodeLink version, HostMachine, HostOperatingSystem, and HostProcess
            </summary>
        </member>
        <member name="T:CodeLink.About.Version">
            <summary>
            Allows access to the currently executing CodeLink DLL version, as well as comparison functions
            </summary>
        </member>
        <member name="P:CodeLink.About.Version.Major">
            <summary>
            The Major version number. Should always be the last 2 digits of the build year (i.e. '19, '20', '21'...)
            </summary>
        </member>
        <member name="P:CodeLink.About.Version.Minor">
            <summary>
            The Minor version number. Should always be the 2 digit build month (i.e. 01, 02, 03, 04... 12)
            </summary>
        </member>
        <member name="P:CodeLink.About.Version.Build">
            <summary>
            This number will increment from 1 by 1 each time a build is created on the build server for the month (Always reset to 1 upon the change of a month)
            </summary>
        </member>
        <member name="P:CodeLink.About.Version.Revision">
            <summary>
            A unique ID that will be different every time a build is created on the build server (never resets)
            </summary>
        </member>
        <member name="P:CodeLink.About.Version.FullString">
            <summary>
            The complete version number. This is what is buried inside files for comparison
            </summary>
        </member>
        <member name="P:CodeLink.About.Version.UserString">
            <summary>
            The user-facing version number, which removes trailing 0's, i.e. 20.07.0.0 => 20.07, 20.07.1.0 => 20.07.1
            </summary>
        </member>
        <member name="T:CodeLink.About.Version.VersionCompareType">
            <summary>
            Determines how the <see cref="M:CodeLink.About.Version.Compare(System.String,CodeLink.About.Version.VersionCompareType)"/>
            </summary>
        </member>
        <member name="F:CodeLink.About.Version.VersionCompareType.FailIfLower">
            <summary>
            Causes the compare to fail if the passed in version is lower than the running version
            </summary>
        </member>
        <member name="F:CodeLink.About.Version.VersionCompareType.FailIfDifferent">
            <summary>
            Causes the compare to fail if the passed in version is different than the running version
            </summary>
        </member>
        <member name="F:CodeLink.About.Version.VersionCompareType.FailAlways">
            <summary>
            Causes the compare to always fail
            </summary>
        </member>
        <member name="M:CodeLink.About.Version.Compare(System.String)">
            <summary>
            Returns -1 if passed in version is less than ours. Returns 1 if passed in version is greater than ours. Returns 0 if they are equal
            </summary>
            <param name="versionString"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.About.Version.Compare(System.String,CodeLink.About.Version.VersionCompareType)">
            <summary>
            Returns 'false' if the comparison fails, 'true' if the comparison succeeds
            </summary>
            <param name="versionString"></param>
            <param name="versionCompareType"></param>
            <returns></returns>
        </member>
        <member name="T:CodeLink.About.HostMachine">
            <summary>
            Offers access to information about the current Computer/Machine
            </summary>
        </member>
        <member name="P:CodeLink.About.HostMachine.FullName">
            <summary>
            Returns the fully qualified computer name (including domain), i.e. "myComputer.myDomain.local"
            </summary>
        </member>
        <member name="P:CodeLink.About.HostMachine.ShortName">
            <summary>
            Returns the local computer name only (without domain, if present), i.e. "myComputer"
            </summary>
        </member>
        <member name="P:CodeLink.About.HostMachine.ProcessorCount">
            <summary>
            Returns the number of processors that are available
            </summary>
        </member>
        <member name="F:CodeLink.About.HostMachine.Is64bit">
            <summary>
            An alias for <see cref="F:CodeLink.About.HostOperatingSystem.Is64bit"/>
            </summary>
        </member>
        <member name="F:CodeLink.About.HostMachine.Is32bit">
            <summary>
            An alias for <see cref="F:CodeLink.About.HostOperatingSystem.Is32bit"/>
            </summary>
        </member>
        <member name="F:CodeLink.About.HostMachine.InstructionSetSize">
            <summary>
            Returns the typical method of referring to iSet size (x86 or x64)
            </summary>
        </member>
        <member name="T:CodeLink.About.HostOperatingSystem">
            <summary>
            Contains information about the operating system
            </summary>
        </member>
        <member name="F:CodeLink.About.HostOperatingSystem.Is64bit">
            <summary>
            Returns 'true' if the host operating system is 64bit
            </summary>
        </member>
        <member name="F:CodeLink.About.HostOperatingSystem.Is32bit">
            <summary>
            Returns 'true' if the host operating system is 32bit
            </summary>
        </member>
        <member name="F:CodeLink.About.HostOperatingSystem.InstructionSetSize">
            <summary>
            Returns the typical method of referring to iSet size (x86 or x64)
            </summary>
        </member>
        <member name="T:CodeLink.About.HostProcess">
            <summary>
            Contains information about the currently executing process
            </summary>
        </member>
        <member name="F:CodeLink.About.HostProcess.Is64bit">
            <summary>
            Returns 'true' if the process is a 64 bit process
            </summary>
        </member>
        <member name="F:CodeLink.About.HostProcess.Is32bit">
            <summary>
            Returns 'true' if the process is a 32 bit process. Note that this may be different than the value of <see cref="F:CodeLink.About.HostOperatingSystem.Is32bit"/>
            </summary>
        </member>
        <member name="F:CodeLink.About.HostProcess.InstructionSetSize">
            <summary>
            Returns the typical method of referring to iSet size (x86 or x64)
            </summary>
        </member>
        <member name="P:CodeLink.About.HostProcess.ProcessorAffinity">
            <summary>
            Get/set a bitmask containing the processors which are allowed to run the host process
            </summary>
        </member>
        <member name="P:CodeLink.About.HostProcess.PriorityClass">
            <summary>
            Get/set the priority class for the host process
            </summary>
        </member>
        <member name="P:CodeLink.About.HostProcess.Name">
            <summary>
            Retrieve the application name for the host process, i.e. if the host is physically located at "C:\\outlook.exe" the name would simply yield "outlook"
            </summary>
        </member>
        <member name="M:CodeLink.About.HostProcess.Kill">
            <summary>
            Immediately attempts to terminate the host process. This should only be used with extreme caution!
            </summary>
        </member>
        <member name="F:CodeLink.About.HostProcess.StartTime">
            <summary>
            Returns the date/time of when the host process was started
            </summary>
        </member>
        <member name="F:CodeLink.About.HostProcess.ArgumentList">
            <summary>
            Returns the argument list that was sent in when the host process was started
            </summary>
        </member>
        <member name="P:CodeLink.About.HostProcess.UserAccountName">
            <summary>
            Returns the user name of who started this process (if available)
            </summary>
        </member>
        <member name="P:CodeLink.About.HostProcess.ThreadCollection">
            <summary>
            Returns a collection of all threads that are being managed by the current process
            </summary>
        </member>
        <member name="M:CodeLink.About.HostProcess.ThreadCount">
            <summary>
            Returns the total number of threads that are present within the current process
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.About.HostProcess.ThreadCount(System.Threading.ThreadState)">
            <summary>
            Returns the total number of threads that are present in the current process that are in the given state
            </summary>
            <param name="threadState"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.About.HostProcess.ThreadCountRunning">
            <summary>
            Returns the number of threads that are present in the current process that are currently 'running'
            </summary>
            <returns></returns>
        </member>
        <member name="P:CodeLink.About.HostProcess.CurrentPhysicalMemoryBytes">
            <summary>
            Returns the current number of physical bytes that are allocated to the current process
            </summary>
        </member>
        <member name="P:CodeLink.About.HostProcess.PeakPhysicalMemoryBytes">
            <summary>
            Returns the maximum number of physical bytes that have been allocated to the current process
            </summary>
        </member>
        <member name="P:CodeLink.About.HostProcess.CurrentVirtualMemoryBytes">
            <summary>
            Returns the current amount of memory that the current process has demanded
            </summary>
        </member>
        <member name="P:CodeLink.About.HostProcess.PeakVirtualMemoryBytes">
            <summary>
            Returns the peak amount of memory that the current process has demanded
            </summary>
        </member>
        <member name="P:CodeLink.About.HostProcess.CurrentPagedMemoryBytes">
            <summary>
            Returns the amount of memory that is currenly residing in the page file for the current process
            </summary>
        </member>
        <member name="P:CodeLink.About.HostProcess.PeakPagedMemoryBytes">
            <summary>
            Returns the maximum amount of memory that has ever been written concurrently to the page file for the current process
            </summary>
        </member>
        <member name="F:CodeLink.CompilerState.Unknown">
            <summary>
            This is the initial state, while the constructor is working it's magic
            </summary>
        </member>
        <member name="F:CodeLink.CompilerState.Idle">
            <summary>
            This is the default state when the compiler is not actively compiling stuff
            </summary>
        </member>
        <member name="F:CodeLink.CompilerState.Starting">
            <summary>
            This should be VERY brief, as we enter then leave this state basically immediately
            </summary>
        </member>
        <member name="F:CodeLink.CompilerState.MergingInstructionSets">
            <summary>
            Loading/merging instruction sets
            </summary>
        </member>
        <member name="F:CodeLink.CompilerState.MergingCode">
            <summary>
            Merging all of the user code into the same global namespace
            </summary>
        </member>
        <member name="F:CodeLink.CompilerState.Preparing">
            <summary>
            Resolving user types and aliases, crunching constants, evaluating compiler directives... that kinda thing
            </summary>
        </member>
        <member name="F:CodeLink.CompilerState.Generating">
            <summary>
            Going through the meat of generating functions and whatnot
            </summary>
        </member>
        <member name="F:CodeLink.CompilerState.Linking">
            <summary>
            Doing a final pass on any PC locations that may not have been known during the 'generating' step quite yet
            </summary>
        </member>
        <member name="F:CodeLink.CompilerState.Optimizing">
            <summary>
            If enabled, this compiler uses a single-pass peephole optimizer for a few different common optimizations
            </summary>
        </member>
        <member name="F:CodeLink.CompilerState.CreatingOutputBinary">
            <summary>
            Last, but certainly not least, it's finally time to generate the outputBinary file itself.
            </summary>
        </member>
        <member name="M:CodeLink.Compiler.Namespace(CodeLink.Token,CodeLink.CompilerInternals.OItem,CodeLink.CompilerInternals.OItemNamespace@,System.Boolean)">
            <summary>
            Attempts to find an existing sub-namespace of <paramref name="container"/>, or in the global context if <paramref name="container"/> is null
            </summary>
            <param name="compiler"></param>
            <param name="name"></param>
            <param name="container"></param>
            <param name="globalNamespace"></param>
            <param name="createIfRequired"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.Compiler.Namespace(CodeLink.CompilerInternals.Expression,CodeLink.CompilerInternals.OItem,CodeLink.CompilerInternals.OItemNamespace@,System.Boolean)">
            <summary>
            Attempts to find a sub-namespace in the <paramref name="container"/> context, or in the global context if <paramref name="container"/> is null
            </summary>
            <param name="compiler"></param>
            <param name="lookup"></param>
            <param name="container"></param>
            <param name="globalNamespace"></param>
            <param name="createIfRequired"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.Compiler.Compile(CodeLink.OutputBinary@)">
            <summary>
            Finally! Time to get to work :D
            </summary>
            <param name="outputBinary"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.Compiler._Compile(CodeLink.OutputBinary@)">
            <summary>
            The actual, real deal. 
            </summary>
            <param name="outputBinary"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.Compiler._Compile_1_MergeInstructionSets">
            <summary>
            The first major phase of compilation! This phase loads all of the instrution sets and initializes them
            From there, we simply need to merge their names (types and instructions) into our global container
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.Compiler._Compile_1_MergeInstructionSets_LoadAndInitialize">
            <summary>
            Load and initialize the instruction sets
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.Compiler._Compile_3_Prepare_AttemptList(System.Collections.Generic.List{CodeLink.CompilerInternals.OItem},CodeLink.ResultList)">
            <summary>
            Do a single pass at attempting to clear our "prepare" items
            </summary>
            <param name="attemptList"></param>
            <param name="attemptErrors"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.Compiler._Compile_3_Prepare_ResolveCallGroups">
            <summary>
            Called at the end of the prepare step, this ensures that all functions/instructions have valid call signatures in the call group
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.Compiler._Compile_5_Link">
            <summary>
            Simply call all of our 'link' functions to update addresses that should be known now
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.Compiler._Compile_6_Optimize_InstructionJumpTarget(System.Int32,System.Int32@)">
            <summary>
            Given the PC location of a jump type instruction, find where that jump lands, and what instruction type that is
            </summary>
            <param name="PCJump"></param>
            <param name="PCTarget"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.Compiler._Compile_6_Optimize_InstructionPushNull(System.Int32)">
            <summary>
            Attempts to optimize [pushNull, pushNull, pushNull] to [PushNull, Jump, Noop]
            </summary>
            <param name="inst"></param>
            <param name="PC"></param>
            <returns></returns>
        </member>
        <member name="T:CodeLink.CompilerInternals.ExpressionContinue">
            <summary>
            This class strictly exists so that ExpressionGen can inform ObjectFileGen of the existance of a 'continue' expression.
            ObjectFileGen actually replaces this with an <see cref="T:CodeLink.CompilerInternals.OItemStatementContinue"/>
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.GCObjectInstance.ReferenceRemove(CodeLink.CompilerInternals.ObjectReferenceType)">
            <summary>
            Returns 'true' if the object should be removed
            </summary>
            <param name="referenceType"></param>
            <returns></returns>
        </member>
        <member name="T:CodeLink.CompilerInternals.GCContext">
            <summary>
            Maintains a context-wide mapping from .NET (garbage-collected objects, or GC objects) to unique int64 values, which 
            prevents garbage collection of these objects, even if being passed in and among other unsafe code
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.GCContext.RemoveMulitple(System.Collections.Generic.IEnumerable{System.Tuple{System.Int64,System.Int32}})">
            <summary>
            Should be used when a runInstance is reset or unloaded
            </summary>
            <param name="toRemove"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.OItemCallGroup.SignatureResolveAll(CodeLink.CompilerInternals.CompileState)">
            <summary>
            Attempt to hook up any functions that didn't have their signatures ready at the time the signature was added to this call group
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.OItemCallGroup.SignatureMatchBest(CodeLink.CompilerInternals.CompileState,System.Boolean,CodeLink.CompilerInternals.CallParameter[])">
            <summary>
            Given a list of parameters, attempts to find the best fitting call in this CallGroup
            </summary>
            <param name="ri"></param>
            <param name="lookForStatic"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.OItemCallGroup.SignatureMatchExact(System.Boolean,System.Collections.Generic.List{CodeLink.CompilerInternals.CallParameter})">
            <summary>
            Given a list of parameters, attempts to find a call which matches the parameter list exactly (no implicit or explicit conversions, no optional parameters used)
            </summary>
            <param name="ri"></param>
            <param name="lookForStatic"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.OItemCallGroup.SignatureMatchExact(System.Boolean,CodeLink.CompilerInternals.CallParameter[])">
            <summary>
            Given a list of parameters, attempts to find a call which matches the parameter list exactly (no implicit or explicit conversions, no optional parameters used)
            </summary>
            <param name="ri"></param>
            <param name="lookForStatic"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.OItemCallGroup.FindPossibleMatches(CodeLink.CompilerInternals.CompileState,System.Boolean,CodeLink.CompilerInternals.CallParameter[])">
            <summary>
            Returns a list of calls that at least *could* be called based on the number of user passed parameters
            Further, this then goes in to determine the types, and what/how many match exactly, would require an implicit conversion, etc
            </summary>
            <param name="lookForStatic"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.OItemCallGroup.FindBestMatch(System.Collections.Generic.List{CodeLink.CompilerInternals.OItemCallGroup.CallGroupMatch})">
            <summary>
            Given a list of 'match' objects, returns the best fitting match
            </summary>
            <param name="probableMatches"></param>
            <returns></returns>
        </member>
        <member name="T:CodeLink.CompilerInternals.OItemCallGroup.CallGroupItem">
            <summary>
            Contains a single item in this CallGroup. 
            Really just a way to easily access the Item and Signature without having to 'if' based on the <see cref="T:CodeLink.CompilerInternals.OItemStyle"/> every time.
            </summary>
        </member>
        <member name="T:CodeLink.CompilerInternals.OItemCallGroup.CallGroupMatch">
            <summary>
            Gets generated with each call to <see cref="!:SignatureMatchBest(RunInstance, bool, CallParameter[])"/>; Reflects just how well the method matched the parameters
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.OItemCallGroup._CompileEvaluateGetFinal(CodeLink.CompilerInternals.CompileState,CodeLink.CompilerInternals.CallSignature)">
            <summary>
            We just need to figure out the 'this' component...
            </summary>
            <param name="state"></param>
            <param name="signature"></param>
            <returns></returns>
        </member>
        <member name="T:CodeLink.CompilerInternals.CallSignature">
            <summary>
            Contains a common-use way to keep around a call signature. 
            Is applied to functions, instructions, and getter/setters
            </summary>
        </member>
        <member name="P:CodeLink.CompilerInternals.CallSignature.ReturnType">
            <summary>
            Get the <see cref="T:CodeLink.OType"/> that is returned (left on the stack) after this call completes
            </summary>
        </member>
        <member name="P:CodeLink.CompilerInternals.CallSignature.ReturnByteCount">
            <summary>
            Get the number of bytes that are going to be left on the stack from this call
            </summary>
        </member>
        <member name="P:CodeLink.CompilerInternals.CallSignature.LocalByteCount">
            <summary>
            Contains the number of bytes that need to be reserved when this function is called for local (stack) variables while inside this call
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.CallSignature.ParameterAt(System.Int32)">
            <summary>
            Returns the desired parameter at the given index. Note: MAY include compiler-injected parameters
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:CodeLink.CompilerInternals.CallSignature.ParameterByteCount">
            <summary>
            Returns the number of bytes that are used accomodating the parameters for this call
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.CallSignature.ParameterAdd(CodeLink.CompilerInternals.CallParameter)">
            <summary>
            Adds another parameter to this signature
            </summary>
            <param name="cp"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.CompileState._EmitPushNullAlignment(System.Int32)">
            <summary>
            Emits a pushNull instruction that will correct any missing bytes for the current alignment
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.CompileState._EmitPushGeneric">
            <summary>
            Based on what has been evaluated so far, attempts to write the actual instructions required to get some bytes on the stack
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.CompileState._EmitPushImmediate(System.Byte[])">
            <summary>
            Write the 'pushImmediate' instruction, as well as the requisite data, to the instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.CompileState._EmitPushImmediate(System.String)">
            <summary>
            Creates (or adds another reference to) a resource string, then emits the 'iSetResources.pushString' instruction (plus the index of where to find it)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:CodeLink.CompilerInternals.EvaluationStyle.Unknown">
            <summary>
            The inital value for a <see cref="T:CodeLink.CompilerInternals.CompileState"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.EvaluationStyle.CodeSegmentOffset">
            <summary>
            Informs the caller that the _Evaluate found a code segment offset (typically a function address)
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.EvaluationStyle.DataSegmentOffset">
            <summary>
            Informs the caller that the _Evaluate found a data segment offset (a global variable)
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.EvaluationStyle.StackFrameOffset">
            <summary>
            Informs the caller that the _Evaluate found a stack frame offset (function/start local variable)
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.EvaluationStyle.Getter">
            <summary>
            Informs the caller that the _Evaluate found a getter
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.EvaluationStyle.Setter">
            <summary>
            Informs the caller that the _Evaluate found a setter
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.EvaluationStyle.MemoryAddress">
            <summary>
            Informs the caller that the _Evaluate found a memory address
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.EvaluationStyle.Immediate">
            <summary>
            Informs the caller that the _Evaluate resulted on a value at the top of the stack
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.EvaluationStyle.Instruction">
            <summary>
            Informs the caller that the _Evaluate found an instruction
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.EvaluationStyle.Type">
            <summary>
            Informs the caller that the _Evaluate found an <see cref="T:CodeLink.OType"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.EvaluationStyle.CallGroup">
            <summary>
            Informs the caller that the _Evaluate found a <see cref="T:CodeLink.CompilerInternals.OItemCallGroup"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.EvaluationStyle.Constant">
            <summary>
            Informs the caller that the _Evaluated found a <see cref="F:CodeLink.CompilerInternals.OItemAttribute.Const"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.EvaluationStyle.InformalSet">
            <summary>
            Informs the caller that the _Evaluated found a [] style setter
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.Expression._EvaluateGet(CodeLink.CompilerInternals.CompileState,CodeLink.OType)">
            <summary>
            Calls '_EvaluateGet'. If that is successful, then calls '_EvaluateConvertType'
            </summary>
            <param name="state"></param>
            <param name="expectedType"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.Expression._EvaluateTypeLocal(CodeLink.CompilerInternals.CompileState)">
            <summary>
            Can be overridden to do more, but by default simply calls "_EvaluateLookup"
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.Expression._EvaluateConvertTypeImmediateWarning(CodeLink.CompilerInternals.CompileState,CodeLink.OType,CodeLink.OType,System.Byte[],System.Boolean@)">
            <summary>
            So the general goal here is to convert a number to the destination type, then convert it back to the original type.
            If we get the same value back out, must be equivalent, so no sense in showing a warning on the conversion
            </summary>
            <param name="state"></param>
            <param name="inputType"></param>
            <param name="outputType"></param>
            <param name="immediateValue"></param>
            <returns>"true" if the warning should still be emitted, "false" if the warning should be suppressed </returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.Expression._EvaluateConvertUnitExpressionToConstantUnit(CodeLink.CompilerInternals.CompileState,CodeLink.CompilerInternals.Expression,CodeLink.EngineeringUnits.Unit@,System.Boolean)">
            <summary>
            This function simply attempts to determine if a unit expression resolves into a constant
            </summary>
            <param name="state"></param>
            <param name="unitExpression"></param>
            <param name="unitObject"></param>
            <returns></returns>
        </member>
        <member name="T:CodeLink.CompilerInternals.ExpressionStyle">
            <summary>
            Used to differentiate the type of <see cref="T:CodeLink.CompilerInternals.Expression"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ExpressionStyle.Empty">
            <summary>
            The <see cref="T:CodeLink.CompilerInternals.Expression"/> is empty
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ExpressionStyle.Evaluate">
            <summary>
            Identifies this as a <see cref="T:CodeLink.CompilerInternals.ExpressionEvaluate"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ExpressionStyle.Lookup">
            <summary>
            Identifies this as a <see cref="T:CodeLink.CompilerInternals.ExpressionLookup"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ExpressionStyle.Name">
            <summary>
            Identifies this as a <see cref="T:CodeLink.CompilerInternals.ExpressionName"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ExpressionStyle.Break">
            <summary>
            Identifies this as a <see cref="T:CodeLink.CompilerInternals.ExpressionBreak"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ExpressionStyle.Continue">
            <summary>
            Identifies this as a <see cref="T:CodeLink.CompilerInternals.ExpressionContinue" />
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ExpressionStyle.Call">
            <summary>
            Identifies this as a <see cref="T:CodeLink.CompilerInternals.ExpressionCall"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ExpressionStyle.Cast">
            <summary>
            Identifies this as an <see cref="T:CodeLink.CompilerInternals.ExpressionCast"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ExpressionStyle.Array">
            <summary>
            Identifies this as a <see cref="T:CodeLink.CompilerInternals.ExpressionArray"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ExpressionStyle.Anonymous">
            <summary>
            Identifies this as a <see cref="T:CodeLink.CompilerInternals.ExpressionAnonymous"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ExpressionStyle.BinaryOperator">
            <summary>
            Identifies this as a <see cref="T:CodeLink.CompilerInternals.ExpressionOperatorBinary"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ExpressionStyle.UnaryOperator">
            <summary>
            Identifies this as a <see cref="T:CodeLink.CompilerInternals.ExpressionOperatorUnary"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ExpressionStyle.InlineIf">
            <summary>
            Identifies this as a <see cref="T:CodeLink.CompilerInternals.ExpressionInlineIf"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ExpressionStyle.Return">
            <summary>
            Identifies this as a <see cref="T:CodeLink.CompilerInternals.ExpressionReturn"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ExpressionStyle.Result">
            <summary>
            Identifies this as a <see cref="T:CodeLink.CompilerInternals.ExpressionResult"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ExpressionStyle.This">
            <summary>
            Identifies this as a <see cref="T:CodeLink.CompilerInternals.ExpressionThis"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ExpressionStyle.Value">
            <summary>
            Identifies this as a <see cref="T:CodeLink.CompilerInternals.ExpressionValue"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ExpressionStyle.New">
            <summary>
            Identifies this as a <see cref="T:CodeLink.CompilerInternals.ExpressionNew"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ExpressionStyle.Initializer">
            <summary>
            Identifies this as a <see cref="T:CodeLink.CompilerInternals.ExpressionInitializer"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ExpressionStyle.Exit">
            <summary>
            Identifies this as a <see cref="T:CodeLink.CompilerInternals.ExpressionExit"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ExpressionStyle.Immediate">
            <summary>
            Identifies this as a <see cref="T:CodeLink.CompilerInternals.ExpressionImmediate"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ExpressionStyle.PointerTo">
            <summary>
            Identifies this as a <see cref="T:CodeLink.CompilerInternals.ExpressionPointerTo"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ExpressionStyle.Dereference">
            <summary>
            Itentifies this as a <see cref="T:CodeLink.CompilerInternals.ExpressionDereference"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ExpressionStyle.UnitStandard">
            <summary>
            Denotes a <see cref="T:CodeLink.CompilerInternals.ExpressionUnitStandard"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ExpressionStyle.UnitParameter">
            <summary>
            Denotes a <see cref="T:CodeLink.CompilerInternals.ExpressionUnitParameter"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ExpressionStyle.Void">
            <summary>
            Denotes a <see cref="T:CodeLink.CompilerInternals.ExpressionVoid"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ExpressionStyle.Null">
            <summary>
            Denotes a <see cref="T:CodeLink.CompilerInternals.ExpressionNull"/>
            </summary>
        </member>
        <member name="T:CodeLink.CompilerInternals.ExpressionBreak">
            <summary>
            This class strictly exists so that ExpressionGen can inform ObjectFileGen of the existance of a 'break' expression.
            ObjectFileGen actually replaces this with an <see cref="T:CodeLink.CompilerInternals.OItemStatementBreak"/>
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionCall._EvaluateGetStaticInjectThis(CodeLink.CompilerInternals.CompileState)">
            <summary>
            If we only had 1 item in the lookup expression, see if injecting a 'this' resolves to the same item. If so, we have an instance member
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionCall._EvaluateGetStaticRemoveLastChild(CodeLink.CompilerInternals.CompileState)">
            <summary>
            If we have multiple chlidren in the lookup expression, try removing the last one and see what that resolves with
            Depending on the answer tells us if we have a static or an instance member
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.Generate(CodeLink.CompilerInternals.Expression@)">
            <summary>
            Generates an expression based on all of the appended input
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator._Generate_All_KeywordNew(System.Collections.Generic.List{CodeLink.CompilerInternals.ExpressionGenerator.EGItem})">
            <summary>
            Attempts to generate all instances of the 'new' keyword
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator._Generate_KeywordNew(System.Collections.Generic.List{CodeLink.CompilerInternals.ExpressionGenerator.EGItem},System.Int32)">
            <summary>
            Generates the 'new' keyword, which requires a single right-hand expression (a function call, specifically)
            </summary>
            <param name="items"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator._Generate_All_Operators(System.Collections.Generic.List{CodeLink.CompilerInternals.ExpressionGenerator.EGItem})">
            <summary>
            Attempts to generate all operators that are in this list of items
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator._Generate_Operator(System.Collections.Generic.List{CodeLink.CompilerInternals.ExpressionGenerator.EGItem},System.Int32)">
            <summary>
            Attempts to generate a single operator at the defined index
            </summary>
            <param name="items"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator._Generate_Operator_InlineIf(System.Collections.Generic.List{CodeLink.CompilerInternals.ExpressionGenerator.EGItem},System.Int32)">
            <summary>
            Should be called with the index of the 'split' operator, the ':' in 'x ? t : f'
            </summary>
            <param name="items"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator._Generate_Operator_Unary(System.Collections.Generic.List{CodeLink.CompilerInternals.ExpressionGenerator.EGItem},System.Int32)">
            <summary>
            Attempts to generate a single unary operator (left OR right associated)
            </summary>
            <param name="items"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator._Generate_Operator_Binary(System.Collections.Generic.List{CodeLink.CompilerInternals.ExpressionGenerator.EGItem},System.Int32)">
            <summary>
            Attempts to generate a single binary operator (left AND right associated)
            </summary>
            <param name="items"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator._Generate_All_KeywordExit(System.Collections.Generic.List{CodeLink.CompilerInternals.ExpressionGenerator.EGItem})">
            <summary>
            Attempts to generate the 'exit' keyword - There should be only 1
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator._Generate_All_KeywordBreak(System.Collections.Generic.List{CodeLink.CompilerInternals.ExpressionGenerator.EGItem})">
            <summary>
            Attempts to generate the 'break' keyword - There should be only 1
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator._FindStyle(System.Collections.Generic.List{CodeLink.CompilerInternals.ExpressionGenerator.EGItem},CodeLink.CompilerInternals.ExpressionGenerator.EGItemStyle,System.Int32)">
            <summary>
            Returns the first index that matches 'toFind' within the same scope (i.e. ignoring stuff inside [], (), { })
            </summary>
            <param name="items"></param>
            <param name="toFind"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator._FindMatching(System.Collections.Generic.List{CodeLink.CompilerInternals.ExpressionGenerator.EGItem},System.Int32,CodeLink.CompilerInternals.ExpressionGenerator.EGItemStyle,CodeLink.CompilerInternals.ExpressionGenerator.EGItemStyle)">
            <summary>
            Returns the index of the matching '(' to ')', '[' to ']', etc
            </summary>
            <param name="items"></param>
            <param name="startIndex"></param>
            <param name="depthIncrease"></param>
            <param name="depthDecrease"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator._ExpressionAt(System.Collections.Generic.List{CodeLink.CompilerInternals.ExpressionGenerator.EGItem},System.Int32,CodeLink.CompilerInternals.ExpressionStyle)">
            <summary>
            Returns the expression object at the desired index (if valid)
            </summary>
            <param name="items"></param>
            <param name="index"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator._ItemAt(System.Collections.Generic.List{CodeLink.CompilerInternals.ExpressionGenerator.EGItem},System.Int32,CodeLink.CompilerInternals.ExpressionGenerator.EGItemStyle)">
            <summary>
            Returns the EGItem object at the desired index (if valid)
            </summary>
            <param name="items"></param>
            <param name="index"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator._Replace(System.Collections.Generic.List{CodeLink.CompilerInternals.ExpressionGenerator.EGItem},CodeLink.CompilerInternals.ExpressionGenerator.EGItem,System.Int32)">
            <summary>
            Replaces a single item in the item list
            </summary>
            <param name="items"></param>
            <param name="newItem"></param>
            <param name="index"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator._Replace(System.Collections.Generic.List{CodeLink.CompilerInternals.ExpressionGenerator.EGItem},CodeLink.CompilerInternals.ExpressionGenerator.EGItem,System.Int32,System.Int32)">
            <summary>
            Replaces a range of items with a single EGItem
            </summary>
            <param name="items"></param>
            <param name="newItem"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator._Remove(System.Collections.Generic.List{CodeLink.CompilerInternals.ExpressionGenerator.EGItem},System.Int32)">
            <summary>
            Removes a single EGItem from the list`
            </summary>
            <param name="items"></param>
            <param name="index"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator._Remove(System.Collections.Generic.List{CodeLink.CompilerInternals.ExpressionGenerator.EGItem},System.Int32,System.Int32)">
            <summary>
            Removes a range of items from the list
            </summary>
            <param name="items"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator._Duplicate(System.Collections.Generic.List{CodeLink.CompilerInternals.ExpressionGenerator.EGItem},System.Int32,System.Int32)">
            <summary>
            Duplicates a range of EGItems from the list (typically to be recursively passed to _Generate)
            </summary>
            <param name="items"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator._FindNextOperator(System.Collections.Generic.List{CodeLink.CompilerInternals.ExpressionGenerator.EGItem})">
            <summary>
            Return the index of the next operator to be handled
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendName(CodeLink.Token)">
            <summary>
            Appends a code 'name' which refers to a namespace, type, function, or variable
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendAnonymousName(CodeLink.Token)">
            <summary>
            Appends a 'name' which is going to create an anonymous function
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendChild(CodeLink.Token)">
            <summary>
            Appends a 'child' token, typically a '.' in any C based syntax. Typically used to separate multiple code 'names'
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendComment(CodeLink.Token)">
            <summary>
            Appends the current comment to the ObjectFileGenerator immediately. Suppresses any errors (surfaced as a result 'message')
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendUnit(CodeLink.Token,CodeLink.Token)">
            <summary>
            Appends a 'unit' token, typically something like 'bar' or 'psi'. Should always be preceeded by a 'name' token (or an 'immediate' within a parameter list)
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendParamUnit(CodeLink.Token,CodeLink.Token)">
            <summary>
            Appends a '::' unit token, should always be preceeded by either a name or a unit token.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendImmediate(CodeLink.CompilerInternals.ImmediateStyle,CodeLink.Token,System.Object)">
            <summary>
            Appends any immediate value.
            </summary>
            <param name="style"></param>
            <param name="t"></param>
            <param name="value"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendImmediate_Boolean(CodeLink.Token,System.Boolean)">
            <summary>
            Appends an immediate boolean value. Typically 'true' or 'false'
            </summary>
            <param name="t"></param>
            <param name="value"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendImmediate_Int8(CodeLink.Token,System.SByte)">
            <summary>
            Appends an immediate signed 8 bit integer
            </summary>
            <param name="t"></param>
            <param name="value"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendImmediate_Int16(CodeLink.Token,System.Int16)">
            <summary>
            Appends an immediate signed 16 bit integer
            </summary>
            <param name="t"></param>
            <param name="value"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendImmediate_Int32(CodeLink.Token,System.Int32)">
            <summary>
            Appends an immediate signed 32 bit integer
            </summary>
            <param name="t"></param>
            <param name="value"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendImmediate_Int64(CodeLink.Token,System.Int64)">
            <summary>
            Appends an immediate signed 64 bit integer
            </summary>
            <param name="t"></param>
            <param name="value"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendImmediate_UInt8(CodeLink.Token,System.Byte)">
            <summary>
            Appends an immediate unsigned 8 bit integer.
            </summary>
            <param name="t"></param>
            <param name="value"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendImmediate_UInt16(CodeLink.Token,System.UInt16)">
            <summary>
            Appends an immediate unsigned 16 bit integer
            </summary>
            <param name="t"></param>
            <param name="value"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendImmediate_UInt32(CodeLink.Token,System.UInt32)">
            <summary>
            Appends an immediate unsigned 32 bit integer
            </summary>
            <param name="t"></param>
            <param name="value"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendImmediate_UInt64(CodeLink.Token,System.UInt64)">
            <summary>
            Appends an immediate unsigned 64 bit integer
            </summary>
            <param name="t"></param>
            <param name="value"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendImmediate_Single(CodeLink.Token,System.Single)">
            <summary>
            Appends an immediate single precision floating point value
            </summary>
            <param name="t"></param>
            <param name="value"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendImmediate_String(CodeLink.Token,System.String)">
            <summary>
            Appends an immediate string
            </summary>
            <param name="t"></param>
            <param name="value"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendImmediate_Bytes(CodeLink.Token,System.Byte[])">
            <summary>
            Appends an immediate value defined as bytes.
            This gives the compiler a better shot at implying the type that is desired
            </summary>
            <param name="t"></param>
            <param name="value"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendImmediate_Double(CodeLink.Token,System.Double)">
            <summary>
            Appends an immediate double precision floating point value
            </summary>
            <param name="t"></param>
            <param name="value"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendArrayStart(CodeLink.Token)">
            <summary>
            Appends an 'array start' token. Typically, this is '[' in C based syntaxes
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendArrayEnd(CodeLink.Token)">
            <summary>
            Appends an 'array end' token. Typically, this is ']' in C based syntaxes
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendExpressionStart(CodeLink.Token)">
            <summary>
            Appends an 'expression start' token. Typically, this is '(' in C based syntaxes
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendExpressionEnd(CodeLink.Token)">
            <summary>
            Appends an 'expression end' token. Typically, this is ')' in C based syntaxes
            </summary>
            <param name="t"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CodeLink.CompilerInternals.ExpressionGenerator.AppendTypeListStart(CodeLink.Token)" -->
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendTypeListEnd(CodeLink.Token)">
            <summary>
            Appends a 'type list end' token, which is the end of a generic type list; Typically a '>' token
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendInitializerStart(CodeLink.Token)">
            <summary>
            Appends an 'initializer start' token. In c based languages, this is a '{', used as in 'myArr = { 1, 2, 4, -7 }'
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendInitializerEnd(CodeLink.Token)">
            <summary>
            Appends an 'initializer end' token. In c based languages, this is a '}', used as in 'myArr = { 1, 2, 4, -7 }'
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendListSeparator(CodeLink.Token)">
            <summary>
            Appends a 'list separator' token. Typically, this is ',' in C based syntaxes
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_Add(CodeLink.Token)">
            <summary>
            Appends an 'add' operator. Typically, this is the '+' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_AddressOf(CodeLink.Token)">
            <summary>
            Appends an 'address of' operator. Typically, this is the '@' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_SizeOf(CodeLink.Token)">
            <summary>
            Appends the 'size of' operator. 
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_IsDefined(CodeLink.Token)">
            <summary>
            Appends the 'isDefined' operator. 
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_Subtract(CodeLink.Token)">
            <summary>
            Appends a 'subtract' operator. Typically, this is the '-' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_Multiply(CodeLink.Token)">
            <summary>
            Appends a 'multiply' operator. Typically, this is the '*' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_Divide(CodeLink.Token)">
            <summary>
            Appends a 'divide' operator. Typically, this is the '/' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_Dereference(CodeLink.Token)">
            <summary>
            Appends a 'dereference' operator, should be preceded by an 'evaluate' expression. Typically, this is the '^' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_Modulus(CodeLink.Token)">
            <summary>
            Appends a 'modulus' operator. Typically, this is the '%' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_Set(CodeLink.Token)">
            <summary>
            Appends the 'set' operator. Typically, this is the '=' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_InlineIf(CodeLink.Token)">
            <summary>
            Appends the 'inline if' operator. Typically, this is the '?' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_InlineIfSeparator(CodeLink.Token)">
            <summary>
            Appends the 'inline if separator'. Typically, this is the ':' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_BitwiseShiftLeft(CodeLink.Token)">
            <summary>
            Appends a 'bitwise shift left' operator. Typically, this is the '&lt;&lt;' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_BitwiseShiftRight(CodeLink.Token)">
            <summary>
            Appends a 'bitwise shift right'. Typically, this is the '&gt;&gt;' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_BitwiseAnd(CodeLink.Token)">
            <summary>
            Appends a 'bitwise and' operator. Typically, this is the '&amp;' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_BitwiseOr(CodeLink.Token)">
            <summary>
            Appends a 'bitwise or' operator. Typically, this is the '|' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_BitwiseXor(CodeLink.Token)">
            <summary>
            Appends a 'bitwise xor' operator. 
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_BitwiseNot(CodeLink.Token)">
            <summary>
            Appends a 'bitwise not' operator. Typically, this is the '~' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_LogicalAnd(CodeLink.Token)">
            <summary>
            Append a 'logical and' operator. Typically, this is the '&amp;&amp;' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_LogicalOr(CodeLink.Token)">
            <summary>
            Appends a 'logical or' operator. Typically, this is the '||' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_LogicalXor(CodeLink.Token)">
            <summary>
            Appends a 'logical xor' operator.
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_LogicalNot(CodeLink.Token)">
            <summary>
            Appends a 'logical not' operator. Typically, this is the '!' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_IsLessThan(CodeLink.Token)">
            <summary>
            Appends a 'less than' operator. Typically, this is the '&lt;' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_IsLessThanOrEqual(CodeLink.Token)">
            <summary>
            Appends a 'less than or equal' operator. Typically, this is the '&lt;=' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_IsGreaterThan(CodeLink.Token)">
            <summary>
            Appends a 'greater than' operator. Typically, this is the '&gt;' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_IsGreaterThanOrEqual(CodeLink.Token)">
            <summary>
            Appends a 'greater than or equal' operator, Typically, this is the '&gt;=' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_IsEqual(CodeLink.Token)">
            <summary>
            Appends a 'is equal' operator. Typically, this is the '==' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_IsNotEqual(CodeLink.Token)">
            <summary>
            Appends a 'is not equal' operator. Typically, this is the '!=' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_PreIncrementer(CodeLink.Token)">
            <summary>
            Appends a 'preincrementer' operator. Typically, this is the '++i' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_PostIncrementer(CodeLink.Token)">
            <summary>
            Appends a 'postincrementer' operator. Typically, this is the 'i++' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_PreDecrementer(CodeLink.Token)">
            <summary>
            Appends a 'predecrementer' operator. Typically, this is the '--i' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_PostDecrementer(CodeLink.Token)">
            <summary>
            Appends a 'postdecrementer' operator. Typically, this is the 'i--' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_AddAssignment(CodeLink.Token)">
            <summary>
            Appends a 'add assignment' operator. Typically, this is the '+=' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_SubtractAssignment(CodeLink.Token)">
            <summary>
            Appends a 'subtract assignment' operator. Typically, this is the '-=' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_MultiplyAssignment(CodeLink.Token)">
            <summary>
            Appends a 'multiply assignment' operator. Typically, this is the '*=' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_DivideAssignment(CodeLink.Token)">
            <summary>
            Appends a 'divide assignment' operator. Typically, this is the '/=' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_ModulusAssignment(CodeLink.Token)">
            <summary>
            Appends a 'modulus assignment' operator. Typically, this is the '%=' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_ShiftLeftAssignment(CodeLink.Token)">
            <summary>
            Appends a 'left-shift assignment' operator. Typically, this is the '&lt;&lt;=' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_ShiftRightAssignment(CodeLink.Token)">
            <summary>
            Appends a 'shift-right assignment' operator. Typically, this is the '&gt;&gt;=' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_BitwiseAndAssignment(CodeLink.Token)">
            <summary>
            Appends a 'bitwise-and assignment' operator. Typically, this is the '&amp;=' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_BitwiseXorAssignment(CodeLink.Token)">
            <summary>
            Appends a 'bitwise-xor assignment' operator. Typically, this is the '^=' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendOp_BitwiseOrAssignment(CodeLink.Token)">
            <summary>
            Appends a 'bitwise-or assignment' operator. Typically, this is the '|=' symbol
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendKeyword_Result(CodeLink.Token)">
            <summary>
            Appends a 'result' keyword. This allows using a function result as a variable
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendKeyword_Return(CodeLink.Token)">
            <summary>
            Appends a 'return' keyword. This allows filling a function result and returning from the function immediately
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendKeyword_This(CodeLink.Token)">
            <summary>
            Appends a 'this' keyword, which refers to the current object
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendKeyword_Value(CodeLink.Token)">
            <summary>
            Appends the 'value' keyword. This is ONLY used within a 'setter' to obtain the value to set
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendKeyword_PointerTo(CodeLink.Token)">
            <summary>
            Appends the 'pointer to' keyword. Should only be used as the first token in a 'type' expression
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendKeyword_Exit(CodeLink.Token)">
            <summary>
            Appends an 'exit' keyword. This allows returning from a function immediately
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendKeyword_Break(CodeLink.Token)">
            <summary>
            Appends the 'break' keyword. This allows for bailing from the innermost loop immediately
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionGenerator.AppendKeyword_Void(CodeLink.Token)">
            <summary>
            Appends a 'void' keyword. This is ONLY used as a return type of a function which has no return value
            </summary>
            <param name="t"></param>
        </member>
        <member name="T:CodeLink.CompilerInternals.ExpressionGenerator.EGItem">
            <summary>
            Internally used temporary objects strictly for generating expressions
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ImmediateStyle.Boolean">
            <summary>
            A 'true' (non-zero) or 'false' (zero) 4-byte value 
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ImmediateStyle.Int8">
            <summary>
            A 1-byte signed integer value which can contain -128 to 127
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ImmediateStyle.Int16">
            <summary>
            A 2-byte signed integer value which can contain -32768 to 32767
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ImmediateStyle.Int32">
            <summary>
            A 4-byte signed integer value which can contain -2147483648 to +2147483647
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ImmediateStyle.Int64">
            <summary>
            An 8-byte signed integer value
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ImmediateStyle.UInt8">
            <summary>
            A 1-byte unsigned integer value which can contain 0 to 255
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ImmediateStyle.UInt16">
            <summary>
            A 2-byte unsigned integer value which can contain 0 to 65535
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ImmediateStyle.UInt32">
            <summary>
            A 4-byte unsigned integer value which can contain 0 to 4294967295
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ImmediateStyle.UInt64">
            <summary>
            An 8-byte unsigned integer value
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ImmediateStyle.Single">
            <summary>
            A 4-byte floating point value
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ImmediateStyle.Double">
            <summary>
            An 8-byte floating point value
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ImmediateStyle.String">
            <summary>
            A UTF-8 encoded heap managed string
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ImmediateStyle.Bytes">
            <summary>
            This content was added as an immediate hex value, like 0xFFEEDD00
            </summary>
        </member>
        <member name="T:CodeLink.CompilerInternals.ExpressionOperator">
            <summary>
            An <see cref="T:CodeLink.CompilerInternals.Expression"/> that is the parent class for <see cref="T:CodeLink.CompilerInternals.ExpressionOperatorUnary"/> and <see cref="T:CodeLink.CompilerInternals.ExpressionOperatorBinary"/>
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionOperatorBinary._EvaluateBinaryAssignment(CodeLink.CompilerInternals.CompileState)">
            <summary>
            +=, -=,  *-, ...
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ExpressionOperatorUnary._EvaluateGetIsDefined(CodeLink.CompilerInternals.CompileState)">
            <summary>
            Returns 'true' if the content inside could perform a 'lookup' properly, finding a valid name
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="T:CodeLink.CompilerInternals.HyperdriveBuilder">
            <summary>
            Class to help instantiate Hyperdrive.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.InstructionSetSystem.ShortstringFromString(System.String,System.Byte[],System.Int32)">
            <summary>
            Given a .NET friendly unicode string, dump the bytes for a shortstring in destBytes[destOffset]
            </summary>
            <param name="newValue"></param>
            <param name="destBytes"></param>
            <param name="destOffset"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.InstructionSetSystem.ShortstringFromString(System.String,System.IntPtr,System.Int32)">
            <summary>
            Given a .NET friendly unicode string, dump the bytes for a shortstring at (destPtr + destOffset)
            </summary>
            <param name="newValue"></param>
            <param name="destPtr"></param>
            <param name="destOffset"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.InstructionSetSystem.ShortstringToString(System.Byte[],System.Int32)">
            <summary>
            Given a buffer (and offset), return a .NET friendly unicode string
            </summary>
            <param name="buffer"></param>
            <param name="bufferOffset"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.InstructionSetSystem.ShortstringToString(System.IntPtr,System.Int32)">
            <summary>
            Given a pointer to a shortstring, return a .NET friendly unicode string
            </summary>
            <param name="ptr"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.InstructionSetSystem.ShortstringValid(System.String)">
            <summary>
            Returns 'true' if the specified .NET string can be safely and completely converted to a shortstring
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ObjectFileGenerator.ItemPush(CodeLink.CompilerInternals.OItem)">
            <summary>
            Pushes a new scope on to the top of the stack
            </summary>
            <param name="item"></param>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItem.myParent">
            <summary>
            Returns a reference to the object that considers this object a "child"
            </summary>
        </member>
        <member name="P:CodeLink.CompilerInternals.OItem.ItemParentBlock">
            <summary>
            Returns a reference to who owns this code (either a function or a start)
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.OItem.NameDefinedLocal(CodeLink.Token)">
            <summary>
            Returns 'true' if the specified <paramref name="name"/> is defined in this object's <see cref="F:CodeLink.CompilerInternals.OItem.NameHash"/>
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.OItem.NameGetLocal(CodeLink.Token)">
            <summary>
            If <paramref name="name"/> is defined in this item's <see cref="F:CodeLink.CompilerInternals.OItem.NameHash"/>, the <see cref="T:CodeLink.CompilerInternals.OItem"/> associated with the <paramref name="name"/> is returned. 
            </summary>
            <param name="name"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.OItem.NameLookupLocal(CodeLink.Token,CodeLink.CompilerInternals.CompileState)">
            <summary>
            Looks up <paramref name="name"/> in this object <see cref="F:CodeLink.CompilerInternals.OItem.NameHash"/> based on the available <see cref="T:CodeLink.CompilerInternals.OItemVisibility"/>
            </summary>
            <param name="name"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="T:CodeLink.CompilerInternals.OItemAttribute">
            <summary>
            Used to communicate from a parser to a <see cref="!:Core.Compiler"/> about what attributes are present on a particular <see cref="!:LSystem.Objects.OItem"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemAttribute.None">
            <summary>
            No attributes are specified
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemAttribute.Virtual">
            <summary>
            When used on a class member, subclasses can override this item
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemAttribute.Abstract">
            <summary>
            When used on a class or class member, subclasses MUST override this item
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemAttribute.Override">
            <summary>
            When used on a class member, identifies that this item overrides the base implementation
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemAttribute.Static">
            <summary>
            When used on a class or class member, this is essentially a global variable (not an instance member)
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemAttribute.Sealed">
            <summary>
            When used on a class member, subclasses CANNOT override this item
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemAttribute.Inline">
            <summary>
            When used on a function, instructs the compiler to replace calls
            to this function with this function's code directly
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemAttribute.Unsafe">
            <summary>
            When used by an input parser, allows 'unsafe' (i.e. 'pointerTo' and 'dereference') operators
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemAttribute.Const">
            <summary>
            When used on a variable, forces the compiler to resolve it at compile time
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemAttribute.Pack_1">
            <summary>
            When used on a structure, forces the compiler to make the items within it at least 1 byte large
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemAttribute.Pack_2">
            <summary>
            When used on a structure, forces the compiler to make the items within it at least 2 bytes
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemAttribute.Pack_4">
            <summary>
            When used on a structure, forces the compiler to make the items within it at least 4 bytes
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemAttribute.Pack_8">
            <summary>
            When used on a structure, forces the compiler to make the items within it at least 8 bytes
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemAttribute.Pack_16">
            <summary>
            When used on a structure, forces the compiler to make the items within it at least 16 bytes
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemAttribute.Pack_32">
            <summary>
            When used on a structure, forces the compiler to make the items within it at least 32 bytes
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemAttribute.Public">
            <summary>
            Visible everywhere
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemAttribute.Private">
            <summary>
            Visible within the same file + namespace ( + class)
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemAttribute.Internal">
            <summary>
            Visible withint the same namespace
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemAttribute.Protected">
            <summary>
            Visible only to this class and any subclasses
            </summary>
        </member>
        <member name="T:CodeLink.CompilerInternals.OItemCompilerDirectiveGroup">
            <summary>
            This is a very special class that gets dynamically injected at "Merge" time when a compiler directive is encountered
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.OItemCompilerDirectiveGroup.ResolveDirectiveGroup(CodeLink.Compiler,System.Boolean@)">
            <summary>
            This call is an attempt to replace a compiler directive with one of its cases. 
            Returns 'true' if the content was injected
            Returns 'false' if no clear option was chosen
            </summary>
            <param name="compiler"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.OItemGlobal.ClearForNextCompile(System.Int32,System.Collections.Generic.List{CodeLink.CompilerInternals.OItem})">
            <summary>
            Remove any items that were added by this compilation
            </summary>
            <param name="compiler"></param>
        </member>
        <member name="T:CodeLink.CompilerInternals.EParameterDirection">
            <summary>
            Identifies the direction of a <see cref="T:CodeLink.CompilerInternals.OItemParameter"/> or <see cref="T:CodeLink.CompilerInternals.CallParameter"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.EParameterDirection.In">
            <summary>
            This parameter is passed to the function on the stack directly
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.EParameterDirection.Out">
            <summary>
            This parameter requires a location (address or <see cref="T:CodeLink.CompilerInternals.OTypePointer"/>) which will be filled after this function returns
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.EParameterDirection.Reference">
            <summary>
            This parameter requires a location (address or <see cref="T:CodeLink.CompilerInternals.OTypePointer"/> which may be used both on the way in, and after this function returns
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.OItemStart._CompileGenerateAttempt(CodeLink.CompilerInternals.CompileState)">
            <summary>
            Attempts to actually generate the start block. May return an error in the case where the 'start' block has a type 'void', and was overridden by the object type of the first 'return val' encountered.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="T:CodeLink.CompilerInternals.OItemStatementStyle">
            <summary>
            Defines the particular style of a <see cref="T:CodeLink.CompilerInternals.OItemStatement"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemStatementStyle.Single">
            <summary>
            A single statement. Typically a line of code.
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemStatementStyle.If">
            <summary>
            An 'if' statement. Can be followed by an 'else if', or 'else'
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemStatementStyle.ElseIf">
            <summary>
            An 'else if' statement. Must be preceeded by an 'if' or 'else if' statement
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemStatementStyle.Else">
            <summary>
            An 'else' statement. Must be preceeded by an 'if' or 'else if' statement
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemStatementStyle.While">
            <summary>
            A 'while' statement, which loops while a condition is true
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemStatementStyle.Do">
            <summary>
            A 'do while' statement, which runs once, then repeats if a condition is true
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemStatementStyle.For">
            <summary>
            A 'for' statement, which contains an initializer, condition, and an incrementer
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemStatementStyle.Try">
            <summary>
            A 'try' statement, which can trap exceptions that are thrown
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemStatementStyle.Catch">
            <summary>
            A 'catch 'statement which must be preceeded by a 'try' statement
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemStatementStyle.Break">
            <summary>
            A 'break' statement, which can only be used inside of a loop
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemStatementStyle.Continue">
            <summary>
            A 'continue' statement, which can only be used inside of a loop
            </summary>
        </member>
        <member name="T:CodeLink.CompilerInternals.OItemStyle">
            <summary>
            Defines the major types of OItem that exist
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemStyle.None">
            <summary>
            The initial value for an OItem when another <see cref="T:CodeLink.CompilerInternals.OItemStyle"/> is not specified
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemStyle.Comment">
            <summary>
            The item is a <see cref="T:CodeLink.CompilerInternals.OItemComment"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemStyle.Variable">
            <summary>
            The item is a variable (global, local, or offset)
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemStyle.Type">
            <summary>
            The item is an <see cref="T:CodeLink.OType"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemStyle.Function">
            <summary>
            The item is a <see cref="T:CodeLink.CompilerInternals.OItemFunction"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemStyle.Statement">
            <summary>
            The item is a <see cref="T:CodeLink.CompilerInternals.OItemStatement"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemStyle.Namespace">
            <summary>
            The item is a <see cref="T:CodeLink.CompilerInternals.OItemNamespace"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemStyle.EnumeratorValue">
            <summary>
            The item is an <see cref="T:CodeLink.CompilerInternals.OTypeEnumeratorValue"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemStyle.Instruction">
            <summary>
            The item is an <see cref="T:CodeLink.Instruction"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemStyle.Start">
            <summary>
            The item is a <see cref="T:CodeLink.CompilerInternals.OItemStart"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemStyle.Alias">
            <summary>
            The item is an <see cref="T:CodeLink.CompilerInternals.OItemAlias"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemStyle.Parameter">
            <summary>
            The item is a <see cref="T:CodeLink.CompilerInternals.OItemParameter"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemStyle.GetterSetter">
            <summary>
            The item is a <see cref="T:CodeLink.CompilerInternals.OItemGetterSetter"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemStyle.Getter">
            <summary>
            The item is a <see cref="T:CodeLink.CompilerInternals.OItemGetter"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemStyle.Setter">
            <summary>
            The item is a <see cref="T:CodeLink.CompilerInternals.OItemSetter"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemStyle.File">
            <summary>
            The item is a <see cref="T:CodeLink.CompilerInternals.OItemObjectFile"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemStyle.NamespaceInstance">
            <summary>
            The item is a <see cref="T:CodeLink.CompilerInternals.OItemNamespaceInstance"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemStyle.Directive">
            <summary>
            This item is a <see cref="T:CodeLink.CompilerInternals.OItemCompilerDirective" />
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemStyle.CompilerDirectiveGroup">
            <summary>
            This item is a <see cref="T:CodeLink.CompilerInternals.OItemCompilerDirectiveGroup"/>
            </summary>
        </member>
        <member name="T:CodeLink.CompilerInternals.OItemVariableStyle">
            <summary>
            Defines the particular type of variable
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemVariableStyle.Global">
            <summary>
            A global variable (lives in code segment)
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemVariableStyle.Local">
            <summary>
            A stack frame offset variable (local to a function/start block)
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemVariableStyle.Offset">
            <summary>
            An offset variable (offset from base structure/array location)
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OItemVariableStyle.Unknown">
            <summary>
            Initial value (should never be encountered)
            </summary>
        </member>
        <member name="T:CodeLink.CompilerInternals.OperatorType">
            <summary>
            Contains the specific operator in a <see cref="!:Expressions.ExpressionOpUnary"/> or a <see cref="!:Expressions.ExpressionOpBinary"/>
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.OTypeObject_Generic.GenericParameterCount">
            <summary>
            The real, actual, as completed, number of generic 'type parameters' that must be populated to compile this type
            </summary>
        </member>
        <member name="T:CodeLink.CompilerInternals.ParseLinkC">
            <summary>
            Parser for C-syntax language
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ParseLinkC.oGen">
            <summary>
            Global ObjectFile generator
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ParseLinkC.tokenList">
            <summary>
            List of tokens
            </summary>
        </member>
        <member name="F:CodeLink.CompilerInternals.ParseLinkC.testReturnTypeString">
            <summary>
            Header constants used for batchTesting
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.#ctor">
            <summary>
            Instantiates an instance of the C-Parser
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.ParseStub(CodeLink.ObjectFile@,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parses a stub
            </summary>
            <param name="objectFile">Parsing result if successful, null otherwise</param>
            <param name="sourceID">Identification string of the stub</param>
            <param name="sourceContent">Stub contents</param>
            <param name="resultType">Stub expected result type</param>
            <param name="namespaceWrap">Stub namespace</param>
            <param name="usingList">Stub using list</param>
            <returns>List of parsing results (will never be null)</returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.ParseFile(CodeLink.ObjectFile@,System.String,System.String)">
            <summary>
            Parses a file
            </summary>
            <param name="objectFile">Parsing result if successful, null otherwise</param>
            <param name="sourceID">Identification string of the file</param>
            <param name="sourceContent">File contents</param>
            <returns>List of parsing results (will never be null)</returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.GetLexer">
            <summary>
            Instantiates an instance of the lexer, this is done once for all parsing requests
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.ParseTokens(System.Int32,System.Int32)">
            <summary>
            Call to parse tokens, specifying a start and end. Parses up to and including the end index.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.ParseAllTokens(CodeLink.ObjectFile@,System.String,System.Collections.Generic.List{CodeLink.Token})">
            <summary>
            Pass in a tokenlized list and returns an object file and/or result list.
            </summary>
            <param name="objectFile">Object file to pass in to the compiler, if NULL then one could not be created.</param>
            <param name="sourceID">ID (or filepath) of the file we're parsing.</param>
            <param name="tokens">List of tokens to parse.</param>
            <returns>Returns a result list if we have one.</returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.ParseKeyTokens(System.Int32,System.Collections.Generic.List{CodeLink.CompilerInternals.SourceAttribute})">
            <summary>
            Parses keywords.
            </summary>
            <returns>True if we have a match.</returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.ParseUsing(System.Collections.Generic.List{CodeLink.CompilerInternals.SourceAttribute})">
            <summary>
            Parses a using.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.ParseNamespace(System.Collections.Generic.List{CodeLink.CompilerInternals.SourceAttribute})">
            <summary>
            Parses a namespace.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.ParseClass(System.Collections.Generic.List{CodeLink.CompilerInternals.SourceAttribute})">
            <summary>
            Parses a class.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.ParseFunction(System.Collections.Generic.List{CodeLink.CompilerInternals.SourceAttribute})">
            <summary>
            Parses a function.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.ParseAnonymousFunction(System.Int32@,CodeLink.CompilerInternals.ExpressionGenerator@,CodeLink.Token@)">
            <summary>
            Parses an anonymous function
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.ParseParameters(CodeLink.Token)">
            <summary>
            Parses parameters.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.ParseStatement(System.Collections.Generic.List{CodeLink.CompilerInternals.SourceAttribute})">
            <summary>
            Parses a statement.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.ParseGetterSetter(System.Collections.Generic.List{CodeLink.CompilerInternals.SourceAttribute})">
            <summary>
            Parses a getter/setter.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.ParseEnum(System.Collections.Generic.List{CodeLink.CompilerInternals.SourceAttribute})">
            <summary>
            Parses an enum and its values.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.ParseEnumValue(CodeLink.Token)">
            <summary>
            Parses enumerator values.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.ParseStruct(System.Collections.Generic.List{CodeLink.CompilerInternals.SourceAttribute})">
            <summary>
            Parses a struct.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.ParseSingleLineStatement(CodeLink.Token)">
            <summary>
            Parses a single line if, else, while, or do-while as a statement
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.ParseIf">
            <summary>
            Parses an if statement.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.ParseElseIf">
            <summary>
            Parses an else-if.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.ParseElse">
            <summary>
            Parses an else.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.ParseStart(System.Int32,System.Collections.Generic.List{CodeLink.CompilerInternals.SourceAttribute})">
            <summary>
            Parses a start block.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.ParseWhile">
            <summary>
            Parses a while loop.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.ParseReturn">
            <summary>
            Parses a return.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.ParseExit">
            <summary>
            Parses an exit.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.ParseDelegate(System.Collections.Generic.List{CodeLink.CompilerInternals.SourceAttribute})">
            <summary>
            Parses a delegate.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.ParseSetter(System.Collections.Generic.List{CodeLink.CompilerInternals.SourceAttribute})">
            <summary>
            Parses a setter.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.ParseGetter(System.Collections.Generic.List{CodeLink.CompilerInternals.SourceAttribute})">
            <summary>
            Parses a getter.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.ParseTry">
            <summary>
            Parses a try block.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.ParseCatch">
            <summary>
            Parses a catch block.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.ParseAlias(System.Collections.Generic.List{CodeLink.CompilerInternals.SourceAttribute})">
            <summary>
            Parses an alias defenition.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._ParseCompilerDirective(CodeLink.CompilerInternals.CompilerDirectiveStyle,System.Boolean)">
            <summary>
            Parses a compiler #if declaration
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.ParseCompilerDirectives">
            <summary>
            Parses compiler directives.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.ParseFor">
            <summary>
            Parses a for loop.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.ParseDoWhile">
            <summary>
            Parses a do-while loop.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.ParseHint">
            <summary>
            Parses a comment.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC.ParseTestHeader(CodeLink.Token,System.String@,System.String@,System.Collections.Generic.List{CodeLink.InstructionSetInfo}@,System.Boolean@)">
            <summary>
            Given a token, attempt to parse a test header file.
            </summary>
            <param name="t">Token to look at.</param>
            <param name="testResultType">Result type.</param>
            <param name="testResultValue">Result value.</param>
            <param name="testISet">Instruction sets.</param>
            <param name="isSystemIncluded">True if the ISet is 'System'.</param>
            <returns>1 if we have a match.</returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._GenerateExpression(System.Int32@,CodeLink.CompilerInternals.ParseLinkC.ParseSource,System.String)">
            <summary>
            Generates an expression until the string parameter passed in is found.
            If we're looking for a non-closing syntax, then parse token by token. Else, we will match opening and closing syntax pairs and index 'i' should be at the opening syntax.
            </summary>
            <param name="idx">Starting token index.</param>
            <param name="source">For special occassions we can pass in where we're calling this function from.</param>
            <param name="match">Keep appending to the expression until the match string is found.</param>
            <returns>Returns an expression.</returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._GenerateExpression(CodeLink.CompilerInternals.ParseLinkC.ParseSource,System.String)">
            <summary>
            Generates an expression until the string parameter passed in is found.
            If we're looking for a non-closing syntax, then parse token by token. Else, we will match opening and closing syntax pairs and index 'i' should be at the opening syntax.
            </summary>
            <param name="source">For special occassions we can pass in where we're calling this function from.</param>
            <param name="match">Keep appending to the expression until the match string is found.</param>
            <returns>Returns an expression.</returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._GenerateExpression(System.Int32@,CodeLink.CompilerInternals.ParseLinkC.ParseSource,System.String[])">
            <summary>
            Generates an expression until a string in the parameter passed in is found.
            NOTE: This function does not match opening-closing arguments.
            </summary>
            <param name="idx">Starting token index.</param>
            <param name="source">For special occassions we can pass in where we're calling this function from.</param>
            <param name="matchUntil">Keep appending to the expression until the matchUntil string is found.</param>
            <returns>Returns an expression.</returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._GenerateExpression(CodeLink.CompilerInternals.ParseLinkC.ParseSource,System.String[])">
            <summary>
            Generates an expression until a string in the parameter passed in is found.
            NOTE: This function does not match opening-closing arguments.
            </summary>
            <param name="source">For special occassions we can pass in where we're calling this function from.</param>
            <param name="matchUntil">Keep appending to the expression until the matchUntil string is found.</param>
            <returns>Returns an expression.</returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._GenerateExpression(System.Int32@,CodeLink.CompilerInternals.ParseLinkC.ParseSource,CodeLink.CompilerInternals.ParseLinkC.TokenStyle)">
            <summary>
            Generates an expression until a token style in the parameter passed in is found.
            </summary>
            <param name="idx">Starting token index.</param>
            <param name="source">For special occassions we can pass in where we're calling this function from.</param>
            <param name="match">Keep appending to the expression until the match tokenStyle is found.</param>
            <returns>Returns an expression.</returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._GenerateExpression(CodeLink.CompilerInternals.ParseLinkC.ParseSource,CodeLink.CompilerInternals.ParseLinkC.TokenStyle)">
            <summary>
            Generates an expression until a token style in the parameter passed in is found.
            </summary>
            <param name="source">For special occassions we can pass in where we're calling this function from.</param>
            <param name="match">Keep appending to the expression until the match tokenStyle is found.</param>
            <returns>Returns an expression.</returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._SplitUnitToken(CodeLink.Token,CodeLink.Token@,CodeLink.Token@)">
            <summary>
            Given a single unit token, this function will split it into two tokens, the colon and the unit.
            </summary>
            <param name="t">Token to delimit.</param>
            <param name="colon">Out colon token.</param>
            <param name="unit">Out unit token.</param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._SplitParamUnit(CodeLink.Token,CodeLink.Token@,CodeLink.Token@)">
            <summary>
            Give a param unit token, this function will remove the double colons.
            </summary>
            <param name="t">Token to fix.</param>
            <returns>Returns token without the double colons.</returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._GenerateUnitExpression(System.Int32@,CodeLink.CompilerInternals.ParseLinkC.ParseSource)">
            <summary>
            Generates an expression for a unit.
            </summary>
            <param name="idx">Index of where to start (Should be point at unit token)</param>
            <param name="source">Source of where we are calling this function from.</param>
            <returns>Returns unit expression.</returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._GenerateUnitExpression(CodeLink.CompilerInternals.ParseLinkC.ParseSource)">
            <summary>
            Generates an expression for a unit.
            </summary>
            <param name="source">Source of where we are calling this function from.</param>
            <returns>Returns unit expression.</returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._GenerateParamUnitExpression(System.Int32@,CodeLink.CompilerInternals.ParseLinkC.ParseSource)">
            <summary>
            Generates an expression for a parameter unit.
            </summary>
            <param name="idx">Index of where to start (Should be point at unit token)</param>
            <param name="source">Source of where we are calling this function from.</param>
            <returns>Returns unit expression.</returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._GenerateParamUnitExpression(CodeLink.CompilerInternals.ParseLinkC.ParseSource)">
            <summary>
            Generates an expression for a parameter unit.
            </summary>
            <param name="source">Source of where we are calling this function from.</param>
            <returns>Returns unit expression.</returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._GenerateTypeNameUnitExpression(System.Int32@,CodeLink.CompilerInternals.ParseLinkC.ParseSource,CodeLink.CompilerInternals.Expression@,CodeLink.Token@,CodeLink.CompilerInternals.ExpressionUnitStandard@,CodeLink.CompilerInternals.Expression@,System.String[])">
            <summary>
            Looks at the current line of code and attempts to find a type, name, unit, and expression.
            </summary>
            <param name="idx">Index of where to start looking to generate the expression</param>
            <param name="source">Where we are calling this function from</param>
            <param name="type">Type of the variable</param>
            <param name="name">Name of the variable</param>
            <param name="unit">Units associated with the variable</param>
            <param name="e">Expression of the variable</param>
            <param name="stoppingChar">Stopping character(s) of the line of code</param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._GenerateTypeNameUnitExpression(CodeLink.CompilerInternals.ParseLinkC.ParseSource,CodeLink.CompilerInternals.Expression@,CodeLink.Token@,CodeLink.CompilerInternals.ExpressionUnitStandard@,CodeLink.CompilerInternals.Expression@,System.String[])">
            <summary>
            Looks at the current line of code and attempts to find a type, name, unit, and expression.
            </summary>
            <param name="source">Where we are calling this function from</param>
            <param name="type">Type of the variable</param>
            <param name="name">Name of the variable</param>
            <param name="unit">Units associated with the variable</param>
            <param name="e">Expression of the variable</param>
            <param name="stoppingChar">Stopping character(s) of the line of code</param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._GenerateTypeNameExpression(System.Int32@,CodeLink.CompilerInternals.ParseLinkC.ParseSource,CodeLink.CompilerInternals.Expression@,CodeLink.Token@,CodeLink.CompilerInternals.Expression@)">
            <summary>
            Looks at the current line of code and attempts to find a type, name, and expression.
            </summary>
            <param name="idx">Index of where to start looking from.</param>
            <param name="source">Source of where the function is getting called from.</param>
            <param name="type">Type of the variabe.</param>
            <param name="name">Name of the variable.</param>
            <param name="e">Variable expression.</param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._GenerateTypeNameExpression(CodeLink.CompilerInternals.ParseLinkC.ParseSource,CodeLink.CompilerInternals.Expression@,CodeLink.Token@,CodeLink.CompilerInternals.Expression@)">
            <summary>
            Looks at the current line of code and attempts to find a type, name, and expression.
            </summary>
            <param name="source">Source of where the function is getting called from.</param>
            <param name="type">Type of the variabe.</param>
            <param name="name">Name of the variable.</param>
            <param name="e">Variable expression.</param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._GenerateFunctionParams(CodeLink.Token,CodeLink.CompilerInternals.Expression@,CodeLink.Token@,CodeLink.CompilerInternals.ExpressionUnitStandard@,CodeLink.CompilerInternals.EParameterDirection@,CodeLink.CompilerInternals.Expression@)">
            <summary>
            Generates a single function parameter, returns name, type, unit, and expression
            </summary>
            <param name="functionName"></param>
            <param name="type"></param>
            <param name="name"></param>
            <param name="unit"></param>
            <param name="dir"></param>
            <param name="e"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._CatchError(System.Int32@,System.String[])">
            <summary>
            Loops through the tokenized list until one of the passed in string is found. This function is used to try to catch
            the error and minimize the amount of invalid tokens that the parser will see.
            </summary>
            <param name="idx"></param>
            <param name="find">Array of strings to find.</param>
            <returns>Returns true if one of the given strings was found, false if we reached the end.</returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._CatchError(System.String[])">
            <summary>
            Loops through the tokenized list until one of the passed in string is found. This function is used to try to catch
            the error and minimize the amount of invalid tokens that the parser will see.
            </summary>
            <param name="find">Array of strings to find.</param>
            <returns>Returns true if one of the given strings was found, false if we reached the end.</returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._AddToExpression(System.Int32@,CodeLink.CompilerInternals.ParseLinkC.ParseSource,CodeLink.CompilerInternals.ParseLinkC.ExpressionGenInfo@,CodeLink.CompilerInternals.ExpressionGenerator@)">
            <summary>
            Adds a single token to the expression generator.
            </summary>
            <param name="idx">Index of token to add. This function will not move the index unless it appends multiple tokens to create an expression.</param>
            <param name="source">Where we are parsing this token from.</param>
            <param name="info"></param>
            <param name="e">Expression generator to add the token to.</param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._AddSingleOperator(System.Int32@,CodeLink.Token,CodeLink.CompilerInternals.ParseLinkC.ParseSource,CodeLink.CompilerInternals.ParseLinkC.ExpressionGenInfo@,CodeLink.CompilerInternals.ExpressionGenerator@)">
            <summary>
            Appends a single operator to the expression generator.
            </summary>
            <param name="idx"></param>
            <param name="t">Token to append.</param>
            <param name="source">Where we are calling this function from.</param>
            <param name="e">Expression generator.</param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._AddDoubleOperator(CodeLink.Token,CodeLink.CompilerInternals.ParseLinkC.ParseSource,CodeLink.CompilerInternals.ExpressionGenerator@)">
            <summary>
            Appends a double operator to the expression generator.
            </summary>
            <param name="t">Token to append.</param>
            <param name="source">Where we are calling this function from.</param>
            <param name="e">Expression generator.</param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._AddTripleOperator(CodeLink.Token,CodeLink.CompilerInternals.ParseLinkC.ParseSource,CodeLink.CompilerInternals.ExpressionGenerator@)">
            <summary>
            Appends a triple operator to the expression generator.
            </summary>
            <param name="t">Token to append.</param>
            <param name="source">Where we are calling this function from.</param>
            <param name="e">Expression generator.</param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._AddKeyword(CodeLink.Token,CodeLink.CompilerInternals.ParseLinkC.ParseSource,CodeLink.CompilerInternals.ExpressionGenerator@)">
            <summary>
            Appends a keyword to the expression generator.
            </summary>
            <param name="t">Token to append.</param>
            <param name="source">Where we are calling this function from.</param>
            <param name="e">Expression generator.</param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._AddBase2Bytes(CodeLink.Token,CodeLink.CompilerInternals.ExpressionGenerator)">
            <summary>
            Given a token with a base 2 value, appends immediate bytes
            </summary>
            <param name="token"></param>
            <param name="e"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._AddBase16Bytes(CodeLink.Token,CodeLink.CompilerInternals.ExpressionGenerator)">
            <summary>
            Given a token with a base 16 value, appends immedate bytes
            </summary>
            <param name="token"></param>
            <param name="e"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._AddBaseXInteger(CodeLink.Token,CodeLink.CompilerInternals.ParseLinkC.ParseSource,CodeLink.CompilerInternals.ExpressionGenerator@)">
            <summary>
            Appends a integer to the expression generator.
            </summary>
            <param name="t">Token to append.</param>
            <param name="source">Where we are calling this function from.</param>
            <param name="e">Expression generator.</param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._AddFloat(CodeLink.Token,CodeLink.CompilerInternals.ParseLinkC.ParseSource,CodeLink.CompilerInternals.ExpressionGenerator@)">
            <summary>
            Appends a single operator to the expression generator.
            </summary>
            <param name="t">Token to append.</param>
            <param name="source">Where we are calling this function from.</param>
            <param name="e">Expression generator.</param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._AddBoolean(CodeLink.Token,CodeLink.CompilerInternals.ParseLinkC.ParseSource,CodeLink.CompilerInternals.ExpressionGenerator@)">
            <summary>
            Appends a single operator to the expression generator.
            </summary>
            <param name="t">Token to append.</param>
            <param name="source">Where we are calling this function from.</param>
            <param name="e">Expression generator.</param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._GetAttribute(CodeLink.Token)">
            <summary>
            Given a token t, finds the ItemAttribute associated with it.
            </summary>
            <param name="t">Token to match attribute to.</param>
            <returns>Returns the ItemAttribute.</returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._GetParamDir(CodeLink.Token)">
            <summary>
            Given a token t, finds the EParameterDirection associated with it.
            </summary>
            <param name="t">Token to match attribute to.</param>
            <returns>Returns the EParameterDirection.</returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._GetOpeningScope(System.String,System.String@)">
            <summary>
            Given a closing scope (ie ")", "]", or "}"), returns the matching opening scope.
            </summary>
            <param name="match">Scope to find the match for.</param>
            <param name="matchOpposite">Returns the matching opposite scope.</param>
            <returns>True if a scope was found.</returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._GetClosingScope(System.String,System.String@)">
            <summary>
            Given an opening scope (ie "(", "[", or "{"), returns the matching closing scope.
            </summary>
            <param name="match">Scope to find the match for.</param>
            <param name="matchOpposite">Returns the matching opposite scope.</param>
            <returns>True if a scope was found.</returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._GetMatchingScope(System.Int32,System.Int32@)">
            <summary>
            Finds the matching scope by looking ahead in the token list.
            </summary>
            <param name="startIdx">Starting index of where to start looking.</param>
            <param name="endIdx">Returns the index of the matching scope or -1 if N/A.</param>
            <returns>True if a matching scope was found.</returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._FindFirstIdx(System.Int32,System.Boolean@,System.Int32@,System.String[])">
            <summary>
            Get the index of the first string found in the list.
            </summary>
            <param name="idx">Index of where to start looking.</param>
            <param name="whiteSpace">Returns true if there is a whitespace.</param>
            <param name="stoppingChar">List of strings to look for.</param>
            <returns>Returns the index of where the first string was found.</returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._FindFirstIdx(System.Int32,System.Boolean@,System.Int32@,CodeLink.CompilerInternals.ParseLinkC.TokenStyle[])">
            <summary>
            Get the index of the first TokenStyle found in the list.
            </summary>
            <param name="idx">Index of where to start looking.</param>
            <param name="whiteSpace">Returns true if there is a whitespace.</param>
            <param name="stoppingStyle">List of strings to look for.</param>
            <returns>Returns the index of where the first string was found.</returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._FixString(System.String)">
            <summary>
            Given a string, removes the double quotes, and replaces all of the '\' immediates.
            </summary>
            <param name="str">String to fix up.</param>
            <returns>Returns the fixed string.</returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._GetTestHeader(CodeLink.CompilerInternals.TokenList,System.String@,System.String@,System.Collections.Generic.List{CodeLink.InstructionSetInfo}@)">
            <summary>
            Returns the test header ouf of a script
            </summary>
            <param name="tokenList"></param>
            <param name="testResultType"></param>
            <param name="testResultValue"></param>
            <param name="testISet"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._CheckForWhitespace(CodeLink.Token,CodeLink.Token)">
            <summary>
            Given two tokens, checks if a whitespace exists between them.
            </summary>
            <param name="t1">Token 1.</param>
            <param name="t2">Token 2.</param>
            <returns>True if whitespace exists between these tokens.</returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._CheckForListSyntax(System.Int32@,CodeLink.Token,CodeLink.CompilerInternals.ParseLinkC.ParseSource,CodeLink.CompilerInternals.ParseLinkC.ExpressionGenInfo@,CodeLink.CompilerInternals.ParseLinkC.ParseSource@)">
            <summary>
            Checks if we should be handling the greater-than and less-than symbols as a generic list start or arithmetic operations.
            </summary>
            <param name="idx"></param>
            <param name="t"></param>
            <param name="source"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.ParseLinkC._CreateExecutableStub(System.String,System.Collections.Generic.List{CodeLink.Token},System.String[],System.String,System.String)">
            <summary>
            Pass in a line of code and I will return an executable stub.
            </summary>
            <param name="sourceID"></param>
            <param name="namespace">Namespace the code belongs in.</param>
            <param name="using">Usings for the code.</param>
            <param name="returnType">Return type we want.</param>
            <param name="tokenList">Tokenized code.</param>
            <param name="hash"></param>
            <returns>False if successful.</returns>
        </member>
        <member name="T:CodeLink.CompilerInternals.ParseLinkC.ExpressionGenInfo">
            <summary>
            Contains info about parsing a list.
            </summary>
        </member>
        <member name="T:CodeLink.CompilerInternals.ParseLinkC.TokenStyle">
            <summary>
            All of the different tokens we support.
            </summary>
        </member>
        <member name="T:CodeLink.CompilerInternals.ParseLinkC.ParseSource">
            <summary>
            All of the different objects we currently support in this language .
            </summary>
        </member>
        <member name="P:CodeLink.CompilerInternals.SourceAttribute.Attribute">
            <summary>
            Returns the <see cref="T:CodeLink.CompilerInternals.OItemAttribute"/> type of this <see cref="T:CodeLink.CompilerInternals.SourceAttribute"/>
            </summary>
        </member>
        <member name="P:CodeLink.CompilerInternals.SourceAttribute.Token">
            <summary>
            Returns the <see cref="T:CodeLink.Token"/> (origin) of this <see cref="T:CodeLink.CompilerInternals.SourceAttribute"/>
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.#ctor(System.Collections.Generic.List{CodeLink.Token},System.Boolean,System.Boolean)">
            <summary>
            Creates an instance of TokenList; Helps navigate through the list of tokens.
            </summary>
            <param name="tokenList">List of tokens.</param>
            <param name="startOnComment">If true then the the index will be allowed to be pointing to a comment token.</param>
            <param name="skipComments">If true, allows class to return comment tokens. This does not include triple-line comments.</param>
            <param name="hintList"></param>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.Reset(System.Int32@,System.Boolean)">
            <summary>
            Returns the first token in the list.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.Reset(System.Boolean)">
            <summary>
            Returns the first token in the list that is not a comment.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.IndexIsValid(System.Int32)">
            <summary>
            Returns true if the index is valid.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.IndexIsValid">
            <summary>
            Returns true if the index is valid.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.TokenIsComment(System.Int32)">
            <summary>
            Returns true if the token is a comment.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.TokenIsComment">
            <summary>
            Returns true if the token is a comment.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.TokenIsMetadataComment(System.Int32)">
            <summary>
            Returns true if the token is a metadata comment.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.TokenIsMetadataComment">
            <summary>
            Returns true if the token is a metadata comment.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.GetToken(System.Int32)">
            <summary>
            Peeks at the next token.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.GetToken">
            <summary>
            Peeks at the Current token.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.GetTokenIndex(CodeLink.Token,System.Int32)">
            <summary>
            Find the index given a token.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.GetTokenStyle(System.Int32)">
            <summary>
            Peeks at the Current token style.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.GetTokenStyle">
            <summary>
            Peeks at the Current token style.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.GetTokenText(System.Int32)">
            <summary>
            Peeks at the Current token text.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.GetTokenText">
            <summary>
            Peeks at the Current token style.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.TokenIsText(System.Int32,System.String[])">
            <summary>
             Returns true if the token is any of the following text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.TokenIsText(System.String[])">
            <summary>
             Returns true if the token is any of the following text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.TokenIsStyle(System.Int32,CodeLink.CompilerInternals.ParseLinkC.TokenStyle[])">
            <summary>
             Returns true if the token is any of the following styles.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.TokenIsStyle(CodeLink.CompilerInternals.ParseLinkC.TokenStyle[])">
            <summary>
             Returns true if the token is any of the following styles.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.TokenIsStyle(CodeLink.Token,CodeLink.CompilerInternals.ParseLinkC.TokenStyle[])">
            <summary>
            Returns true if the token is any of the following styles.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.GetNextToken(System.Int32@,System.Boolean)">
            <summary>
            Gets the next token.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.GetNextToken(System.Boolean)">
            <summary>
            Gets the next token.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.GetNextTokenStyle(System.Int32@)">
            <summary>
            Gets the next token style.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.GetNextTokenStyle">
            <summary>
            Gets the next token style.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.GetNextTokenText(System.Int32@)">
            <summary>
            Gets the next token text.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.GetNextTokenText">
            <summary>
            Gets the next token text.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.GetNextTokenIndex(System.Int32@)">
            <summary>
            Gets the next token index.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.GetNextTokenIndex">
            <summary>
            Gets the next token index.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.PeekNextToken(System.Int32)">
            <summary>
            Peeks at the next token.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.PeekNextToken">
            <summary>
            Peeks at the next token.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.PeekNextTokenIndex(System.Int32)">
            <summary>
            Peeks at the next token and return its index.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.PeekNextTokenIndex">
            <summary>
            Peeks at the next token and return its index.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.PeekNextTokenStyle(System.Int32)">
            <summary>
            Peeks at the next token style.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.PeekNextTokenStyle">
            <summary>
            Peeks at the next token style.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.PeekNextTokenText(System.Int32)">
            <summary>
            Peeks at the next token style.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.PeekNextTokenText">
            <summary>
            Peeks at the next token style.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.NextTokenIsText(System.Int32,System.String[])">
            <summary>
             Returns true if the next token is any of the following text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.NextTokenIsText(System.String[])">
            <summary>
             Returns true if the next token is any of the following text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.NextTokenIsStyle(System.Int32,CodeLink.CompilerInternals.ParseLinkC.TokenStyle[])">
            <summary>
             Returns true if the next token is any of the following styles.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.NextTokenIsStyle(CodeLink.CompilerInternals.ParseLinkC.TokenStyle[])">
            <summary>
             Returns true if the next token is any of the following styles.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.GetPrevToken(System.Int32@,System.Boolean)">
            <summary>
            Gets the previous token.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.GetPrevToken(System.Boolean)">
            <summary>
            Gets the previous token.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.GetPrevTokenStyle(System.Int32@)">
            <summary>
            Gets the previous token style.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.GetPrevTokenStyle">
            <summary>
            Gets the previous token style.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.GetPrevTokenText(System.Int32@)">
            <summary>
            Gets the previous token text.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.GetPrevTokenText">
            <summary>
            Gets the previous token text.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.GetPrevTokenIndex(System.Int32@)">
            <summary>
            Gets the previous token index.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.GetPrevTokenIndex">
            <summary>
            Gets the previous token index.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.PeekPrevToken(System.Int32)">
            <summary>
            Peeks at the next token.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.PeekPrevToken">
            <summary>
            Peeks at the next token.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.PeekPrevTokenIndex(System.Int32)">
            <summary>
            Peeks at the next token and return its index.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.PeekPrevTokenIndex">
            <summary>
            Peeks at the next token and return its index.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.PeekPrevTokenStyle(System.Int32)">
            <summary>
            Peeks at the next token style.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.PeekPrevTokenStyle">
            <summary>
            Peeks at the next token style.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.PeekPrevTokenText(System.Int32)">
            <summary>
            Peeks at the next token style.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.PeekPrevTokenText">
            <summary>
            Peeks at the next token style.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.PrevTokenIsText(System.Int32,System.String[])">
            <summary>
             Returns true if the previous token is any of the following text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.PrevTokenIsText(System.String[])">
            <summary>
             Returns true if the previous token is any of the following text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.PrevTokenIsStyle(System.Int32,CodeLink.CompilerInternals.ParseLinkC.TokenStyle[])">
            <summary>
             Returns true if the previous token is any of the following styles.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.PrevTokenIsStyle(CodeLink.CompilerInternals.ParseLinkC.TokenStyle[])">
            <summary>
             Returns true if the previous token is any of the following styles.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.GetTokenAndIncrement(System.Int32@)">
            <summary>
            Returns the current token we're pointing to and increment index.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.GetTokenAndIncrement">
            <summary>
            Returns the current token we're pointing to and increment index.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.GetTokenTextAndIncrement(System.Int32@)">
            <summary>
            Returns the current token text we're pointing to and increment index.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.GetTokenTextAndIncrement">
            <summary>
            Returns the current token text we're pointing to and increment index.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.GetTokenStyleAndIncrement(System.Int32@)">
            <summary>
            Returns the current token style we're pointing to and increment index.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.GetTokenStyleAndIncrement">
            <summary>
            Returns the current token style we're pointing to and increment index.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.ChangeTokenStyle(System.Int32,CodeLink.CompilerInternals.ParseLinkC.TokenStyle)">
            <summary>
            Changes the token style.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.ChangeTokenText(System.Int32,System.String)">
            <summary>
            Changes the token text.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.ChangeTokenStyle(CodeLink.Token,CodeLink.CompilerInternals.ParseLinkC.TokenStyle)">
            <summary>
            Changes the token style.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.TokenList.ChangeTokenText(CodeLink.Token,System.String)">
            <summary>
            Changes the token text.
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.MemorySpace.Allocate(System.Int32)">
            <summary>
            Given a size, returns an address to a memory space in unmanaged memory
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.MemorySpace.Deallocate(System.Int64)">
            <summary>
            Deallocates a memory are given the address of the unmanaged memory area
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.MemorySpace.AddressToPointer(System.Int64)">
            <summary>
            Given an address, casts the address as an IntPtr
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.MemorySpace.AddressToSize(System.Int64)">
            <summary>
            Given a memory address, returns the size of the allocated memory area
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerInternals.MemorySpace.Collect(System.Boolean)">
            <summary>
            Goes through all allocated memory areas and deallocates any with no reference counts
            </summary>
        </member>
        <member name="P:CodeLink.CompilerInternals.MemorySpace.CurrentAllocatedBytes">
            <summary>
            Returns the number of allocated bytes
            </summary>
        </member>
        <member name="P:CodeLink.CompilerInternals.MemorySpace.PeakAllocatedBytes">
            <summary>
            Returns the highest number of allocated bytes at a single point
            </summary>
        </member>
        <member name="P:CodeLink.CompilerInternals.MemorySpace.CurrentAllocationCount">
            <summary>
            Returns the number of allocations
            </summary>
        </member>
        <member name="P:CodeLink.CompilerInternals.MemorySpace.PeakAllocationCount">
            <summary>
            Returns the highest number of allocation counts at a single point
            </summary>
        </member>
        <member name="M:CodeLink.CompilerInternals.MemorySpace.FindUnmanagedBlock(System.Int64,CodeLink.CompilerInternals.UnmanagedMemoryBlock@)">
            <summary>
            Given a memory address as a long, returns the associated memory area structure
            </summary>
            <param name="address"></param>
            <param name="myMemoryBlock"></param>
            <returns></returns>
        </member>
        <member name="T:CodeLink.CompilerOptions">
            <summary>
            A container for options which control the behavior of the compiler
            </summary>
        </member>
        <member name="T:CodeLink.CompilerOptions.MetaOption">
            <summary>
            Combines a single 
            </summary>
        </member>
        <member name="P:CodeLink.CompilerOptions.OptimizeConstants">
            <summary>
            If true, the compiler will attempt to optimize constants all compile-time operations down to run-time constants, where applicable
            </summary>
        </member>
        <member name="P:CodeLink.CompilerOptions.OptimizePushNulls">
            <summary>
            If true, the compiler will attempt to coelesce a sequence of 'push null' operations into a single 'push null' followed by a 'jump' to to next non-pushNull instruction.
            Injects 'noop' instructions which should never get hit if there is space available to do so after the replacement.
            </summary>
        </member>
        <member name="P:CodeLink.CompilerOptions.OptimizePushImmediates">
            <summary>
            If true, the compiler will attempt to coelesce a sequence of 'push immediate' instructions into a single 'push immediate', followed by a 'jump' the the next non-pushImmediate instruction. 
            Injects 'noop' instructions which should never get hit if there is space available to do so after the replacement. 
            </summary>
        </member>
        <member name="P:CodeLink.CompilerOptions.OptimizeJumpTargets">
            <summary>
            If true, the compiler will attempt to short-circuit any instances of a 'jump' instruction leading directly to another 'jump' instruction, or a 'jump' instruction directly to a 'return' instruction. 
            </summary>
        </member>
        <member name="P:CodeLink.CompilerOptions.OptimizeAny">
            <summary>
            If true, at least one optimization is enabled. If false, all optimizations are disabled.
            </summary>
        </member>
        <member name="P:CodeLink.CompilerOptions.OptimizeAll">
            <summary>
            Determine if all optimizations are enabled, or set whether they are all enabled/disabled
            </summary>
        </member>
        <member name="P:CodeLink.CompilerOptions.IncludeDebugInformation">
            <summary>
            <para>If true, 'debug' information is included in the output binary file upon successful compilation. </para>
            <para>NOTE: This is REQUIRED to use the output as the base for another compilation!</para>
            </summary>
        </member>
        <member name="P:CodeLink.CompilerOptions.DebugCompiler">
            <summary>
            If true, 'try/catch' constructs are removed in
            </summary>
        </member>
        <member name="P:CodeLink.CompilerOptions.TreatWarningsAsErrors">
            <summary>
            If true, the compiler will fail (not generate an output binary) if any warnings are present
            </summary>
        </member>
        <member name="P:CodeLink.CompilerOptions.AllowUnsafeCode">
            <summary>
            If true, the 'unsafe' keyword can be used, and unsafe instructions can be used within its scope
            </summary>
        </member>
        <member name="P:CodeLink.CompilerOptions.AllowLoops">
            <summary>
            if true, loops (for loops and while loops) are allowed. If false, any attempt to use these loops will result in a compilation error
            </summary>
        </member>
        <member name="P:CodeLink.CompilerOptions.AllowTryCatch">
            <summary>
            If true, try/catch scopes are allowed. If false, any attempt to use these scopes will result in a compilation error
            </summary>
        </member>
        <member name="P:CodeLink.CompilerOptions.AllowFunctions">
            <summary>
            If true, functions can be defined. If false, any attempt to implement a function will result in a compilation error
            </summary>
        </member>
        <member name="P:CodeLink.CompilerOptions.AllowCompilerDirectives">
            <summary>
            If true, compiler directives are allowed. If false, any attempt to implement a compiler directive call will result in a compilation error
            </summary>
        </member>
        <member name="F:CodeLink.CompilerOptions.myAllowConditionals">
            <summary>
            If true, conditionals (if, else if, else, and the ternary operator) are allowed. If false, any attempt to use these items will result in a compilation error
            </summary>
        </member>
        <member name="P:CodeLink.CompilerOptions.AllowVariableDeclarations">
            <summary>
            If true, variables can be defined. If false, any attempt to define a new variable will result in a compilation error.
            </summary>
        </member>
        <member name="P:CodeLink.CompilerOptions.InstructionSetsAllowed">
            <summary>
            If null/empty, all instruction sets are allowed
            </summary>
        </member>
        <member name="P:CodeLink.CompilerOptions.InstructionSetsAllowAll">
            <summary>
            Returns 'true' if all instruction sets are allowed. Note that any "prevented" instruction sets will still be prevented...
            </summary>
        </member>
        <member name="P:CodeLink.CompilerOptions.InstructionSetsPrevented">
            <summary>
            Get/set the list of instruction sets that are explicitly prevented. 
            </summary>
        </member>
        <member name="M:CodeLink.CompilerOptions.Serialize(CodeLink.Serialization.Serializer)">
            <summary>
            Serialize this object, and inject its content into the stream which is contained within the 'serializer' object
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:CodeLink.CompilerOptions.Serialize(System.IO.Stream)">
            <summary>
            Serailize this object, and inject the byte stream content into the existring stream
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:CodeLink.CompilerOptions.Serialize">
            <summary>
            Serialize this object, returning a byte array representation of its contents
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerOptions.Save(System.String)">
            <summary>
            Save this object to a file. Returns 'null' upon success
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerOptions.Deserialize(CodeLink.Serialization.Deserializer)">
            <summary>
            Deserialize a CompilerOptions object based on the given deserializer
            </summary>
            <param name="deserializer"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.CompilerOptions.Clone">
            <summary>
            Returns an exact duplicate of the CompilerOptions object and all of its content
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.Directory.IsPossibleDirectory(System.String)">
            <summary>
            Returns 'true' if the passed in path could possibly be a directory
            </summary>
            <param name="directoryPath"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.Directory.Path(System.String)">
            <summary>
            Ensures that the desired path is valid.
            </summary>
            <param name="directoryPath"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.Directory.Exists(System.String)">
            <summary>
            Returns 'true' if the specified directory exists
            </summary>
            <param name="directoryPath"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.Directory.ExistsAsync(System.String,System.Int32)">
            <summary>
            Asynchronously determines if a directory exists
            </summary>
            <param name="directoryPath"></param>
            <param name="queueID"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.Directory.Move(System.String,System.String)">
            <summary>
            Attempts to move an entire directory, and its contents, to a destination
            </summary>
            <param name="sourceDirPath"></param>
            <param name="destDirPath"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.Directory.MoveAsync(System.String,System.String,System.Int32)">
            <summary>
            Asynchronously moves a directory (and its contents) to a destination
            </summary>
            <param name="sourceDirPath"></param>
            <param name="destDirPath"></param>
            <param name="queueID"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.Directory.Create(System.String,System.Boolean)">
            <summary>
            Ensures that the passed in "directoryPath" is valid and exists. Creates directory if required.
            </summary>
            <param name="directoryPath">The directory to validate</param>
            <param name="cleanDirectory"></param>
            <returns>true if the directory exists / was created</returns>
        </member>
        <member name="M:CodeLink.FileSystem.Directory.CreateAsync(System.String,System.Int32)">
            <summary>
            Asynchronously ensures that 'directoryPath' if valid and exists. Creates directory if required.
            </summary>
            <param name="directoryPath"></param>
            <param name="queueID"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.Directory.Delete(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Attempts to delete a directory (and all of its contents). Returns 'true' if successful
            </summary>
            <param name="directoryPath"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.Directory.DeleteAsync(System.String,System.Int32,System.Nullable{System.TimeSpan})">
            <summary>
            Asynchronously attemps to delete a directory (and all of its contents)
            </summary>
            <param name="directoryPath"></param>
            <param name="queueID"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.Directory.GetSize(System.String,System.Boolean)">
            <summary>
            Attempts to read the size of all files within directory and returns the size
            </summary>
            <param name="directoryPath"></param>
            <param name="includeSubDirectories"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.Directory.EnumerateContents(System.String,System.String,System.Boolean)">
            <summary>
            Returns an enumerable of all contents of a directory (files and directories)
            </summary>
            <param name="directoryPath">The path to enumerate</param>
            <param name="searchPattern">Optional filter on results</param>
            <param name="recursive">If true, contents of sub-directories are also returned</param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.Directory.EnumerateFiles(System.String,System.String,System.Boolean)">
            <summary>
            Returns an enumerable of all files (not directories) within a directory
            </summary>
            <param name="directoryPath">The path to enumerate</param>
            <param name="searchPattern">Optional filter on results</param>
            <param name="recursive">If true, contents of sub-directories are also returned</param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.Directory.EnumerateDirectories(System.String,System.String,System.Boolean)">
            <summary>
            Returns an enumerable of all directories (not files) within a directory
            </summary>
            <param name="directoryPath">The path to enumerate</param>
            <param name="searchPattern">Optional filter on results</param>
            <param name="recursive">If true, contents of sub-directories are also returned</param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.File.NameAndExtension(System.String)">
            <summary>
            Given a filePath, returns the fileName and extension
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.File.Extension(System.String)">
            <summary>
            Given a file path, returns just the file extension (excluding the '.')
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.File.Name(System.String)">
            <summary>
            Given a file path, returns 
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.File.Directory(System.String)">
            <summary>
            Given a file path, returns the directory component
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.File.Path(System.String,System.String)">
            <summary>
            Given a directory path and fileName, builds a valid filePath
            </summary>
            <param name="directoryPath"></param>
            <param name="fileNameAndExtension">A file name and extension</param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.File.Path(System.String,System.String,System.String)">
            <summary>
            Given a directory path, fileName, and extension, builds a valid filePath
            </summary>
            <param name="directoryPath"></param>
            <param name="fileName">A file name (no extension)</param>
            <param name="fileExtension">A file extension (with, or without the '.')</param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.File.ModifiedDateTime(System.String)">
            <summary>
            Returns the last modified date/time of a file as a dateTime structure
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.File.ModifiedISO(System.String)">
            <summary>
            Returns the last modified date/time of a file as an ISO 8601 string
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.File.SizeBytes(System.String)">
            <summary>
            Returns the size of a file in bytes
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.File.Info(System.String)">
            <summary>
            Returns a .NET 'FileInfo' object, which is used to get 'Length', "LastWriteTime", etc.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.File.Create(System.String)">
            <summary>
            Attempts to create the file
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.File.InfoAsync(System.String,System.Int32)">
            <summary>
            Asynchronously returns a .NET 'FileInfo' object, which is used to get 'Length', 'LastWriteTime', etc
            </summary>
            <param name="filePath"></param>
            <param name="queueID"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.File.SaveBinary(System.String,System.Byte[])">
            <summary>
            Saves all bytes to the specified file path. Returns 'true' if successful
            </summary>
            <param name="path"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.File.SaveText(System.String,System.String)">
            <summary>
            Saves all text to the specified file path. Returns 'true' if save is successful
            </summary>
            <param name="path"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.File.SaveTextAsync(System.String,System.String,System.Int32)">
            <summary>
            Asyncronously saves all text to a path
            </summary>
            <param name="path"></param>
            <param name="data"></param>
            <param name="queueID"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.File.LoadBinary(System.String,System.Int32)">
            <summary>
            Loads all bytes from the specified file path. Returns the byte[] upon success, or null upon failure
            </summary>
            <param name="path"></param>
            <param name="maxBytes"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.File.LoadBinaryAsync(System.String,System.Int32)">
            <summary>
            Asyncronously loads a binary file
            </summary>
            <param name="path"></param>
            <param name="queueID"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.File.LoadText(System.String,System.Text.Encoding)">
            <summary>
            Loads all text from the specified file path. Returns the text, or "" if the load fails
            </summary>
            <param name="path"></param>
            <param name="maxLines">If set, only the top 'x' lines will be read from the file</param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.File.LoadTextAsync(System.String,System.Int32)">
            <summary>
            Asynchronously loads a text file
            </summary>
            <param name="path"></param>
            <param name="queueID"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.File.LoadIni(System.String,System.Boolean)">
            <summary>
            Loads (and parses) an INI file 
            </summary>
            <param name="path"></param>
            <param name="forWrite"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.File.LoadIniAsync(System.String,System.Boolean,System.Int32)">
            <summary>
            Asynchronously loads (and parses) an INI file
            </summary>
            <param name="path"></param>
            <param name="forWrite"></param>
            <param name="queueID"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.File.Delete(System.String)">
            <summary>
            Deletes the specified file
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.File.DeleteAsync(System.String,System.Int32)">
            <summary>
            Asynchronously deletes the specified file
            </summary>
            <param name="path"></param>
            <param name="queueID"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.File.Exists(System.String)">
            <summary>
            Returns 'true' if the specified file exists
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.File.ExistsAsync(System.String,System.Int32)">
            <summary>
            Asynchronously determine if a file exists
            </summary>
            <param name="path"></param>
            <param name="queueID"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.File.Move(System.String,System.String)">
            <summary>
            Moves the specified file from source to dest
            </summary>
            <param name="source"></param>
            <param name="dest"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.File.MoveAsync(System.String,System.String,System.Int32)">
            <summary>
            Asyncronously moves a file from 'source' to 'dest'
            </summary>
            <param name="source"></param>
            <param name="dest"></param>
            <param name="queueID"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.File.Copy(System.String,System.String)">
            <summary>
            Copies the specified file from source to dest
            </summary>
            <param name="source"></param>
            <param name="dest"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.File.CopyAsync(System.String,System.String,System.Int32)">
            <summary>
            Asynchronously copies a file from 'soure' to 'dest'
            </summary>
            <param name="source"></param>
            <param name="dest"></param>
            <param name="queueID"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.FileAsync.Enqueue(CodeLink.FileSystem.FileAsync.Operation)">
            <summary>
            Called by each 'Async' function to start this operation, or place it in the queue if an operation is already ongoing
            </summary>
            <param name="op"></param>
        </member>
        <member name="M:CodeLink.FileSystem.FileAsync.Dequeue(CodeLink.FileSystem.FileAsync.Operation)">
            <summary>
            Called at the completion of each 'Async' function to start the next opertion (if queue is not empty)
            </summary>
            <param name="op"></param>
        </member>
        <member name="M:CodeLink.FileSystem.INIFile.Boolean(System.String,System.String,System.Boolean)">
            <summary>
            Reads or writes a boolean value
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.SearchPaths.#ctor">
            <summary>
            Instantiates a new (empty) search path list
            </summary>
        </member>
        <member name="M:CodeLink.FileSystem.SearchPaths.#ctor(System.Boolean)">
            <summary>
            Instantiates a new (empty) search path list
            </summary>
        </member>
        <member name="P:CodeLink.FileSystem.SearchPaths.RecurseDirectories">
            <summary>
            If 'true', the standard 'FindFile' also recurses into sub-directories of the search paths
            </summary>
        </member>
        <member name="M:CodeLink.FileSystem.SearchPaths.Contains(System.String)">
            <summary>
            Returns 'true' if the 'directoryPath' is contained in this list
            </summary>
            <param name="directoryPath"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.SearchPaths.Add(System.String)">
            <summary>
            Adds a new directoryPath to this list
            </summary>
            <param name="directoryPath"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.SearchPaths.Remove(System.String)">
            <summary>
            Removes a directoryPath from this list
            </summary>
            <param name="directoryPath"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.SearchPaths.Remove(System.Int32)">
            <summary>
            Removes a directoryPath from this list
            </summary>
            <param name="directoryPath"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.SearchPaths.Clear">
            <summary>
            Removes all 'directoryPath' items from this list
            </summary>
        </member>
        <member name="P:CodeLink.FileSystem.SearchPaths.Count">
            <summary>
            Returns the number of items contained in this list
            </summary>
        </member>
        <member name="P:CodeLink.FileSystem.SearchPaths.List">
            <summary>
            Returns a new copy of the internal list of paths
            </summary>
        </member>
        <member name="M:CodeLink.FileSystem.SearchPaths.FindFile(System.String)">
            <summary>
            Returns the full path of a file found in the search paths
            </summary>
            <param name="fileWithExtension">Full path to a file, or just a file name and extension</param>
            <returns>
            <para>If passed a full path, and that file exists, retuns the input path. If it does not exists, paths are searched using just name and extension</para>
            <para>If passed just a name and extension, returns the full path of the first file found in the search paths</para>
            <para>If nothing is found, returns null</para>
            <para>Note: Uses the 'RecurseDirectories' property to determine normal/recursive behavior</para>
            </returns>
        </member>
        <member name="M:CodeLink.FileSystem.SearchPaths.FindFile(System.String,System.Boolean)">
            <summary>
            Returns the full path of a file found in the search paths
            </summary>
            <param name="fileWithExtension">Full path to a file, or just a file name and extension</param>
            <param name="recurseDirectories">If true, in addition to looking in the search path directories, recursively looks in all sub-directories of the search paths</param>
            <para>If passed a full path, and that file exists, retuns the input path. If it does not exists, paths are searched using just name and extension</para>
            <para>If passed just a name and extension, returns the full path of the first file found in the search paths</para>
            <para>If nothing is found, returns null</para>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.SearchPaths.FindFiles(System.String,System.Boolean)">
            <summary>
            Returns a list of files that match the given 'searchQuery'. If given a fully qualified path to a single file (that exists) doesn't even attempt to search, just returns that file
            </summary>
            <param name="searchPattern"></param>
            <param name="recurseDirectories"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.SearchPaths.Save(System.String)">
            <summary>
            Saves this SearchPathList to a file
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.FileSystem.SearchPaths.Load(System.String)">
            <summary>
            Loads a SearchPathList from a file. If the file does not exist, or was unable to be opened, returns an empty SearchPathList
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="P:CodeLink.FileSystem.SearchPaths.ApplicationDirectory">
            <summary>
            Returns a new SearchPathList which contains the directory which contains the running executable
            </summary>
        </member>
        <member name="M:CodeLink.Hashing.HashObject.op_ExclusiveOr(CodeLink.Hashing.HashObject,CodeLink.Hashing.HashObject)">
            <summary>
            Returns the combination (XOR) of the two hash objects. 
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="P:CodeLink.Instruction.Invoke">
            <summary>
            Returns a reference to the 'invoke' for this instruction
            </summary>
        </member>
        <member name="P:CodeLink.Instruction.HyperdriveFactory">
            <summary>
            Returns a reference to the 'hyperdrive factory' for this instruction. Should be used with caution, and only internally
            </summary>
        </member>
        <member name="P:CodeLink.Instruction.ReadCount">
            <summary>
            Returns the number of items that are 'read' from the code segment when this instruction is invoked
            </summary>
        </member>
        <member name="P:CodeLink.Instruction.ReadList">
            <summary>
            Returns a list of items that are 'read' from the code segment when this instruction is invoked
            </summary>
        </member>
        <member name="P:CodeLink.Instruction.PopCount">
            <summary>
            Returns the number of items that are 'popped' from the data stack when this instruction is invoked
            </summary>
        </member>
        <member name="P:CodeLink.Instruction.PopList">
            <summary>
            Returns a list of items that are 'popped' from the data stack when this instruction is invoked
            </summary>
        </member>
        <member name="P:CodeLink.Instruction.ReturnValue">
            <summary>
            Returns a reference to the return type and unit that is pushed onto the stack by this instruction (if any)
            </summary>
        </member>
        <member name="P:CodeLink.Instruction.ReturnType">
            <summary>
            Returns a reference to the type (not including unit) that is pushed onto the stack by this instruction (if any)
            </summary>
        </member>
        <member name="P:CodeLink.Instruction.ReturnTypeValid">
            <summary>
            Returns 'true' if this instruction has a set return type
            </summary>
        </member>
        <member name="P:CodeLink.Instruction.ReturnTypeNotVoid">
            <summary>
            Returns 'true' if this instruction pushes anything on the stack when complete
            </summary>
        </member>
        <member name="P:CodeLink.Instruction.ReturnUnitToken">
            <summary>
            Returns a reference to the return unit (as a <see cref="T:CodeLink.Token"/>) that represents the scaling of the return value. Typically, this will be 'null'
            </summary>
        </member>
        <member name="P:CodeLink.Instruction.ReturnUnitTokenValid">
            <summary>
            Returns 'true' if the return unit token contains actual content
            </summary>
        </member>
        <member name="T:CodeLink.InvokeInstruction">
            <summary>
            A delegate which is used to actually invoke <see cref="T:CodeLink.Instruction"/> objects
            </summary>
            <param name="instance">A reference to the <see cref="T:CodeLink.RunInstance"/> which is calling the <see cref="T:CodeLink.Instruction"/></param>
        </member>
        <member name="T:CodeLink.HyperdriveFactoryFunction">
            <summary>
            Used internally to allow for more nuanced hyperdrive invoke functions; Should only be applied to the heavily used instructions within "native" instruction sets
            </summary>
            <param name="hdBuilder"></param>
            <returns></returns>
        </member>
        <member name="T:CodeLink.OInstructionStyle">
            <summary>
            Specifies the exact type of instruction
            </summary>
        </member>
        <member name="F:CodeLink.OInstructionStyle.Core">
            <summary>
            Only used internally for core operations (push, pop, jump, etc)
            </summary>
        </member>
        <member name="F:CodeLink.OInstructionStyle.Constant">
            <summary>
            A <see cref="T:CodeLink.CompilerInternals.InstructionConst"/>
            </summary>
        </member>
        <member name="F:CodeLink.OInstructionStyle.Convert">
            <summary>
            A <see cref="T:CodeLink.CompilerInternals.InstructionConvert"/> 
            </summary>
        </member>
        <member name="F:CodeLink.OInstructionStyle.Cast">
            <summary>
            A <see cref="T:CodeLink.CompilerInternals.InstructionCast"/>
            </summary>
        </member>
        <member name="F:CodeLink.OInstructionStyle.Operator">
            <summary>
            A <see cref="T:CodeLink.CompilerInternals.InstructionOp"/>
            </summary>
        </member>
        <member name="F:CodeLink.OInstructionStyle.Function">
            <summary>
            A <see cref="T:CodeLink.CompilerInternals.InstructionFunction"/>
            </summary>
        </member>
        <member name="F:CodeLink.OInstructionStyle.Getter">
            <summary>
            A <see cref="T:CodeLink.CompilerInternals.InstructionGetter"/>
            </summary>
        </member>
        <member name="F:CodeLink.OInstructionStyle.Setter">
            <summary>
            A <see cref="T:CodeLink.CompilerInternals.InstructionSetter"/>
            </summary>
        </member>
        <member name="T:CodeLink.IStackValue">
            <summary>
            Represents a value on the stack with an <see cref="T:CodeLink.OType"/> and, possibly, a unit token.
            </summary>
        </member>
        <member name="M:CodeLink.IStackValue.#ctor(CodeLink.OType)">
            <summary>
            Instantiates a new stackValue based on an <see cref="T:CodeLink.OType"/>
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:CodeLink.IStackValue.#ctor(CodeLink.OType,CodeLink.Token)">
            <summary>
            Instantiates a new stackValue based on an <see cref="T:CodeLink.OType"/> and a unit <see cref="T:CodeLink.Token"/>
            </summary>
            <param name="type"></param>
            <param name="unit"></param>
        </member>
        <member name="P:CodeLink.IStackValue.Type">
            <summary>
            Returns the <see cref="T:CodeLink.OType"/> associated with this <see cref="T:CodeLink.IStackValue"/>
            </summary>
        </member>
        <member name="P:CodeLink.IStackValue.UnitToken">
            <summary>
            Returns the <see cref="P:CodeLink.IStackValue.UnitToken"/> associated with this <see cref="T:CodeLink.IStackValue"/>
            </summary>
        </member>
        <member name="T:CodeLink.IParam">
            <summary>
            Represents a single parameter to an <see cref="T:CodeLink.Instruction"/> with an <see cref="T:CodeLink.OType"/>, <see cref="T:CodeLink.CompilerInternals.EParameterDirection"/>, and, possibly, a unit token and/or optional value.
            </summary>
        </member>
        <member name="M:CodeLink.IParam.#ctor(System.String,CodeLink.OType,CodeLink.CompilerInternals.EParameterDirection)">
            <summary>
            Instantiates a new <see cref="T:CodeLink.IParam"/>
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="direction"></param>
        </member>
        <member name="M:CodeLink.IParam.#ctor(System.String,CodeLink.OType,System.Byte[])">
            <summary>
            Instantiates a new <see cref="T:CodeLink.IParam"/>
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="optionalValue"></param>
        </member>
        <member name="M:CodeLink.IParam.#ctor(System.String,CodeLink.OType,CodeLink.Token,CodeLink.CompilerInternals.EParameterDirection)">
            <summary>
            Instantiates a new <see cref="T:CodeLink.IParam"/>
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="unit"></param>
            <param name="direction"></param>
        </member>
        <member name="M:CodeLink.IParam.#ctor(System.String,CodeLink.OType,CodeLink.Token,System.Byte[])">
            <summary>
            Instantiates a new <see cref="T:CodeLink.IParam"/>
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="unit"></param>
            <param name="optionalValue"></param>
        </member>
        <member name="P:CodeLink.IParam.Name">
            <summary>
            Returns the name of this <see cref="T:CodeLink.IParam"/>
            </summary>
        </member>
        <member name="P:CodeLink.IParam.OptionalValue">
            <summary>
            Returns the optional value of this <see cref="T:CodeLink.IParam"/>
            </summary>
        </member>
        <member name="P:CodeLink.IParam.Direction">
            <summary>
            Returns the <see cref="T:CodeLink.CompilerInternals.EParameterDirection"/> of this <see cref="T:CodeLink.IParam"/>
            </summary>
        </member>
        <member name="T:CodeLink.InstructionSet">
            <summary>
            <para>Intended to be subclassed for each instruciton set which is introduced into the framework</para>
            <para>InstructionSets go through stages in life...</para>
            <para>Stage 1 - Initialization: Set 'Namespace' property and add 'TypeAttempt'/'Require' calls</para>
            <para>Stage 2 - Type Creation: TypeAttempt calls are invoked, returning 'true' if they are successful</para>
            <para>Stage 3 - Instruction Creation: Now that types are all in, instructions are created returning a non-empty string if they encounter an error</para>
            <para>Stage 4 - Instruction Linking: Now that instructions are created, they can be linked to the appropriate types as required</para>
            <para>Stage 5 - Preparation: Now is the time for loading external files, etc (any other initialization that is required)</para>
            <para>Stage 6 - Ready: Instruction set is 'active'. Note that any instruction callback must be thread-safe!</para>
            <para>Stage 7 - Terminating: Instruction set should gracefully shut itself down</para>
            <para>Stage 8 - Complete: Instruction set has been terminated successfully</para>
            </summary>
        </member>
        <member name="P:CodeLink.InstructionSet.Namespace">
            <summary>
            Get/set the 'namespace' where <see cref="T:CodeLink.Instruction"/> objects are available to user-code. This can only be called during the <see cref="M:CodeLink.InstructionSet.Initialize"/> call
            </summary>
        </member>
        <member name="M:CodeLink.InstructionSet.NameKey(System.String)">
            <summary>
            If the passed in string not a valid name, returns null. Otherwise, returns a 'toLower' version of the name
            </summary>
            <param name="iSetName"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.NameIsValid(System.String)">
            <summary>
            Returns 'true' if the given string could be a valid iSet name
            </summary>
            <param name="iSetName"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.TypeAdd(CodeLink.OTypeObject)">
            <summary>
            Adds an instance of <see cref="T:CodeLink.OTypeObject"/> to the <see cref="T:CodeLink.InstructionSet"/>.
            </summary>
            <param name="oTypeSystemObject">The particular .NET system object to add</param>
            <returns><c>True</c> if all dependent <see cref="T:CodeLink.OType"/>s have been resolved and the addition succees. <c>False</c> otherwise</returns>
            <exception cref="T:System.InvalidOperationException">The method is called when the <see cref="T:CodeLink.InstructionSet"/> is not in <see cref="F:CodeLink.InstructionSetState.CreatingType"/></exception>
            <exception cref="T:System.InvalidOperationException">An <see cref="T:CodeLink.OType"/> with the same name has already been added to another loaded <see cref="T:CodeLink.InstructionSet"/></exception>
        </member>
        <member name="M:CodeLink.InstructionSet.TypeAdd(CodeLink.OTypeStructure)">
            <summary>
            Adds an instance of <see cref="T:CodeLink.OTypeStructure"/> to the <see cref="T:CodeLink.InstructionSet"/>.
            </summary>
            <param name="oTypeStructure">The structure to add</param>
            <returns><c>True</c> if all dependent <see cref="T:CodeLink.OType"/>s have been resolved and the addition succeeds. <c>False</c> otherwise</returns>
            <exception cref="T:System.InvalidOperationException">The method is called when the <see cref="T:CodeLink.InstructionSet"/> is not in <see cref="F:CodeLink.InstructionSetState.CreatingType"/></exception>
            <exception cref="T:System.InvalidOperationException">An <see cref="T:CodeLink.OType"/> with the same name has already been added to another loaded <see cref="T:CodeLink.InstructionSet"/></exception>
        </member>
        <member name="M:CodeLink.InstructionSet.TypeAdd(CodeLink.OType,System.Nullable{System.Int32})">
            <summary>
            Adds an instance of <see cref="T:CodeLink.OType"/> to the <see cref="T:CodeLink.InstructionSet"/>.
            </summary>
            <param name="type">The type to add</param>
            <param name="typeID">An optional TypeID to assign to the <see cref="T:CodeLink.OType"/>. If <c>null</c>, one will be automatically assigned.</param>
            <returns><c>True</c> if all dependent <see cref="T:CodeLink.OType"/>s have been resolved and the addition succeeds. <c>False</c> otherwise</returns>
            <exception cref="T:System.InvalidOperationException">The method is called when the <see cref="T:CodeLink.InstructionSet"/> is not in <see cref="F:CodeLink.InstructionSetState.CreatingType"/></exception>
            <exception cref="T:System.InvalidOperationException">An <see cref="T:CodeLink.OType"/> with the same <see cref="!:OType.FullName"/> has already been added by an <see cref="T:CodeLink.InstructionSet"/></exception>
        </member>
        <member name="M:CodeLink.InstructionSet.InstructionsCreate">
            <summary>
            Pay attention to Min/Max version here!!
            </summary>
            <returns>Any non-empty string indicates that the create process did not go so well...</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.Initialize">
            <summary>
            Method that must be overridden to run in Stage 1 (<see cref="F:CodeLink.InstructionSetState.Initializing"/>) of the <see cref="T:CodeLink.InstructionSet" /> lifecycle.
            </summary>
            <remarks>
            <list type="bullet">
            <listheader>
            <description>Required Steps</description>
            </listheader>
            <item><description>Set <see cref="P:CodeLink.InstructionSet.Namespace"/> to the desired namespace</description></item>
            </list>
            <list type="bullet">
            <listheader>
            <description>Optional Steps</description>
            </listheader>
            <item><description>Call <see cref="!:Require(string, int, int)"/> for every other required <see cref="T:CodeLink.InstructionSet" /></description></item>
            <item><description>Call <see cref="!:TypeAttempt(int, string, CreateTypeCall)"/> to define each type (<see cref="T:CodeLink.OTypeStructure"/> or <see cref="T:CodeLink.CompilerInternals.OTypeClass"/>) to be added</description></item>
            </list>
            </remarks>
            <example>
            <code>
            public override void Initialize()
            {
                Namespace = "System";
                Require("System");
                Require("System64");
                TypeAttempt(1, "MyType", myCreateTypeCall); 
            }
            </code>
            </example>
            <seealso cref="M:CodeLink.InstructionSet.InstructionsCreate"/>
            <seealso cref="M:CodeLink.InstructionSet.InstructionsLink"/>
            <seealso cref="M:CodeLink.InstructionSet.Prepare(CodeLink.RunInstance)"/>
        </member>
        <member name="M:CodeLink.InstructionSet.InstructionAdd_LogicalNot(System.UInt16,System.Int32,CodeLink.InvokeInstruction,CodeLink.OType,System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:CodeLink.CompilerInternals.InstructionUnaryOp"/> which is attached to the "!" (logical not) operator
            </summary>
            <param name="instructionID"></param>
            <param name="versionAdded"></param>
            <param name="invoke"></param>
            <param name="inputType"></param>
            <param name="canGenerateConst"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.InstructionAdd_BitwiseNot(System.UInt16,System.Int32,CodeLink.InvokeInstruction,CodeLink.OType,CodeLink.OType,System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:CodeLink.CompilerInternals.InstructionUnaryOp"/> which is attached to the "~" (bitwise not) operator
            </summary>
            <param name="instructionID"></param>
            <param name="versionAdded"></param>
            <param name="invoke"></param>
            <param name="inputType"></param>
            <param name="returnType"></param>
            <param name="canGenerateConst"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.InstructionAdd_Dereference(System.UInt16,System.Int32,CodeLink.InvokeInstruction,CodeLink.OType,CodeLink.OType)">
            <summary>
            Instantiates a new <see cref="T:CodeLink.CompilerInternals.InstructionUnaryOp"/> which is attached to the "^" (dereference) operator
            </summary>
            <param name="instructionID"></param>
            <param name="versionAdded"></param>
            <param name="invoke"></param>
            <param name="inputType"></param>
            <param name="returnType"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.InstructionAdd_Multiply(System.UInt16,System.Int32,CodeLink.InvokeInstruction,CodeLink.OType,CodeLink.OType,CodeLink.OType,System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:CodeLink.CompilerInternals.InstructionBinaryOp"/> which is attached to the "*" (multiply) operator
            </summary>
            <param name="instructionID"></param>
            <param name="versionAdded"></param>
            <param name="invoke"></param>
            <param name="leftType"></param>
            <param name="rightType"></param>
            <param name="returnType"></param>
            <param name="canGenerateConst"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.InstructionAdd_Divide(System.UInt16,System.Int32,CodeLink.InvokeInstruction,CodeLink.OType,CodeLink.OType,CodeLink.OType,System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:CodeLink.CompilerInternals.InstructionBinaryOp"/> which is attached to the "/" (divide) operator
            </summary>
            <param name="instructionID"></param>
            <param name="versionAdded"></param>
            <param name="invoke"></param>
            <param name="leftType"></param>
            <param name="rightType"></param>
            <param name="returnType"></param>
            <param name="canGenerateConst"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.InstructionAdd_Modulus(System.UInt16,System.Int32,CodeLink.InvokeInstruction,CodeLink.OType,CodeLink.OType,CodeLink.OType,System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:CodeLink.CompilerInternals.InstructionBinaryOp"/> which is attached to the "%" (modulus) operator
            </summary>
            <param name="instructionID"></param>
            <param name="versionAdded"></param>
            <param name="invoke"></param>
            <param name="leftType"></param>
            <param name="rightType"></param>
            <param name="returnType"></param>
            <param name="canGenerateConst"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.InstructionAdd_Add(System.UInt16,System.Int32,CodeLink.InvokeInstruction,CodeLink.OType,CodeLink.OType,CodeLink.OType,System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:CodeLink.CompilerInternals.InstructionBinaryOp"/> which is attached to the "+" (add) operator
            </summary>
            <param name="instructionID"></param>
            <param name="versionAdded"></param>
            <param name="invoke"></param>
            <param name="leftType"></param>
            <param name="rightType"></param>
            <param name="returnType"></param>
            <param name="canGenerateConst"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.InstructionAdd_Subtract(System.UInt16,System.Int32,CodeLink.InvokeInstruction,CodeLink.OType,CodeLink.OType,CodeLink.OType,System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:CodeLink.CompilerInternals.InstructionBinaryOp"/> which is attached to the "-" (subtract) operator
            </summary>
            <param name="instructionID"></param>
            <param name="versionAdded"></param>
            <param name="invoke"></param>
            <param name="leftType"></param>
            <param name="rightType"></param>
            <param name="returnType"></param>
            <param name="canGenerateConst"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.InstructionAdd_ShiftLeft(System.UInt16,System.Int32,CodeLink.InvokeInstruction,CodeLink.OType,CodeLink.OType,CodeLink.OType,System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:CodeLink.CompilerInternals.InstructionBinaryOp"/> which is attached to the "&lt;&lt;" (shift-left) operator
            </summary>
            <param name="instructionID"></param>
            <param name="versionAdded"></param>
            <param name="invoke"></param>
            <param name="leftType"></param>
            <param name="rightType"></param>
            <param name="returnType"></param>
            <param name="canGenerateConst"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.InstructionAdd_ShiftRight(System.UInt16,System.Int32,CodeLink.InvokeInstruction,CodeLink.OType,CodeLink.OType,CodeLink.OType,System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:CodeLink.CompilerInternals.InstructionBinaryOp"/> which is attached to the "&gt;&gt;" (shift-right) operator
            </summary>
            <param name="instructionID"></param>
            <param name="versionAdded"></param>
            <param name="invoke"></param>
            <param name="leftType"></param>
            <param name="rightType"></param>
            <param name="returnType"></param>
            <param name="canGenerateConst"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.InstructionAdd_IsLessThan(System.UInt16,System.Int32,CodeLink.InvokeInstruction,CodeLink.OType,CodeLink.OType,System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:CodeLink.CompilerInternals.InstructionBinaryOp"/> which is attached to the "&lt;" (less-than) operator
            </summary>
            <param name="instructionID"></param>
            <param name="versionAdded"></param>
            <param name="invoke"></param>
            <param name="leftType"></param>
            <param name="rightType"></param>
            <param name="canGenerateConst"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.InstructionAdd_IsLessThanOrEqual(System.UInt16,System.Int32,CodeLink.InvokeInstruction,CodeLink.OType,CodeLink.OType,System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:CodeLink.CompilerInternals.InstructionBinaryOp"/> which is attached to the "&lt;=" (less-than-or-equal) operator
            </summary>
            <param name="instructionID"></param>
            <param name="versionAdded"></param>
            <param name="invoke"></param>
            <param name="leftType"></param>
            <param name="rightType"></param>
            <param name="canGenerateConst"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.InstructionAdd_IsGreaterThan(System.UInt16,System.Int32,CodeLink.InvokeInstruction,CodeLink.OType,CodeLink.OType,System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:CodeLink.CompilerInternals.InstructionBinaryOp"/> which is attached to the "&gt;" (greater-than) operator
            </summary>
            <param name="instructionID"></param>
            <param name="versionAdded"></param>
            <param name="invoke"></param>
            <param name="leftType"></param>
            <param name="rightType"></param>
            <param name="canGenerateConst"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.InstructionAdd_IsGreaterThanOrEqual(System.UInt16,System.Int32,CodeLink.InvokeInstruction,CodeLink.OType,CodeLink.OType,System.Boolean)">
            <summary>
            
            Instantiates a new <see cref="T:CodeLink.CompilerInternals.InstructionBinaryOp"/> which is attached to the "&gt;=" (greater-than-or-equal) operator
            </summary>
            <param name="instructionID"></param>
            <param name="versionAdded"></param>
            <param name="invoke"></param>
            <param name="leftType"></param>
            <param name="rightType"></param>
            <param name="canGenerateConst"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.InstructionAdd_IsEqual(System.UInt16,System.Int32,CodeLink.InvokeInstruction,CodeLink.OType,CodeLink.OType,System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:CodeLink.CompilerInternals.InstructionBinaryOp"/> which is attached to the "==" (is-equal) operator
            </summary>
            <param name="instructionID"></param>
            <param name="versionAdded"></param>
            <param name="invoke"></param>
            <param name="leftType"></param>
            <param name="rightType"></param>
            <param name="canGenerateConst"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.InstructionAdd_IsNotEqual(System.UInt16,System.Int32,CodeLink.InvokeInstruction,CodeLink.OType,CodeLink.OType,System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:CodeLink.CompilerInternals.InstructionBinaryOp"/> which is attached to the "!=" (is-not-equal) operator
            </summary>
            <param name="instructionID"></param>
            <param name="versionAdded"></param>
            <param name="invoke"></param>
            <param name="leftType"></param>
            <param name="rightType"></param>
            <param name="canGenerateConst"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.InstructionAdd_BitwiseAnd(System.UInt16,System.Int32,CodeLink.InvokeInstruction,CodeLink.OType,CodeLink.OType,CodeLink.OType,System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:CodeLink.CompilerInternals.InstructionBinaryOp"/> which is attached to the "&amp;" (bitwise-and) operator
            </summary>
            <param name="instructionID"></param>
            <param name="versionAdded"></param>
            <param name="invoke"></param>
            <param name="leftType"></param>
            <param name="rightType"></param>
            <param name="returnType"></param>
            <param name="canGenerateConst"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.InstructionAdd_BitwiseXor(System.UInt16,System.Int32,CodeLink.InvokeInstruction,CodeLink.OType,CodeLink.OType,CodeLink.OType,System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:CodeLink.CompilerInternals.InstructionBinaryOp"/> which is attached to the bitwise-xor operator
            </summary>
            <param name="instructionID"></param>
            <param name="versionAdded"></param>
            <param name="invoke"></param>
            <param name="leftType"></param>
            <param name="rightType"></param>
            <param name="returnType"></param>
            <param name="canGenerateConst"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.InstructionAdd_BitwiseOr(System.UInt16,System.Int32,CodeLink.InvokeInstruction,CodeLink.OType,CodeLink.OType,CodeLink.OType,System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:CodeLink.CompilerInternals.InstructionBinaryOp"/> which is attached to the "|" (bitwise-or) operator
            </summary>
            <param name="instructionID"></param>
            <param name="versionAdded"></param>
            <param name="invoke"></param>
            <param name="leftType"></param>
            <param name="rightType"></param>
            <param name="returnType"></param>
            <param name="canGenerateConst"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.InstructionAdd_LogicalAnd(System.UInt16,System.Int32,CodeLink.InvokeInstruction,CodeLink.OType,CodeLink.OType,CodeLink.OType,System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:CodeLink.CompilerInternals.InstructionBinaryOp"/> which is attached to the "&amp;&amp;" (logical-and) operator
            </summary>
            <param name="instructionID"></param>
            <param name="versionAdded"></param>
            <param name="invoke"></param>
            <param name="leftType"></param>
            <param name="rightType"></param>
            <param name="returnType"></param>
            <param name="canGenerateConst"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.InstructionAdd_LogicalOr(System.UInt16,System.Int32,CodeLink.InvokeInstruction,CodeLink.OType,CodeLink.OType,CodeLink.OType,System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:CodeLink.CompilerInternals.InstructionBinaryOp"/> which is attached to the "||" (logical-or) operator
            </summary>
            <param name="instructionID"></param>
            <param name="versionAdded"></param>
            <param name="invoke"></param>
            <param name="leftType"></param>
            <param name="rightType"></param>
            <param name="returnType"></param>
            <param name="canGenerateConst"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.InstructionAdd_LogicalXor(System.UInt16,System.Int32,CodeLink.InvokeInstruction,CodeLink.OType,CodeLink.OType,CodeLink.OType,System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:CodeLink.CompilerInternals.InstructionBinaryOp"/> which is attached to the "^" (logical-xor) operator
            </summary>
            <param name="instructionID"></param>
            <param name="versionAdded"></param>
            <param name="invoke"></param>
            <param name="leftType"></param>
            <param name="rightType"></param>
            <param name="returnType"></param>
            <param name="canGenerateConst"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.InstructionAdd_Convert(System.UInt16,System.Int32,CodeLink.InvokeInstruction,CodeLink.OType,CodeLink.OType,System.Boolean,System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:CodeLink.CompilerInternals.InstructionConvert"/> which is used to convert from one <see cref="T:CodeLink.OType"/> to another <see cref="T:CodeLink.OType"/>
            </summary>
            <param name="instructionID"></param>
            <param name="versionAdded"></param>
            <param name="invoke"></param>
            <param name="inputType"></param>
            <param name="outputType"></param>
            <param name="canGenerateConst"></param>
            <param name="isImplicit"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.InstructionAdd_Function(System.UInt16,System.Int32,System.String,CodeLink.InvokeInstruction,CodeLink.IStackValue,CodeLink.IParam[])">
            <summary>
            Instantiates a new <see cref="T:CodeLink.CompilerInternals.InstructionFunction"/>, which can take any number of <see cref="T:CodeLink.IParam"/> (parameters), and may return a <see cref="T:CodeLink.IStackValue"/>
            </summary>
            <param name="instructionID"></param>
            <param name="versionAdded"></param>
            <param name="name"></param>
            <param name="invoke"></param>
            <param name="returnVal"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.InstructionAdd_Getter(System.UInt16,System.Int32,System.String,CodeLink.InvokeInstruction,CodeLink.IStackValue)">
            <summary>
            Instantiates a new <see cref="T:CodeLink.CompilerInternals.InstructionGetter"/>, which is used in user-code like getting a variable
            </summary>
            <param name="instructionID"></param>
            <param name="versionAdded"></param>
            <param name="name"></param>
            <param name="invoke"></param>
            <param name="returnVal"></param>
            <param name="thisType"></param>
            <param name="thisByReference"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.InstructionAdd_Setter(System.UInt16,System.Int32,System.String,CodeLink.InvokeInstruction,CodeLink.OType)">
            <summary>
            Instantiates a new <see cref="T:CodeLink.CompilerInternals.InstructionSetter"/>, which is used in user-code like setting a variable
            </summary>
            <param name="instructionID"></param>
            <param name="versionAdded"></param>
            <param name="name"></param>
            <param name="invoke"></param>
            <param name="valueParam"></param>
            <param name="thisType"></param>
            <param name="thisByReference"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.InstructionAdd_ConstantFunction(System.UInt16,System.Int32,System.String,CodeLink.InvokeInstruction,CodeLink.IStackValue,CodeLink.IParam[])">
            <summary>
            Instantiates a new <see cref="T:CodeLink.CompilerInternals.InstructionConst"/>, which can be resolved at compile-time, and directly injected into the code segment of a <see cref="T:CodeLink.RunInstance"/>
            </summary>
            <param name="instructionID"></param>
            <param name="versionAdded"></param>
            <param name="name"></param>
            <param name="invoke"></param>
            <param name="returnVal"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ParamBoolean(System.String,CodeLink.CompilerInternals.EParameterDirection)">
            <summary>
            Creates a Boolean type <see cref="T:CodeLink.IParam"/>, with the option to specify <see cref="T:CodeLink.CompilerInternals.EParameterDirection"/>.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="direction">The direction of the parameter</param>
            <returns>An <see cref="T:CodeLink.IParam"/> for a Boolean</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ParamBoolean(System.String,System.Boolean)">
            <summary>
            Creates an optional Boolean type <see cref="T:CodeLink.IParam"/> with a default value.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="optionalValue">The default value for the parameter if it is not passed to the function</param>
            <returns>An <see cref="T:CodeLink.IParam"/> for a Boolean</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ParamInt8(System.String,CodeLink.CompilerInternals.EParameterDirection)">
            <summary>
            Creates an Int8 type <see cref="T:CodeLink.IParam"/>, with the option to specify <see cref="T:CodeLink.CompilerInternals.EParameterDirection"/>.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="direction">The direction of the parameter</param>
            <returns>An <see cref="T:CodeLink.IParam"/> for an Int8</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ParamInt8(System.String,System.SByte)">
            <summary>
            Creates an optional Int8 type <see cref="T:CodeLink.IParam"/> with a default value.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="optionalValue">The default value for the parameter if it is not passed to the function</param>
            <returns>An <see cref="T:CodeLink.IParam"/> for an Int8</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ParamInt16(System.String,CodeLink.CompilerInternals.EParameterDirection)">
            <summary>
            Creates an Int16 type <see cref="T:CodeLink.IParam"/>, with the option to specify <see cref="T:CodeLink.CompilerInternals.EParameterDirection"/>.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="direction">The direction of the parameter</param>
            <returns>An <see cref="T:CodeLink.IParam"/> for an Int16</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ParamInt16(System.String,System.Int16)">
            <summary>
            Creates an optional Int16 type <see cref="T:CodeLink.IParam"/> with a default value.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="optionalValue">The default value for the parameter if it is not passed to the function</param>
            <returns>An <see cref="T:CodeLink.IParam"/> for an Int16</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ParamInt32(System.String,CodeLink.CompilerInternals.EParameterDirection)">
            <summary>
            Creates an Int32 type <see cref="T:CodeLink.IParam"/>, with the option to specify <see cref="T:CodeLink.CompilerInternals.EParameterDirection"/>.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="direction">The direction of the parameter</param>
            <returns>An <see cref="T:CodeLink.IParam"/> for an Int32</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ParamInt32(System.String,System.Int32)">
            <summary>
            Creates an optional Int32 type <see cref="T:CodeLink.IParam"/> with a default value.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="optionalValue">The default value for the parameter if it is not passed to the function</param>
            <returns>An <see cref="T:CodeLink.IParam"/> for an Int32</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ParamUInt8(System.String,CodeLink.CompilerInternals.EParameterDirection)">
            <summary>
            Creates a UInt8 type <see cref="T:CodeLink.IParam"/>, with the option to specify <see cref="T:CodeLink.CompilerInternals.EParameterDirection"/>.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="direction">The direction of the parameter</param>
            <returns>An <see cref="T:CodeLink.IParam"/> for a UInt8</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ParamUInt8(System.String,System.Byte)">
            <summary>
            Creates an optional UInt8 type <see cref="T:CodeLink.IParam"/> with a default value.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="optionalValue">The default value for the parameter if it is not passed to the function</param>
            <returns>An <see cref="T:CodeLink.IParam"/> for a UInt8</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ParamUInt16(System.String,CodeLink.CompilerInternals.EParameterDirection)">
            <summary>
            Creates a UInt16 type <see cref="T:CodeLink.IParam"/>, with the option to specify <see cref="T:CodeLink.CompilerInternals.EParameterDirection"/>.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="direction">The direction of the parameter</param>
            <returns>An <see cref="T:CodeLink.IParam"/> for a UInt16</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ParamUInt16(System.String,System.UInt16)">
            <summary>
            Creates an optional UInt16 type <see cref="T:CodeLink.IParam"/> with a default value.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="optionalValue">The default value for the parameter if it is not passed to the function</param>
            <returns>An <see cref="T:CodeLink.IParam"/> for a UInt16</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ParamUInt32(System.String,CodeLink.CompilerInternals.EParameterDirection)">
            <summary>
            Creates a UInt32 type <see cref="T:CodeLink.IParam"/>, with the option to specify <see cref="T:CodeLink.CompilerInternals.EParameterDirection"/>.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="direction">The direction of the parameter</param>
            <returns>An <see cref="T:CodeLink.IParam"/> for a UInt32</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ParamUInt32(System.String,System.UInt32)">
            <summary>
            Creates an optional UInt32 type <see cref="T:CodeLink.IParam"/> with a default value.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="optionalValue">The default value for the parameter if it is not passed to the function</param>
            <returns>An <see cref="T:CodeLink.IParam"/> for a UInt32</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ParamSingle(System.String,CodeLink.CompilerInternals.EParameterDirection)">
            <summary>
            Creates a Single type <see cref="T:CodeLink.IParam"/>, with the option to specify <see cref="T:CodeLink.CompilerInternals.EParameterDirection"/>.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="direction">The direction of the parameter</param>
            <returns>An <see cref="T:CodeLink.IParam"/> for a Single</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ParamSingle(System.String,System.Single)">
            <summary>
            Creates an optional Single type <see cref="T:CodeLink.IParam"/> with a default value.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="optionalValue">The default value for the parameter if it is not passed to the function</param>
            <returns>An <see cref="T:CodeLink.IParam"/> for a Single</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ParamSingle(System.String,System.String,CodeLink.CompilerInternals.EParameterDirection)">
            <summary>
            Creates a Single type <see cref="T:CodeLink.IParam"/> with a unit and the option to specify <see cref="T:CodeLink.CompilerInternals.EParameterDirection"/>.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="unit">A <see cref="T:CodeLink.Token"/> for the unit of the parameter</param>
            <param name="direction">The direction of the parameter</param>
            <returns>An <see cref="T:CodeLink.IParam"/> for a Single</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ParamSingle(System.String,System.String,System.Single)">
            <summary>
            Creates an optional Single type <see cref="T:CodeLink.IParam"/> with a unit and a default value.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="unit">A <see cref="T:CodeLink.Token"/> for the unit of the parameter</param>
            <param name="optionalValue">The default value for the parameter if it is not passed to the function</param>
            <returns>An <see cref="T:CodeLink.IParam"/> for a Single</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ParamInt64(System.String,CodeLink.CompilerInternals.EParameterDirection)">
            <summary>
            Creates an Int64 type <see cref="T:CodeLink.IParam"/>, with the option to specify <see cref="T:CodeLink.CompilerInternals.EParameterDirection"/>.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="direction">The direction of the parameter</param>
            <returns>An <see cref="T:CodeLink.IParam"/> for an Int64</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ParamInt64(System.String,System.Int64)">
            <summary>
            Creates an optional Int64 type <see cref="T:CodeLink.IParam"/> with a default value.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="optionalValue">The default value for the parameter if it is not passed to the function</param>
            <returns>An <see cref="T:CodeLink.IParam"/> for an Int64</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ParamUInt64(System.String,CodeLink.CompilerInternals.EParameterDirection)">
            <summary>
            Creates a UInt64 type <see cref="T:CodeLink.IParam"/>, with the option to specify <see cref="T:CodeLink.CompilerInternals.EParameterDirection"/>.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="direction">The direction of the parameter</param>
            <returns>An <see cref="T:CodeLink.IParam"/> for a UInt64</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ParamUInt64(System.String,System.UInt64)">
            <summary>
            Creates an optional UInt64 type <see cref="T:CodeLink.IParam"/> with a default value.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="optionalValue">The default value for the parameter if it is not passed to the function</param>
            <returns>An <see cref="T:CodeLink.IParam"/> for a UInt64</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ParamDouble(System.String,CodeLink.CompilerInternals.EParameterDirection)">
            <summary>
            Creates a Double type <see cref="T:CodeLink.IParam"/>, with the option to specify <see cref="T:CodeLink.CompilerInternals.EParameterDirection"/>.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="direction">The direction of the parameter</param>
            <returns>An <see cref="T:CodeLink.IParam"/> for a Double</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ParamDouble(System.String,System.Double)">
            <summary>
            Creates an optional Double type <see cref="T:CodeLink.IParam"/> with a default value.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="optionalValue">The default value for the parameter if it is not passed to the function</param>
            <returns>An <see cref="T:CodeLink.IParam"/> for a Double</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ParamDouble(System.String,System.String,CodeLink.CompilerInternals.EParameterDirection)">
            <summary>
            Creates a Double type <see cref="T:CodeLink.IParam"/> with a unit and the option to specify <see cref="T:CodeLink.CompilerInternals.EParameterDirection"/>.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="unit">A <see cref="T:CodeLink.Token"/> for the unit of the parameter</param>
            <param name="direction">The direction of the parameter</param>
            <returns>An <see cref="T:CodeLink.IParam"/> for a Double</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ParamDouble(System.String,System.String,System.Double)">
            <summary>
            Creates an optional Double type <see cref="T:CodeLink.IParam"/> with a unit and a default value.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="unit">A string for the unit of the parameter</param>
            <param name="optionalValue">The default value for the parameter if it is not passed to the function</param>
            <returns>An <see cref="T:CodeLink.IParam"/> for a Double</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ParamShortstring(System.String,CodeLink.CompilerInternals.EParameterDirection)">
            <summary>
            Creates a Shortstring type <see cref="T:CodeLink.IParam"/>, with the option to specify <see cref="T:CodeLink.CompilerInternals.EParameterDirection"/>.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="direction">The direction of the parameter</param>
            <returns>An <see cref="T:CodeLink.IParam"/> for a Shortstring</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ParamShortstring(System.String,System.String)">
            <summary>
            Creates an optional Shortstring type <see cref="T:CodeLink.IParam"/> with a default value.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="optionalValue">The default value for the parameter if it is not passed to the function</param>
            <returns>An <see cref="T:CodeLink.IParam"/> for a Shortstring</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ParamString(System.String,CodeLink.CompilerInternals.EParameterDirection)">
            <summary>
            Creates an <see cref="T:CodeLink.IParam"/> for the String type
            </summary>
            <param name="name"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ParamStructure(System.String,CodeLink.OTypeStructure,CodeLink.CompilerInternals.EParameterDirection)">
            <summary>
            Creates an <see cref="T:CodeLink.IParam"/> for a custom <see cref="T:CodeLink.OTypeStructure"/>, with the option to specify <see cref="T:CodeLink.CompilerInternals.EParameterDirection"/>.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="structType">The <see cref="T:CodeLink.OTypeStructure"/> being used for the parameter</param>
            <param name="direction">The direction of the parameter</param>
            <returns>An <see cref="T:CodeLink.IParam"/> for the specified <see cref="T:CodeLink.OTypeStructure"/></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ParamStructure(System.String,CodeLink.OTypeStructure,System.Byte[])">
            <summary>
            Creates an optional <see cref="T:CodeLink.IParam"/> for a custom <see cref="T:CodeLink.OTypeStructure"/> with a default value.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="structType">The <see cref="T:CodeLink.OTypeStructure"/> being used for the parameter</param>
            <param name="optionalValue">The default value for the parameter if it is not passed to the function</param>
            <returns>An <see cref="T:CodeLink.IParam"/> for the specified <see cref="T:CodeLink.OTypeStructure"/></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.Param_Class(System.String,CodeLink.CompilerInternals.OTypeClass)">
            <summary>
            Creates an <see cref="T:CodeLink.IParam"/> for a custom <see cref="T:CodeLink.CompilerInternals.OTypeClass"/>.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="classType">The <see cref="T:CodeLink.CompilerInternals.OTypeClass"/> being used for the parameter</param>
            <returns>An <see cref="T:CodeLink.IParam"/> for the specified <see cref="T:CodeLink.CompilerInternals.OTypeClass"/></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ParamPointer(System.String,CodeLink.OType)">
            <summary>
            Creates a Pointer type <see cref="T:CodeLink.IParam"/> for a specific <see cref="T:CodeLink.OType"/>.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="referencedType">The type of the pointer</param>
            <returns>An <see cref="T:CodeLink.IParam"/> for a pointer to the specified <see cref="T:CodeLink.OType"/></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ParamArray(System.String,CodeLink.OType,System.Int32,CodeLink.CompilerInternals.EParameterDirection)">
            <summary>
            Creates an Array type <see cref="T:CodeLink.IParam"/> for a specific <see cref="T:CodeLink.OType"/> and static count, with the option to specify <see cref="T:CodeLink.CompilerInternals.EParameterDirection"/>.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="containedType">The type contained in the array</param>
            <param name="staticCount">The static count of items in the array</param>
            <param name="direction">The direction of the parameter</param>
            <returns>An <see cref="T:CodeLink.IParam"/> for an array of the specified <see cref="T:CodeLink.OType"/></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ParamObject(System.String,CodeLink.OTypeObject)">
            <summary>
            Creates an <see cref="T:CodeLink.IParam"/> for the an object type
            </summary>
            <param name="name"></param>
            <param name="oTypeSystemObject">The type of the parameter</param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ParamObject(System.String,CodeLink.OTypeObject,System.Boolean)">
            <summary>
            Creates an <see cref="T:CodeLink.IParam"/> for the an object type
            </summary>
            <param name="name"></param>
            <param name="oTypeSystemObject"></param>
            <param name="isOptional">If true, this parameter will have a default value of 'null'</param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ReturnBoolean">
            <summary>
            Creates a Boolean type <see cref="T:CodeLink.IStackValue"/> to describe the return value of an <see cref="T:CodeLink.Instruction"/>.
            </summary>
            <returns>An <see cref="T:CodeLink.IStackValue"/> for a Boolean</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ReturnInt8">
            <summary>
            Creates an Int8 type <see cref="T:CodeLink.IStackValue"/> to describe the return value of an <see cref="T:CodeLink.Instruction"/>.
            </summary>
            <returns>An <see cref="T:CodeLink.IStackValue"/> for an Int8</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ReturnInt16">
            <summary>
            Creates an Int16 type <see cref="T:CodeLink.IStackValue"/> to describe the return value of an <see cref="T:CodeLink.Instruction"/>.
            </summary>
            <returns>An <see cref="T:CodeLink.IStackValue"/> for an Int16</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ReturnInt32">
            <summary>
            Creates an Int32 type <see cref="T:CodeLink.IStackValue"/> to describe the return value of an <see cref="T:CodeLink.Instruction"/>.
            </summary>
            <returns>An <see cref="T:CodeLink.IStackValue"/> for an Int32</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ReturnUInt8">
            <summary>
            Creates a UInt8 type <see cref="T:CodeLink.IStackValue"/> to describe the return value of an <see cref="T:CodeLink.Instruction"/>.
            </summary>
            <returns>An <see cref="T:CodeLink.IStackValue"/> for a UInt8</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ReturnUInt16">
            <summary>
            Creates a UInt16 type <see cref="T:CodeLink.IStackValue"/> to describe the return value of an <see cref="T:CodeLink.Instruction"/>.
            </summary>
            <returns>An <see cref="T:CodeLink.IStackValue"/> for a UInt16</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ReturnUInt32">
            <summary>
            Creates a UInt32 type <see cref="T:CodeLink.IStackValue"/> to describe the return value of an <see cref="T:CodeLink.Instruction"/>.
            </summary>
            <returns>An <see cref="T:CodeLink.IStackValue"/> for a UInt32</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ReturnSingle">
            <summary>
            Creates a Single type <see cref="T:CodeLink.IStackValue"/> to describe the return value of an <see cref="T:CodeLink.Instruction"/>.
            </summary>
            <returns>An <see cref="T:CodeLink.IStackValue"/> for a Single</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ReturnSingle(System.String)">
            <summary>
            Creates a Single type <see cref="T:CodeLink.IStackValue"/> with a unit to describe the return value of an <see cref="T:CodeLink.Instruction"/>.
            </summary>
            <param name="unit">A <see cref="T:CodeLink.Token"/> for the unit of the parameter</param>
            <returns>An <see cref="T:CodeLink.IStackValue"/> for a Single</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ReturnVoid">
            <summary>
            Creates a Void type <see cref="T:CodeLink.IStackValue"/> to describe the return value of an <see cref="T:CodeLink.Instruction"/>.
            </summary>
            <returns>An <see cref="T:CodeLink.IStackValue"/> for Void</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ReturnInt64">
            <summary>
            Creates an Int64 type <see cref="T:CodeLink.IStackValue"/> to describe the return value of an <see cref="T:CodeLink.Instruction"/>.
            </summary>
            <returns>An <see cref="T:CodeLink.IStackValue"/> for an Int64</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ReturnUInt64">
            <summary>
            Creates a UInt64 type <see cref="T:CodeLink.IStackValue"/> to describe the return value of an <see cref="T:CodeLink.Instruction"/>.
            </summary>
            <returns>An <see cref="T:CodeLink.IStackValue"/> for a UInt64</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ReturnDouble">
            <summary>
            Creates a Double type <see cref="T:CodeLink.IStackValue"/> to describe the return value of an <see cref="T:CodeLink.Instruction"/>.
            </summary>
            <returns>An <see cref="T:CodeLink.IStackValue"/> for a Double</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ReturnDouble(System.String)">
            <summary>
            Creates a Double type <see cref="T:CodeLink.IStackValue"/> with a unit to describe the return value of an <see cref="T:CodeLink.Instruction"/>.
            </summary>
            <param name="unit">A <see cref="T:CodeLink.Token"/> for the unit of the parameter</param>
            <returns>An <see cref="T:CodeLink.IStackValue"/> for a Double</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ReturnShortstring">
            <summary>
            Creates a Shortstring type <see cref="T:CodeLink.IStackValue"/> to describe the return value of an <see cref="T:CodeLink.Instruction"/>.
            </summary>
            <returns>An <see cref="T:CodeLink.IStackValue"/> for a Shortstring</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ReturnStructure(CodeLink.OTypeStructure)">
            <summary>
            Creates an <see cref="T:CodeLink.IStackValue"/> for a specified custom <see cref="T:CodeLink.OTypeStructure"/> to describe the return value of an <see cref="T:CodeLink.Instruction"/>.
            </summary>
            <param name="structType">The <see cref="T:CodeLink.OTypeStructure"/> to return</param>
            <returns>An <see cref="T:CodeLink.IStackValue"/> for a custom <see cref="T:CodeLink.OTypeStructure"/></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ReturnClass(CodeLink.CompilerInternals.OTypeClass)">
            <summary>
            Creates an <see cref="T:CodeLink.IStackValue"/> for a specified custom <see cref="T:CodeLink.CompilerInternals.OTypeClass"/> to describe the return value of an <see cref="T:CodeLink.Instruction"/>.
            </summary>
            <param name="classType">The <see cref="T:CodeLink.CompilerInternals.OTypeClass"/> to return</param>
            <returns>An <see cref="T:CodeLink.IStackValue"/> for a custom <see cref="T:CodeLink.CompilerInternals.OTypeClass"/></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ReturnPointer(CodeLink.OType)">
            <summary>
            Creates a Pointer type <see cref="T:CodeLink.IStackValue"/> for a specified referenced <see cref="T:CodeLink.OType"/> to describe the return value of an <see cref="T:CodeLink.Instruction"/>.
            </summary>
            <param name="referencedType">The <see cref="T:CodeLink.OType"/> being pointed to</param>
            <returns>An <see cref="T:CodeLink.IStackValue"/> for a Pointer to the <see cref="T:CodeLink.OType"/></returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ReturnArray(CodeLink.OType,System.Int32)">
            <summary>
            Creates an Array type <see cref="T:CodeLink.IStackValue"/> for a specified contained <see cref="T:CodeLink.OType"/> and static count to describe the return value of an <see cref="T:CodeLink.Instruction"/>.
            </summary>
            <param name="containedType">The <see cref="T:CodeLink.OType"/> contained in the array</param>
            <param name="staticCount">The static count of items in the array</param>
            <returns>An <see cref="T:CodeLink.IStackValue"/> for an Array of the <see cref="T:CodeLink.OType"/> with the count</returns>
        </member>
        <member name="M:CodeLink.InstructionSet.ReturnObject(CodeLink.OType)">
            <summary>
            Creates an "OTypeSystemObject" <see cref="T:CodeLink.IStackValue"/> to describe the return value of an <see cref="T:CodeLink.Instruction"/>
            </summary>
            <param name="oTypeSystemObject"></param>
            <returns></returns>
        </member>
        <member name="T:CodeLink.InstructionSetState">
            <summary>
            Indicates the current <see cref="P:CodeLink.InstructionSet.State"/> of an <see cref="T:CodeLink.InstructionSet"/>
            </summary>
        </member>
        <member name="F:CodeLink.InstructionSetState.Created">
            <summary>
            The <see cref="T:CodeLink.InstructionSet"/> was just instantiated
            </summary>
        </member>
        <member name="F:CodeLink.InstructionSetState.Initializing">
            <summary>
            The <see cref="T:CodeLink.InstructionSet"/> is initializing (setting <see cref="P:CodeLink.InstructionSet.Namespace"/>, calling 'TypeAttempt' and 'Require' as necessary)
            </summary>
        </member>
        <member name="F:CodeLink.InstructionSetState.CreatingType">
            <summary>
            The <see cref="T:CodeLink.InstructionSet"/> is actually initializing its own <see cref="T:CodeLink.OType"/> objects
            </summary>
        </member>
        <member name="F:CodeLink.InstructionSetState.CreatingInstructions">
            <summary>
            The <see cref="T:CodeLink.InstructionSet"/> is creating all its own <see cref="T:CodeLink.Instruction"/> objects
            </summary>
        </member>
        <member name="F:CodeLink.InstructionSetState.Linking">
            <summary>
            The <see cref="T:CodeLink.InstructionSet"/> is linking <see cref="T:CodeLink.Instruction"/> objects to <see cref="T:CodeLink.OType"/> objects
            </summary>
        </member>
        <member name="F:CodeLink.InstructionSetState.Idle">
            <summary>
            The <see cref="T:CodeLink.InstructionSet"/> is waiting for other <see cref="T:CodeLink.InstructionSet"/> objects
            </summary>
        </member>
        <member name="F:CodeLink.InstructionSetState.Preparing">
            <summary>
            The <see cref="T:CodeLink.InstructionSet"/> is getting ready 
            </summary>
        </member>
        <member name="F:CodeLink.InstructionSetState.Ready">
            <summary>
            The <see cref="T:CodeLink.InstructionSet"/> is ready <see cref="T:CodeLink.InvokeInstruction"/> its <see cref="T:CodeLink.Instruction"/> objects
            </summary>
        </member>
        <member name="F:CodeLink.InstructionSetState.Terminating">
            <summary>
            The <see cref="T:CodeLink.InstructionSet"/> is shutting down
            </summary>
        </member>
        <member name="F:CodeLink.InstructionSetState.Terminated">
            <summary>
            The <see cref="T:CodeLink.InstructionSet"/> has shut down successfully
            </summary>
        </member>
        <member name="M:CodeLink.InstructionSetInfo.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Instantiates a new <see cref="T:CodeLink.InstructionSetInfo"/> object
            </summary>
            <param name="iSetName"></param>
            <param name="minVersion"></param>
            <param name="maxVersion"></param>
        </member>
        <member name="P:CodeLink.InstructionSetInfo.ISetName">
            <summary>
            Returns the name of the <see cref="T:CodeLink.InstructionSet"/>
            </summary>
        </member>
        <member name="P:CodeLink.InstructionSetInfo.MinVersion">
            <summary>
            Returns the defined minimum version of the <see cref="T:CodeLink.InstructionSet"/>
            </summary>
        </member>
        <member name="P:CodeLink.InstructionSetInfo.MaxVersion">
            <summary>
            Returns the defined maximum version of the <see cref="T:CodeLink.InstructionSet"/>
            </summary>
        </member>
        <member name="P:CodeLink.InstructionSetInfo.Tag">
            <summary>
            
            </summary>
        </member>
        <member name="M:CodeLink.InstructionSetInfo.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.InstructionSetInfo.FromString(System.String)">
            <summary>
            Instantiate a new <see cref="T:CodeLink.InstructionSetInfo"/> when given a previously 'toString' 
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:CodeLink.Lexer">
            <summary>
            <para>Contains a regular expression lexer. Emits 'LexToken' objects based on the input list of 'LexPattern' objects.</para>
            <para>Priority is implied by the order in which 'LexPattern' objects are added.</para>
            <para>The first item emitted will be of the type of the the highest priority pattern matched at the first character.</para>
            </summary>
        </member>
        <member name="T:CodeLink.Lexer.LexerPattern">
            <summary>
            Container for the regular expressions that are used in the tokenization
            </summary>
        </member>
        <member name="T:CodeLink.Lexer.LexerInstanceIncrement">
            <summary>
            Delegate which is used by a 'LLexerInstance' to actually increment the index, line, and column numbers
            </summary>
            <param name="index"></param>
            <param name="line"></param>
            <param name="column"></param>
        </member>
        <member name="T:CodeLink.Lexer.LexerInstance">
            <summary>
            A 'live' instance of a pattern, used within a single 'Tokens' call
            </summary>
        </member>
        <member name="F:CodeLink.Lexer.myPatterns">
            <summary>
            Simply a list of the patterns which have been added to this LLexer
            </summary>
        </member>
        <member name="M:CodeLink.Lexer.Add(System.Int32,System.Text.RegularExpressions.Regex,System.Boolean,System.Boolean)">
            <summary>
            Adds a new, custom pattern to the lexer
            </summary>
            <param name="lexStyle">An integer identifying the style of the token</param>
            <param name="regex">The regular expression object to use for identifying matches</param>
            <param name="isIgnored">If true, the lexer will identify these tokens, but not return a new token object</param>
            <param name="spansLines">If true, the lexer will increment the current file 'line' based on items within the token. If false, the lexer will not check for 'newLine' items</param>
        </member>
        <member name="M:CodeLink.Lexer.Add(System.Int32,System.String,System.Text.RegularExpressions.RegexOptions,System.Boolean,System.Boolean)">
            <summary>
            Adds a new, custom pattern to the lexer
            </summary>
            <param name="lexStyle">An integer identifying the style of the token</param>
            <param name="regexPattern">A string containing the regular expression pattern to match</param>
            <param name="options">The regular expression options to use with this pattern</param>
            <param name="isIgnored">If true, the lexer will identify these tokens, but not return a new token object</param>
            <param name="spansLines">If true, the lexer will increment the current file 'line' based on items within the token. If false, the lexer will not check for 'newLine' items</param>
        </member>
        <member name="M:CodeLink.Lexer.AddFloat(System.Int32)">
            <summary>
            <para>Adds a new 'float' number pattern</para>
            <para>Matches: '1.5', '+0.3141E1', '-1.47e-10', '1.0F32', '-5E+10f64'</para>
            </summary>
            <param name="lexStyle">An integer identifying the style of the token</param>
        </member>
        <member name="M:CodeLink.Lexer.AddInteger(System.Int32)">
            <summary>
            <para>Adds a new 'integer' number pattern</para>
            <para>Matches: '7', '+8', '-1', '5S8', '255U32'</para>
            </summary>
            <param name="lexStyle">An integer identifying the style of the token</param>
        </member>
        <member name="M:CodeLink.Lexer.AddHexDollar(System.Int32)">
            <summary>
            <para>Adds a new 'hex dollar' number pattern</para>
            <para>Matches: '$FF', '$10ACE', '$f0b7'</para>
            </summary>
            <param name="lexStyle">An integer identifying the style of the token</param>
        </member>
        <member name="M:CodeLink.Lexer.AddHex0h(System.Int32)">
            <summary>
            <para>Adds a new 'hex 0h' number pattern</para>
            <para>Matches: '0hFF', '0H10ACE', '0hf0B7'</para>
            </summary>
            <param name="lexStyle">An integer identifying the style of the token</param>
        </member>
        <member name="M:CodeLink.Lexer.AddHex0x(System.Int32)">
            <summary>
            <para>Adds a new 'hex 0x' number pattern</para>
            <para>Matches: '0xFF', '0x10ACE', '0XF0b7'</para>
            </summary>
            <param name="lexStyle">An integer identifying the style of the token</param>
        </member>
        <member name="M:CodeLink.Lexer.AddBin0b(System.Int32)">
            <summary>
            <para>Adds a new 'bin 0b' number pattern</para>
            <para>Matches: '0b101', '0b0110', '0B10011'</para>
            </summary>
            <param name="lexStyle">An integer identifying the style of the token</param>
        </member>
        <member name="M:CodeLink.Lexer.AddStringDoubleQuotes(System.Int32)">
            <summary>
            <para>Adds a new string pattern (encapsulated by &quot;&quot; characters)</para>
            <para>Matches: &quot;Hello World!&quot;</para>
            </summary>
            <param name="lexStyle">An integer identifying the style of the token</param>
        </member>
        <member name="M:CodeLink.Lexer.AddStringSingleQuotes(System.Int32)">
            <summary>
            <para>Adds a new string pattern (encapsulated by '' characters)</para>
            <para>Matches: 'Hello World!'</para>
            </summary>
            <param name="lexStyle">An integer identifying the style of the token</param>
        </member>
        <member name="M:CodeLink.Lexer.AddCodeName(System.Int32)">
            <summary>
            <para>Adds a new pattern which matches valid code names</para>
            <para>Matches: 'myVar', '_privateVar01', 'p0_15X'</para>
            </summary>
            <param name="lexStyle">An integer identifying the style of the token</param>
        </member>
        <member name="M:CodeLink.Lexer.AddWhitespace(System.Int32,System.Boolean)">
            <summary>
            <para>Adds a new pattern which matches whitespace</para>
            <para>Matches: [space], [tab], [newline]</para>
            </summary>
            <param name="lexStyle">An integer identifying the style of the token</param>
            <param name="isIgnored">If true, the lexer will identify these tokens, but not return a new token object</param>
        </member>
        <member name="M:CodeLink.Lexer.AddNewLine(System.Int32,System.Boolean)">
            <summary>
            <para>Adds a new pattern which matches a single new line</para>
            </summary>
            <param name="lexStyle"></param>
            <param name="isIgnored">If true, the lexer will identify these tokens, but not return a new token object</param>
        </member>
        <member name="M:CodeLink.Lexer.AddNewLines(System.Int32,System.Boolean)">
            <summary>
            <para>Adds a new pattern which identifies any number of new lines</para>
            </summary>
            <param name="lexStyle">An integer identifying the style of the token</param>
            <param name="isIgnored">If true, the lexer will identify these tokens, but not return a new token object</param>
        </member>
        <member name="M:CodeLink.Lexer.AddUnknownCharacter(System.Int32)">
            <summary>
            <para>Adds a new pattern which identifies any single unknown character</para>
            </summary>
            <param name="lexStyle">An integer identifying the style of the token</param>
        </member>
        <member name="M:CodeLink.Lexer.AddLineComment(System.Int32,System.String)">
            <summary>
            <para>Adds a new pattern which identifies a 'line comment' in code</para>
            </summary>
            <param name="lexStyle">An integer identifying the style of the token</param>
            <param name="lineCommentStr">The beginning of a line comment</param>
        </member>
        <member name="M:CodeLink.Lexer.AddBlockComment(System.Int32,System.String,System.String)">
            <summary>
            <para>Adds a new string pattern (encapsulated by '/*' and '*/')</para>
            <para>Matches: /* Hello World! */</para>
            </summary>
            <param name="lexStyle">An integer identifying the style of the token</param>
        </member>
        <member name="M:CodeLink.Lexer.AddExact(System.Int32,System.Boolean,System.String[])">
            <summary>
            <para>Adds a new pattern which matches only an exact set of text items</para>
            </summary>
            <param name="lexStyle">An integer identifying the style of the token</param>
            <param name="ignoreCase">If true, the lexer will ignore the case</param>
            <param name="items">The exact items to match</param>
        </member>
        <member name="M:CodeLink.Lexer.AddKeyword(System.Int32,System.Boolean,System.String[])">
            <summary>
            Adds a new patter which matches only with an exact set of the text items. This differs from 'AddExact' by only accepting
            the keyword if it is standalone and not within another word.
            Example: "Hopping" - AddExact will match 'Hopp', 'in', 'g' meanwhile AddKeyword will match 'Hopping'
            </summary>
            <param name="lexStyle">An integer identifying the style of the token</param>
            <param name="ignoreCase">If true, the lexer will ignore the case</param>
            <param name="items">The exact items to match</param>
        </member>
        <member name="M:CodeLink.Lexer.Enumerate(System.String)">
            <summary>
            <para>Iterates through the 'sourceText', returning 'LexToken' objects as they can be matched</para>
            <para>Intended to be used within a 'foreach' construct</para>
            <para>Will throw an error 'Unrecognized symbol' if a match could not be found</para>
            <para>This call is thread-safe</para>
            </summary>
            <param name="sourceText">The source text to parse</param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.Lexer.List(System.String)">
            <summary>
            <para>Iterates through the 'sourceText', returning 'LexToken' objects as they can be matched</para>
            <para>Will throw an error 'Unrecognized symbol' if a match could not be found</para>
            <para>This call is thread-safe</para>
            </summary>
            <param name="sourceText">The source text to parse</param>
            <returns></returns>
        </member>
        <member name="F:CodeLink.ObjectFile.ParseDateTimeKey">
            <summary>
            Writes in UTC (for consistency). Reads in Local (for ease of use)
            </summary>
        </member>
        <member name="M:CodeLink.OType.InstructionLink(CodeLink.Instruction,System.Boolean)">
            <summary>
            Attempt to add an instruction to this <see cref="T:CodeLink.OType"/>
            </summary>
            <param name="i"></param>
            <param name="isStatic"></param>
            <returns></returns>
        </member>
        <member name="T:CodeLink.TypeStyle">
            <summary>
            Defines the broad category for a particular <see cref="T:CodeLink.OType"/>
            </summary>
        </member>
        <member name="F:CodeLink.TypeStyle.Void">
            <summary>
            This type identifies a null/none
            </summary>
        </member>
        <member name="F:CodeLink.TypeStyle.Number">
            <summary>
            This type identifies a <see cref="T:CodeLink.CompilerInternals.OTypeNumber"/>, with number types in <see cref="T:CodeLink.CompilerInternals.ImmediateStyle"/>
            </summary>
        </member>
        <member name="F:CodeLink.TypeStyle.Enumerator">
            <summary>
            This type identifies a <see cref="T:CodeLink.CompilerInternals.OTypeEnumerator"/>, which is a list of valid <see cref="F:CodeLink.CompilerInternals.ImmediateStyle.Int32"/> values
            </summary>
        </member>
        <member name="F:CodeLink.TypeStyle.Structure">
            <summary>
            This type identifies a <see cref="T:CodeLink.OTypeStructure"/> or 'record'
            </summary>
        </member>
        <member name="F:CodeLink.TypeStyle.Delegate">
            <summary>
            This type identifies a <see cref="T:CodeLink.OTypeDelegate"/> (function pointer and signature)
            </summary>
        </member>
        <member name="F:CodeLink.TypeStyle.Pointer">
            <summary>
            This type identifies a <see cref="T:CodeLink.CompilerInternals.OTypePointer"/> which refers to another item
            </summary>
        </member>
        <member name="F:CodeLink.TypeStyle.Class">
            <summary>
            This type identifies a class
            </summary>
        </member>
        <member name="F:CodeLink.TypeStyle.Object">
            <summary>
            This type identifies a reference to a <see cref="T:CodeLink.OTypeObject"/>
            </summary>
        </member>
        <member name="F:CodeLink.TypeStyle.Closure">
            <summary>
            This type identifies a very special <see cref="!:OTypeClosure"/>, which is only used internally when a closure is created
            </summary>
        </member>
        <member name="F:CodeLink.TypeStyle.StaticArray">
            <summary>
            This type identifies an <see cref="T:CodeLink.OTypeStaticArray"/>
            </summary>
        </member>
        <member name="T:CodeLink.SystemTypeID">
            <summary>
            Enum containing <see cref="P:CodeLink.OType.TypeID"/> values for all of the system managed types.
            </summary>
        </member>
        <member name="F:CodeLink.SystemTypeID.Empty">
            <summary>
            Denotes that there is no typeID present 
            </summary>
        </member>
        <member name="F:CodeLink.SystemTypeID.Void">
            <summary>
            Static TypeID for the 'void' type
            </summary>
        </member>
        <member name="F:CodeLink.SystemTypeID.Boolean">
            <summary>
            Static TypeID for the 'boolean' type
            </summary>
        </member>
        <member name="F:CodeLink.SystemTypeID.Int8">
            <summary>
            Static TypeID for the 'Int8' type
            </summary>
        </member>
        <member name="F:CodeLink.SystemTypeID.Int16">
            <summary>
            Static TypeID for the 'Int16' type
            </summary>
        </member>
        <member name="F:CodeLink.SystemTypeID.Int32">
            <summary>
            Static TypeID for the 'Int32' type
            </summary>
        </member>
        <member name="F:CodeLink.SystemTypeID.UInt8">
            <summary>
            Static TypeID for the 'UInt8' type
            </summary>
        </member>
        <member name="F:CodeLink.SystemTypeID.UInt16">
            <summary>
            Static TypeID for the 'UInt16' type
            </summary>
        </member>
        <member name="F:CodeLink.SystemTypeID.UInt32">
            <summary>
            Static TypeID for the 'UInt32' type
            </summary>
        </member>
        <member name="F:CodeLink.SystemTypeID.Single">
            <summary>
            Static TypeID for the 'Single' type
            </summary>
        </member>
        <member name="F:CodeLink.SystemTypeID.Int64">
            <summary>
            Static TypeID for the 'Int64' type
            </summary>
        </member>
        <member name="F:CodeLink.SystemTypeID.UInt64">
            <summary>
            Static TypeID for the 'UInt64' type
            </summary>
        </member>
        <member name="F:CodeLink.SystemTypeID.Double">
            <summary>
            Static TypeID for the 'Double' type
            </summary>
        </member>
        <member name="F:CodeLink.SystemTypeID.Shortstring">
            <summary>
            Static TypeID for the 'Shortstring' type
            </summary>
        </member>
        <member name="F:CodeLink.SystemTypeID.String">
            <summary>
            Static TypeID for the 'String' type
            </summary>
        </member>
        <member name="F:CodeLink.SystemTypeID.Unit">
            <summary>
            Static TypeID for the 'Unit' type
            </summary>
        </member>
        <member name="F:CodeLink.SystemTypeID.UnitClass">
            <summary>
            Static TypeID for the 'UnitClass' type
            </summary>
        </member>
        <member name="F:CodeLink.SystemTypeID.Delegate">
            <summary>
            Static TypeID for the 'Delegate' type
            </summary>
        </member>
        <member name="F:CodeLink.SystemTypeID.ObjectBase">
            <summary>
            Placeholder for a generic 'system object' type, unused by any user
            </summary>
        </member>
        <member name="F:CodeLink.SystemTypeID.ObjectList">
            <summary>
            Placeholder for a generic 'system list' type, unused by any user
            </summary>
        </member>
        <member name="F:CodeLink.SystemTypeID.ObjectHash">
            <summary>
            Placeholder for a generic 'system hash' type, unused by any user
            </summary>
        </member>
        <member name="F:CodeLink.SystemTypeID.ObjectDictionary">
            <summary>
            Placeholder for a generic 'system dictionary' type, unused by any user
            </summary>
        </member>
        <member name="F:CodeLink.SystemTypeID.ObjectArray">
            <summary>
            Placeholder for a generic 'system array' type, unused by any user
            </summary>
        </member>
        <member name="F:CodeLink.SystemTypeID.Closure">
            <summary>
            Placeholder for a 'closure', which is automatically generated to contain out of scope variables within an anonymous function
            </summary>
        </member>
        <member name="T:CodeLink.OTypeInfo">
            <summary>
            A representation of an <see cref="T:CodeLink.OType"/> to be serialized to or deserialized from an <see cref="T:CodeLink.OutputBinary"/>.
            </summary>
        </member>
        <member name="P:CodeLink.OTypeInfo.TypeID">
            <summary>
            The <see cref="P:CodeLink.OType.TypeID"/> of the <see cref="T:CodeLink.OType"/>.
            </summary>
        </member>
        <member name="P:CodeLink.OTypeInfo.Size">
            <summary>
            The number of bytes that are required to contain all of the information in this type
            </summary>
        </member>
        <member name="P:CodeLink.OTypeInfo.Name">
            <summary>
            The name (without namespace) of this type
            </summary>
        </member>
        <member name="P:CodeLink.OTypeInfo.FullyQualifiedName">
            <summary>
            The <see cref="P:CodeLink.CompilerInternals.OItem.FullyQualifiedName"/> of the <see cref="T:CodeLink.OType"/>.
            </summary>
        </member>
        <member name="P:CodeLink.OTypeInfo.TypeStyle">
            <summary>
            The <see cref="P:CodeLink.OType.TypeStyle"/> of the <see cref="T:CodeLink.OType"/>.
            </summary>
        </member>
        <member name="P:CodeLink.OTypeInfo.BaseTypeID">
            <summary>
            <para>If the <see cref="T:CodeLink.OType"/> is an <see cref="T:CodeLink.CompilerInternals.OTypeClass"/>, and it is a subclass, the <see cref="P:CodeLink.OType.TypeID"/> of the parent <see cref="T:CodeLink.CompilerInternals.OTypeClass"/>.</para>
            <para>If the <see cref="T:CodeLink.OType"/> is an <see cref="T:CodeLink.CompilerInternals.OTypePointer"/>, this will contain the referencd typeID</para>
            <para>If the <see cref="T:CodeLink.OType"/> is an <see cref="T:CodeLink.OTypeStaticArray"/> this will contain the 'contained' typeID</para>
            <para>Otherwise, this value will be <c>0</c> in all other cases.</para>
            </summary>
        </member>
        <member name="P:CodeLink.OTypeInfo.Count">
            <summary>
            <para>If the <see cref="T:CodeLink.OType"/> is an <see cref="T:CodeLink.OTypeStaticArray"/>, its <see cref="F:CodeLink.OTypeStaticArray.ContainedCount"/>.</para>
            <para>Will be <c>0</c> in all other cases.</para>
            </summary>
        </member>
        <member name="P:CodeLink.OTypeInfo.MemberList">
            <summary>
            <para>If <see cref="T:CodeLink.OType"/> is an <see cref="T:CodeLink.OTypeStructure"/> or <see cref="T:CodeLink.CompilerInternals.OTypeClass"/>, a List of any <see cref="T:CodeLink.CompilerInternals.OItemVariable"/> members for the struct/class.</para>
            <para>Will be empty in all other cases.</para>
            </summary>
        </member>
        <member name="M:CodeLink.OTypeInfo.#ctor(CodeLink.RunInstance,CodeLink.OType)">
            <summary>
            Converts an <see cref="T:CodeLink.OType"/> into an <see cref="T:CodeLink.OTypeInfo"/> suitable for serialization into an <see cref="T:CodeLink.OutputBinary"/>.
            </summary>
            <param name="type">The <see cref="T:CodeLink.OType"/> to convert to an <see cref="T:CodeLink.OTypeInfo"/></param>
        </member>
        <member name="M:CodeLink.OTypeInfo.ReferenceAddPersistent(CodeLink.RunInstance,CodeLink.CompilerInternals.ObjectReferenceType)">
            <summary>
            Adds a reference that lives in the dataSegment or global memory (hence persistent)
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.OTypeInfo.ReferenceAddStack(CodeLink.RunInstance)">
            <summary>
            Adds a reference that lives in the stack (not very persistent)
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.OTypeInfo.ReferenceDeleteFunction1(CodeLink.RunInstance)">
            <summary>
            Here, we don't need to worry about most 'systemObjects', only the ones that are 'hybrid' structures (user structures that contain object references)
            </summary>
            <param name="ri"></param>
            <returns></returns>
        </member>
        <member name="T:CodeLink.OTypeMemberInfo">
            <summary>
            A representation of an <see cref="T:CodeLink.CompilerInternals.OItemVariable"/> member of an <see cref="T:CodeLink.OTypeInfo"/> that describes an <see cref="T:CodeLink.OTypeStructure"/> or an <see cref="T:CodeLink.CompilerInternals.OTypeClass"/>.
            </summary>
        </member>
        <member name="P:CodeLink.OTypeMemberInfo.Name">
            <summary>
            The name of the <see cref="T:CodeLink.CompilerInternals.OItemVariable"/>, represented as its <see cref="!:OItem.Text"/> property.
            </summary>
        </member>
        <member name="P:CodeLink.OTypeMemberInfo.Offset">
            <summary>
            The <see cref="P:CodeLink.CompilerInternals.OItemContainsTypeAndValue.Offset"/> of the <see cref="T:CodeLink.CompilerInternals.OItemVariable"/> in the struct/class.
            </summary>
        </member>
        <member name="P:CodeLink.OTypeMemberInfo.TypeID">
            <summary>
            The <see cref="P:CodeLink.CompilerInternals.OItemContainsType.TypeID"/> of the <see cref="T:CodeLink.CompilerInternals.OItemVariable"/>, referencing its <see cref="T:CodeLink.OType"/>.
            </summary>
        </member>
        <member name="M:CodeLink.OTypeMemberInfo.#ctor(CodeLink.CompilerInternals.OItemVariable)">
            <summary>
            Converts an <see cref="T:CodeLink.CompilerInternals.OItemVariable"/> into an <see cref="T:CodeLink.OTypeMemberInfo"/> suitable for inclusion in the <see cref="P:CodeLink.OTypeInfo.MemberList"/> of an <see cref="T:CodeLink.OTypeInfo"/> to be serialized into an <see cref="T:CodeLink.OutputBinary"/>.
            </summary>
            <param name="variable"></param>
        </member>
        <member name="M:CodeLink.OTypeMemberInfo.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Base constructor to use to build an <see cref="T:CodeLink.OTypeMemberInfo"/> from items deserialized from an <see cref="T:CodeLink.OutputBinary"/>.
            </summary>
            <param name="name">The value for <see cref="P:CodeLink.OTypeMemberInfo.Name"/></param>
            <param name="offset">The value for <see cref="P:CodeLink.OTypeMemberInfo.Offset"/></param>
            <param name="typeID">The value for <see cref="P:CodeLink.OTypeMemberInfo.TypeID"/></param>
        </member>
        <member name="M:CodeLink.OTypeStructure._CompileGenerate(CodeLink.CompilerInternals.CompileState)">
            <summary>
            
            </summary>
            <param name="bib"></param>
            <returns></returns>
        </member>
        <member name="T:CodeLink.OutputBinaryContentsEnumerator">
            <summary>
            A bitmask that details the contents of an <see cref="T:CodeLink.OutputBinary"/> file
            </summary>
        </member>
        <member name="T:CodeLink.OutputBinary">
            <summary>
            The output of the compiler, and the input to a RunContext/RunInstance
            </summary>
        </member>
        <member name="P:CodeLink.OutputBinary.Checksum">
            <summary>
            Retrieves the checksum value for this <see cref="T:CodeLink.OutputBinary"/>
            </summary>
        </member>
        <member name="P:CodeLink.OutputBinary.HeaderVersion">
            <summary>
            Get/set the header version of this <see cref="T:CodeLink.OutputBinary"/>
            </summary>
        </member>
        <member name="P:CodeLink.OutputBinary.CompileDateTime">
            <summary>
            Get/set the date/time this item was compiled as a <see cref="T:System.DateTime"/> structure
            Writes in UTC (for consistency), reads in Local (for ease of use)
            </summary>
        </member>
        <member name="P:CodeLink.OutputBinary.CompilerInfo">
            <summary>
            Get/set the compiler name and version info
            </summary>
        </member>
        <member name="P:CodeLink.OutputBinary.CodeSegmentBytes">
            <summary>
            Get/set the raw code segment byte[]
            </summary>
        </member>
        <member name="P:CodeLink.OutputBinary.CodeSegmentSize">
            <summary>
            Retrieve the size of the code segment
            </summary>
        </member>
        <member name="P:CodeLink.OutputBinary.DataSegmentSize">
            <summary>
            Get/set the size of the data segment
            </summary>
        </member>
        <member name="P:CodeLink.OutputBinary.ReturnTypeID">
            <summary>
            Get/set the return typeID that will be left on the stack when the 'start' block is completed
            </summary>
        </member>
        <member name="P:CodeLink.OutputBinary.StartingPC">
            <summary>
            Get/set the starting PC location 
            </summary>
        </member>
        <member name="P:CodeLink.OutputBinary.InitializationPC">
            <summary>
            Get/set the initialization PC location
            </summary>
        </member>
        <member name="P:CodeLink.OutputBinary.HashSelfBytes">
            <summary>
            Get/set the byte[] hash value for this <see cref="T:CodeLink.OutputBinary"/>
            </summary>
        </member>
        <member name="P:CodeLink.OutputBinary.InstructionSetList">
            <summary>
            Returns a list of <see cref="T:CodeLink.InstructionSetInfo"/> items, detailing what <see cref="T:CodeLink.InstructionSet"/> objects are required by this <see cref="T:CodeLink.OutputBinary"/>
            </summary>
        </member>
        <member name="P:CodeLink.OutputBinary.TypeInfoList">
            <summary>
            Returns a list of <see cref="T:CodeLink.OTypeInfo"/> structures, detailing the types that are used by this <see cref="T:CodeLink.OutputBinary"/>
            </summary>
        </member>
        <member name="P:CodeLink.OutputBinary.DebugInfo">
            <summary>
            Automatically serializes / deserializes the debugInfo object
            </summary>
        </member>
        <member name="M:CodeLink.OutputBinary.Serialize(CodeLink.Serialization.Serializer,System.Int32)">
            <summary>
            The root serialization method. 
            </summary>
            <param name="serializer"></param>
            <param name="maxHeaderVersion"></param>
        </member>
        <member name="M:CodeLink.OutputBinary.Serialize(System.IO.Stream,System.Int32)">
            <summary>
            Serialize this <see cref="T:CodeLink.OutputBinary"/> to the given stream
            </summary>
            <param name="stream"></param>
            <param name="maxHeaderVersion"></param>
        </member>
        <member name="M:CodeLink.OutputBinary.Serialize(System.Int32)">
            <summary>
            Serializes this <see cref="T:CodeLink.OutputBinary"/> to a byte array
            </summary>
            <param name="maxHeaderVersion"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.OutputBinary.Save(System.String,System.Int32)">
            <summary>
            Serializes this <see cref="T:CodeLink.OutputBinary"/> to a file
            </summary>
            <param name="filePath"></param>
            <param name="maxHeaderVersion"></param>
        </member>
        <member name="T:CodeLink.Parse">
            <summary>
            Allows a user programmer to turn input Source File(s) or Stub(s) into <see cref="T:CodeLink.ObjectFile"/> objects, which are the input to the Compiler
            </summary>
        </member>
        <member name="M:CodeLink.Parse.SourceFilePath(CodeLink.ParseLanguage,CodeLink.ObjectFile@,System.String,System.String)">
            <summary>
            Thread-safe call to generate ObjectFiles from a file that is openable from the FileSystem
            </summary>
            <param name="language">The <see cref="T:CodeLink.ParseLanguage"/> that should be used to parse this content</param>
            <param name="objectFile">The desired <see cref="T:CodeLink.ObjectFile"/>, populated as long as no errors are in the <see cref="T:CodeLink.ResultList"/></param>
            <param name="sourcePath">The physical file path to where this file is saved</param>
            <param name="sourceID">If specified, this is the ID to use to identify this content. If null/empty, <paramref name="sourcePath"/> will be used as the sourceID</param>
            <returns>A <see cref="T:CodeLink.ResultList"/> object, which may contain errors, warnings, and messages</returns>
        </member>
        <member name="M:CodeLink.Parse.SourceFileContent(CodeLink.ParseLanguage,CodeLink.ObjectFile@,System.String,System.String)">
            <summary>
            Thread-safe call to generate ObjectFiles from the pre-loaded contents of source documents
            </summary>
            <param name="language">The <see cref="T:CodeLink.ParseLanguage"/> that should be used to parse this content</param>
            <param name="objectFile">The desired <see cref="T:CodeLink.ObjectFile"/>, populated as long as no errors are in the <see cref="T:CodeLink.ResultList"/></param>
            <param name="sourceID">The ID to use to identify this content</param>
            <param name="sourceContent">The content which is to be parsed</param>
            <returns>A <see cref="T:CodeLink.ResultList"/> object, which may contain errors, warnings, and messages</returns>
        </member>
        <member name="M:CodeLink.Parse.Stub(CodeLink.ParseLanguage,CodeLink.ObjectFile@,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Thread-safe call to generate ObjectFiles based on 'stub' content (miniature, typically single line "programs")
            </summary>
            <param name="language">The <see cref="T:CodeLink.ParseLanguage"/> that should be used to parse this content</param>
            <param name="objectFile">The desired <see cref="T:CodeLink.ObjectFile"/>, populated as long as no errors are in the <see cref="T:CodeLink.ResultList"/></param>
            <param name="sourceID">The ID to use to identify this content</param>
            <param name="sourceCode">The core of the content which is to be parsed</param>
            <param name="returnType">The expected return type (as a string) of this content</param>
            <param name="namespaceWrap">Which namespace should this be within?</param>
            <param name="usingList">A list of the 'using' namespaces that should be available to this stub</param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.Parse.WrapObjectFile(CodeLink.ResultList,CodeLink.ObjectFile@,CodeLink.CompilerInternals.ParseBase,System.String,System.String)">
            <summary>
            Ensure that the output is valid, and then populate it with our identifying information
            </summary>
            <param name="results"></param>
            <param name="objectFile"></param>
            <param name="parser"></param>
            <param name="sourceID"></param>
            <param name="sourceContent"></param>
            <returns></returns>
        </member>
        <member name="T:CodeLink.ResultGenerator">
            <summary>
            Specifies who was responsible for creating this particular <see cref="T:CodeLink.Result"/>
            </summary>
        </member>
        <member name="F:CodeLink.ResultGenerator.Core">
            <summary>
            A <see cref="T:CodeLink.Result"/> originated from the Core System, such as attempting to create a RunContext or RunInstance
            </summary>
        </member>
        <member name="F:CodeLink.ResultGenerator.Parse">
            <summary>
            A <see cref="T:CodeLink.Result"/> originated from the language-specific Parser
            </summary>
        </member>
        <member name="F:CodeLink.ResultGenerator.Validate">
            <summary>
            A <see cref="T:CodeLink.Result"/> originated from <see cref="T:CodeLink.CompilerInternals.ObjectFileGenerator"/> or <see cref="T:CodeLink.CompilerInternals.ExpressionGenerator"/>
            </summary>
        </member>
        <member name="F:CodeLink.ResultGenerator.Compile">
            <summary>
            A <see cref="T:CodeLink.Result"/> originated from either a <see cref="T:CodeLink.Compiler"/> />
            </summary>
        </member>
        <member name="F:CodeLink.ResultGenerator.Runtime">
            <summary>
            A <see cref="T:CodeLink.Result"/> originated from a <see cref="T:CodeLink.RunInstance"/>
            </summary>
        </member>
        <member name="F:CodeLink.ResultGenerator.Other">
            <summary>
            A <see cref="T:CodeLink.Result"/> Not really sure where this one came from :(
            </summary>
        </member>
        <member name="T:CodeLink.ResultSeverity">
            <summary>
            Determines the type of result severity
            </summary>
        </member>
        <member name="F:CodeLink.ResultSeverity.Error">
            <summary>
            An error is a catastrophic failure, typically resulting in the failure of a process
            </summary>
        </member>
        <member name="F:CodeLink.ResultSeverity.Warning">
            <summary>
            A warning is intended to cause a developer to take a second look at a section of code
            </summary>
        </member>
        <member name="F:CodeLink.ResultSeverity.Message">
            <summary>
            A message is purely informational
            </summary>
        </member>
        <member name="P:CodeLink.RunContext.ID">
            <summary>
            Returns a unique identifier for this <see cref="T:CodeLink.RunInstance"/>
            </summary>
        </member>
        <member name="F:CodeLink.RunContext.Tag">
            <summary>
            Allows user progammers to attach any desired external data to this <see cref="T:CodeLink.RunInstance"/>. This field is not used internally. 
            </summary>
        </member>
        <member name="F:CodeLink.RunContext.Name">
            <summary>
            Allows user programmers to name this particular <see cref="T:CodeLink.RunInstance"/>. This field is not used internally. 
            </summary>
        </member>
        <member name="F:CodeLink.RunContext.Details">
            <summary>
            Allows user programmers to add details to this particualr <see cref="T:CodeLink.RunInstance"/>. This field is not used internally. 
            </summary>
        </member>
        <member name="M:CodeLink.RunContext.ContextIDPopulate(CodeLink.RunContext)">
            <summary>
            Get a guaranteed unique GUID amongst any created RunContex objects
            </summary>
            <returns></returns>
        </member>
        <member name="P:CodeLink.RunInstance.ResultValueAs">
            <summary>
            Allows access to the results of this <see cref="T:CodeLink.RunInstance"/>
            </summary>
        </member>
        <member name="P:CodeLink.RunInstance.References">
            <summary>
            Handle our object references
            </summary>
        </member>
        <member name="M:CodeLink.RunInstance.ReferenceAdd(System.Object,CodeLink.CompilerInternals.ObjectReferenceType)">
            <summary>
            Should ONLY be used by InstructionSetObjects and RunInstance
            </summary>
            <param name="userObject"></param>
            <param name="refType"></param>
            <returns></returns>
        </member>
        <member name="F:CodeLink.RunInstance.RunMode">
            <summary>
            Get the current <see cref="T:CodeLink.RunInstanceRunMode"/> setting, or change it for the next time that a call to <see cref="M:CodeLink.RunInstance.DoRun(System.Int32,CodeLink.RunInstanceRunMode)" /> is made with a RunMode of <see cref="F:CodeLink.RunInstanceRunMode.NoChange"/>
            </summary>
        </member>
        <member name="M:CodeLink.RunInstance.FingerprintObject">
            <summary>
            Creates a new <see cref="T:CodeLink.RunInstanceFingerprint"/>, which can be used to determine if the runInstance has been altered since the fingerprint was created.
            Can only be called while the RunInstance is not in the 'running' state.
            </summary>
            <returns>A new <see cref="T:CodeLink.RunInstanceFingerprint"/> object</returns>
        </member>
        <member name="F:CodeLink.RunInstance.ForCompile">
            <summary>
            If true, this RunInstance is being used during the compile process
            </summary>
        </member>
        <member name="P:CodeLink.RunInstance.Exception">
            <summary>
            Returns a reference to the <see cref="P:CodeLink.RunInstance.Exception"/> which stopped this <see cref="T:CodeLink.RunInstance"/>
            </summary>
        </member>
        <member name="P:CodeLink.RunInstance.State">
            <summary>
            Get/set the <see cref="T:CodeLink.RunInstanceState"/> of this <see cref="T:CodeLink.RunInstance"/> object
            </summary>
        </member>
        <member name="P:CodeLink.RunInstance.StateName">
            <summary>
            Return the textual name of the <see cref="P:CodeLink.RunInstance.State"/> of this <see cref="T:CodeLink.RunInstance"/>
            </summary>
        </member>
        <member name="P:CodeLink.RunInstance.StateLock">
            <summary>
            Used to ensure that only 1 party is activly changing the <see cref="P:CodeLink.RunInstance.State"/>
            </summary>
        </member>
        <member name="P:CodeLink.RunInstance.StateReady">
            <summary>
            Returns 'true' if the RunInstance is in the 'Ready' state
            </summary>
        </member>
        <member name="P:CodeLink.RunInstance.StateRunning">
            <summary>
            Returns 'true' if the RunInstance is in the 'Running' state
            </summary>
        </member>
        <member name="P:CodeLink.RunInstance.StateComplete">
            <summary>
            Returns 'true' if the RunInstnace is in the 'Complete' state
            </summary>
        </member>
        <member name="P:CodeLink.RunInstance.StateError">
            <summary>
            Returns 'true' if the RunInstance is in the 'Error' state
            </summary>
        </member>
        <member name="P:CodeLink.RunInstance.StatePaused">
            <summary>
            Returns 'true' if the RunInstance is in the 'Paused' state
            </summary>
        </member>
        <member name="P:CodeLink.RunInstance.StateUnloaded">
            <summary>
            Returns 'true' if the RunInstance is in the 'Unloaded' state
            </summary>
        </member>
        <member name="P:CodeLink.RunInstance.StateLoaded">
            <summary>
            Returns 'true' if the RunInstance is in the 'Loaded' state
            </summary>
        </member>
        <member name="P:CodeLink.RunInstance.StateLocked">
            <summary>
            Returns 'true' if the RunInstance is in the middle of a critical action
            </summary>
        </member>
        <member name="P:CodeLink.RunInstance.SourceBinaryObject">
            <summary>
            Returns a reference to the <see cref="T:CodeLink.OutputBinary"/> which is currently loaded within this <see cref="T:CodeLink.RunInstance"/>
            </summary>
        </member>
        <member name="M:CodeLink.RunInstance.SourceBinaryLoad(CodeLink.OutputBinary)">
            <summary>
            Given an <see cref="T:CodeLink.OutputBinary"/> object, attempts to load the contents into this <see cref="T:CodeLink.RunInstance"/>
            </summary>
            <param name="binary"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.RunInstance.SourceBinaryLoad(System.String)">
            <summary>
            Given a file path to an <see cref="T:CodeLink.OutputBinary"/> file, attempts to load the contents into this <see cref="T:CodeLink.RunInstance"/>
            </summary>
            <param name="outputBinaryPath">
            <para>If given a full path, attempts to load the file at that path. If the file is not found there, the other search paths are used to attempt to find the fileName+extension</para>
            <para>If given a just file name + extension (no directory information), attempts to find the file in the predefined search paths</para>
            </param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.RunInstance.SourceBinaryUnload(System.Boolean)">
            <summary>
            Attempts to unload the loaded <see cref="T:CodeLink.OutputBinary" />.
            </summary>
            <param name="force">If 'true', will attempt the destroy even if the loaded <see cref="T:CodeLink.OutputBinary"/> is actively running</param>
            <returns></returns>
        </member>
        <member name="P:CodeLink.RunInstance.ID">
            <summary>
            Returns a unique identifier for this <see cref="T:CodeLink.RunInstance"/>
            </summary>
        </member>
        <member name="F:CodeLink.RunInstance.Tag">
            <summary>
            Allows user progammers to attach any desired external data to this <see cref="T:CodeLink.RunInstance"/>. This field is not used internally. 
            </summary>
        </member>
        <member name="F:CodeLink.RunInstance.Name">
            <summary>
            Allows user programmers to name this particular <see cref="T:CodeLink.RunInstance"/>. This field is not used internally. 
            </summary>
        </member>
        <member name="F:CodeLink.RunInstance.Details">
            <summary>
            Allows user programmers to add details to this particualr <see cref="T:CodeLink.RunInstance"/>. This field is not used internally. 
            </summary>
        </member>
        <member name="M:CodeLink.RunInstance.ReadBoolean">
            <summary>
            Reads 4 bytes from the current ReadPC, increments ReadPC by 4; Returns 'true' if value != 0
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.RunInstance.ReadInt32">
            <summary>
            Reads 4 bytes from the current ReadPC, and increments ReadPC by 4
            </summary>
            <returns></returns>
        </member>
        <member name="P:CodeLink.RunInstance.ThisObject">
            <summary>
            <para>While inside of a function/getter/setter that is linked to a 'systemObject' type, this will return the .NET object that was used to invoke the current instruction</para>
            <para>If this is invoked while in a 'static' instruction, or while inside an instruction that is linked to a 'structure' type, this accessor will throw a 'NullReferenceException'</para>
            </summary>
        </member>
        <member name="P:CodeLink.RunInstance.ThisAddress">
            <summary>
            <para>While inside of a function/getter/setter that is linked to a 'structure' type, this will return the 'this' address associated with the structure that was used to invoke the current instruction</para>
            <para>If this is invoked while in a 'static' instruction, or while inside an instruction that is linked to a 'systemObject' type, this accessor will throw a 'NullReferenceException'</para>
            </summary>
        </member>
        <member name="F:CodeLink.RunInstance.DataStackObjects">
            <summary>
            A dictionary of PC locations with associated 'refRemove' functions at those locations
            </summary>
        </member>
        <member name="M:CodeLink.RunInstance.CopyBytes(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Provides a simple method for copying data via IntPtr structures, preserving alignment
            </summary>
            <param name="src"></param>
            <param name="dest"></param>
            <param name="byteCount"></param>
        </member>
        <member name="M:CodeLink.RunInstance.InstructionConvertLookup(CodeLink.OType,CodeLink.OType)">
            <summary>
            Returns the ici corresponding to the exact types given. Returns 'null' if not found. 
            </summary>
            <param name="inputType"></param>
            <param name="outputType"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.RunInstance.InstructionOperatorUnaryLookup(CodeLink.CompilerInternals.OperatorType,CodeLink.OType)">
            <summary>
            Returns exact match if found, 'null' if not found
            </summary>
            <param name="op"></param>
            <param name="inputType"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.RunInstance.InstructionOperatorBinaryLookup(CodeLink.CompilerInternals.OperatorType,CodeLink.OType,CodeLink.OType)">
            <summary>
            Returns exact match if found.
            </summary>
            <param name="op"></param>
            <param name="leftType"></param>
            <param name="rightType"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.RunInstance.InitializeISetRequires">
            <summary>
            Iterate through our instruction sets, pulling in all of their required instruction sets
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.RunInstance.InitializeISetTypes">
            <summary>
            Iterate through all of our instruction sets, attempting to build all of the types generated by instruction sets
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.RunInstance.PushImmediate(System.Int32)">
            <summary>
            Push bytes from the code segment onto the stack. Should only be used in 'debug' mode, as the hyperdrive should use closures to make this call unnecessary.
            </summary>
            <param name="byteCount"></param>
        </member>
        <member name="M:CodeLink.RunInstance.PushShortstring(System.String)">
            <summary>
            Given a standard .NET string, push the ASCII equivalent shortstring onto the stack.
            </summary>
            <param name="str">The string to push. Note that this should only contain ASCII content, and will be truncated to 252 characters (max)</param>
        </member>
        <member name="M:CodeLink.RunInstance.PopBytes(System.Byte[],System.Int32)">
            <summary>
            Pops the specified number of bytes from the stack
            </summary>
            <param name="data">The data that was popped from the stack</param>
            <param name="byteCount">The number of bytes to pop.</param>
        </member>
        <member name="M:CodeLink.RunInstance.PopBytes(System.IntPtr,System.Int32)">
            <summary>
            Pops the specified number of bytes from the stack
            </summary>
            <param name="destPtr">A pointer to the destination for the popped bytes. Must be able to contain at least 'byteCount' bytes</param>
            <param name="byteCount">The number of bytes to pop.</param>
        </member>
        <member name="M:CodeLink.RunInstance.PopBoolean">
            <summary>
            Pops 4 bytes off the stack. Returns 'false' if all bytes are '0', otherwise returns 'true'
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.RunInstance.PopInt8">
            <summary>
            Pops 4 bytes off the stack, returning the least significant byte as a signed 1-byte integer
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.RunInstance.PopInt16">
            <summary>
            Pops 4 bytes off the stack, returning the least significant 2 bytes as a signed 2-byte integer
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.RunInstance.PopInt32">
            <summary>
            Pops 4 bytes off the stack, returning a 4-byte signed integer
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.RunInstance.PopInt64">
            <summary>
            Pops 8 bytes off the stack, returning an 8-byte signed integer
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.RunInstance.PopUInt8">
            <summary>
            Pops 4 bytes off the stack, returning the least significant byte as a 1-byte unsigned integer
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.RunInstance.PopUnit">
            <summary>
            Pops 4 bytes off the stack, returning the associated 'unit' object
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.RunInstance.PopUInt16">
            <summary>
            Pops 4 bytes off the stack, returning the least significant 2 bytes as a 2-byte unsigned integer
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.RunInstance.PopUInt32">
            <summary>
            Pops 4 bytes off the stack, returning the value as a 4-byte unsigned integer
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.RunInstance.PopUInt64">
            <summary>
            Pops 8 bytes off the stack, returning the value as an 8-byte unsigned integer
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.RunInstance.PopSingle">
            <summary>
            Pops 4 bytes off the stack, returning a single-precision (4 byte) floating point value
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.RunInstance.PopDouble">
            <summary>
            Pops 8 bytes off the stack, returning a double-precision (8 byte) floating point value
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.RunInstance.PopShortstring">
            <summary>
            Pops a 'shortstring' structure off of the stack, converts it to a .NET string, and returns the .NET string
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.RunInstance.DoReset(System.Boolean)">
            <summary>
            Resets this RunInstance, including the call/data stacks, PC location, and Exception
            </summary>
            <param name="resetDataSegment">If true, the data segment for this item will also be reset to the initial setting</param>
        </member>
        <member name="M:CodeLink.RunInstance.DataStackObjectsCleanup">
            <summary>
            If we bail on a function (via an exception), or have to hit a catch frame, there could have been some stack objects left that weren't cleaned up.
            That's what we're here to do
            </summary>
            <param name="newDataStackTop"></param>
        </member>
        <member name="M:CodeLink.RunInstance.DoReturn">
            <summary>
            Pops frames off of the call stack until a 'call frame' can be found, then fixes the stack and PC back to the return locations
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.RunInstance.DoCatchFrameAdd(System.Int32)">
            <summary>
            Adds a 'catch frame' onto the call stack. This is used if an exception is thrown while inside of a try/catch
            </summary>
            <param name="hyperdriveIndex"></param>
        </member>
        <member name="M:CodeLink.RunInstance.DoCatchFrameRemove">
            <summary>
            Removes a catch frame from the call stack. Used when a 'try' is exited normally (i.e. no exception was thrown)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.RunInstance.DoBackupPC">
            <summary>
            Should only be used by <see cref="M:CodeLink.RunInstance.DoThrow(System.Exception)"/> and <see cref="M:CodeLink.RunInstance.DoPause"/> to backup the PC so that it's appropriate for debugging
            </summary>
        </member>
        <member name="M:CodeLink.RunInstance.DoCopy(System.Int64,System.Int64,System.Int32)">
            <summary>
            Internal accessor to simply copy bytes between memory addresses
            </summary>
            <param name="sourceAddress"></param>
            <param name="destinationAddress"></param>
            <param name="byteCount"></param>
        </member>
        <member name="M:CodeLink.RunInstance.DoThrow(System.Exception)">
            <summary>
            Throws an exception, which can be cought by user code, or, if uncaught, puts the RunInstance in an 'Error' state, with this 'e' being available above-ground by the Exception accessor
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.RunInstance.DoPause">
            <summary>
            If the instance is in the 'running' state, places the instance in the 'paused' state
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.RunInstance.DoRun(System.Int32,CodeLink.RunInstanceRunMode)">
            <summary>
            <para>If the runtime is in a 'ready' or 'paused' state, runs 1 or more instructions</para>
            <para>If the runtime is not 'ready', returns immediately</para>
            </summary>
            <param name="runInstructionCount">
            <para>If value &lt;0, runs until 'ready' returns false</para>
            <para>If value &gt;=0, runs until 'ready' returns false or the specified number of instructions have been invoked</para>
            </param>
            <param name="runMode">Determine the <see cref="T:CodeLink.RunInstanceRunMode"/> that will be used to execute instructions</param>
            <returns>Returns 'true' if the has more instructions to run (i.e. <see cref="F:CodeLink.RunInstanceState.Ready"/> or <see cref="F:CodeLink.RunInstanceState.Paused"/>. Returns 'false' if the <see cref="T:CodeLink.RunInstance"/> is in <see cref="F:CodeLink.RunInstanceState.Complete"/> or <see cref="F:CodeLink.RunInstanceState.Error"/></returns>
        </member>
        <member name="M:CodeLink.RunInstance.DoRun_Compile(System.Int32)">
            <summary>
            Should ONLY be called from within the compiler. Does not rely on the hyperdrive at all
            </summary>
            <param name="runInstructionCount"></param>
            <returns></returns>
        </member>
        <member name="T:CodeLink.RunInstanceState">
            <summary>
            A simple enumerator containing all possible states for a <see cref="T:CodeLink.RunInstance"/> object
            </summary>
        </member>
        <member name="F:CodeLink.RunInstanceState.Error">
            <summary>
            This state indicates that the <see cref="T:CodeLink.RunInstance"/> encountered an unhandled exception, which can be viewed via <see cref="P:CodeLink.RunInstance.Exception"/>
            </summary>
        </member>
        <member name="F:CodeLink.RunInstanceState.Unloaded">
            <summary>
            This state indicates that the <see cref="T:CodeLink.RunInstance"/> has not been initialized properly
            </summary>
        </member>
        <member name="F:CodeLink.RunInstanceState.Loading">
            <summary>
            This state indicates that this <see cref="T:CodeLink.RunInstance"/> is currently loading an <see cref="T:CodeLink.OutputBinary"/>
            </summary>
        </member>
        <member name="F:CodeLink.RunInstanceState.Ready">
            <summary>
            This state indicates that the <see cref="T:CodeLink.RunInstance"/> is ready to run instructions
            </summary>
        </member>
        <member name="F:CodeLink.RunInstanceState.Running">
            <summary>
            This state indicates that the <see cref="T:CodeLink.RunInstance"/> is actively running instructions
            </summary>
        </member>
        <member name="F:CodeLink.RunInstanceState.Paused">
            <summary>
            This state indicates that the <see cref="T:CodeLink.RunInstance"/> has been explicitly paused (typically via the debugger)
            </summary>
        </member>
        <member name="F:CodeLink.RunInstanceState.Complete">
            <summary>
            This state indicates that the <see cref="T:CodeLink.RunInstance"/> has completed its required operations and terminated normally
            </summary>
        </member>
        <member name="F:CodeLink.RunInstanceState.Loaded">
            <summary>
            This state indicates that this <see cref="T:CodeLink.RunInstance"/> has loaded properly as a library, and has no 'start' block
            </summary>
        </member>
        <member name="F:CodeLink.RunInstanceState.Unloading">
            <summary>
            This state indicates that this <see cref="T:CodeLink.RunInstance"/> is unloading the last loaded <see cref="T:CodeLink.OutputBinary"/>
            </summary>
        </member>
        <member name="F:CodeLink.RunInstanceState.Destroyed">
            <summary>
            This state indicates that this <see cref="T:CodeLink.RunInstance"/> has been destroyed, and is unfit for use
            </summary>
        </member>
        <member name="F:CodeLink.RunInstanceRunMode.NoChange">
            <summary>
            This enumerator value will keep the same value as the previous 'DoRun' command
            </summary>
        </member>
        <member name="F:CodeLink.RunInstanceRunMode.Default">
            <summary>
            The default option is set to <see cref="F:CodeLink.RunInstanceRunMode.Performance"/>
            </summary>
        </member>
        <member name="F:CodeLink.RunInstanceRunMode.Performance">
            <summary>
            The default option, this mode prioritizes runtime performance and utilizes substantially more "unsafe" code under the hood
            </summary>
        </member>
        <member name="F:CodeLink.RunInstanceRunMode.Debug">
            <summary>
            This mode utilizes the "safe" versions of the instructions, and is typically only used while developing instruction sets
            </summary>
        </member>
        <member name="F:CodeLink.RunInstanceLoadMode.Default">
            <summary>
            The default option is set to <see cref="F:CodeLink.RunInstanceLoadMode.FavorPerformance"/>
            </summary>
        </member>
        <member name="F:CodeLink.RunInstanceLoadMode.FavorPerformance">
            <summary>
            Intended for long-running scripts, this option takes a little longer to load an <see cref="T:CodeLink.OutputBinary"/>, and uses more RAM, but has increased runtime performance characteristics
            </summary>
        </member>
        <member name="F:CodeLink.RunInstanceLoadMode.FavorEconomy">
            <summary>
            Intended for short-running hot-swapped scripts ('stubs'), loading an <see cref="T:CodeLink.OutputBinary"/> is quicker, and uses less RAM, at the cost of a slight performance impact
            </summary>
        </member>
        <member name="T:CodeLink.RunContainer">
            <summary>
            Facilitates the management of a group of RunInstance objects
            </summary>
        </member>
        <member name="M:CodeLink.RunContainer.InstanceCreate(CodeLink.RunInstance@,System.Int32,System.Int32)">
            <summary>
            Creates a new, empty, RunInstance
            </summary>
            <param name="runInstance"></param>
            <param name="maximumCallDepth"></param>
            <param name="dataStackBytes"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.RunContainer.InstanceList">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.List`1"/> of all <see cref="T:CodeLink.RunInstance"/> that are contained in this <see cref="T:CodeLink.RunContainer"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.RunContainer.InstanceList(CodeLink.RunInstanceState)">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:CodeLink.RunInstance"/> objects that are in the desired state
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="P:CodeLink.RunContainer.InstanceCount">
            <summary>
            Returns the number of <see cref="T:CodeLink.RunInstance"/> objects that currently reside within this container
            </summary>
        </member>
        <member name="P:CodeLink.RunContainer.Context">
            <summary>
            Returns a reference to the owning global context
            </summary>
        </member>
        <member name="M:CodeLink.RunContainer.CompilerAcquire(CodeLink.CompilerOptions)">
            <summary>
            Retrieves a previously used compiler for this layer, or creates a new one on demand. 
            </summary>
            <param name="overrideOptions">If a value is passed in, the specified options will be used. If left null, the parent's compiler options are used.</param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.RunContainer.CompilerRelease(CodeLink.Compiler)">
            <summary>
            Allows this compiler to be used again by a subsequent call to 'CompilerAcquire'
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:CodeLink.RunContainer.CompilerForget(CodeLink.Compiler)">
            <summary>
            While a compiler is acquired, we can 'forget' it, destroying any used resources, and not returning it to the queue for reuse
            </summary>
            <param name="c"></param>
        </member>
        <member name="P:CodeLink.RunContainer.ThisInstance">
            <summary>
            If this RunContainer is an instance, returns this instance
            </summary>
        </member>
        <member name="P:CodeLink.RunContainer.InstanceStack">
            <summary>
            Will contain the stack of runInstance objects in the order of baseLayer -> top (current) layer
            </summary>
        </member>
        <member name="M:CodeLink.RunContainer.InstanceGet(System.Int32)">
            <summary>
            Returns the RunInstance at the desired index
            </summary>
            <param name="childIndex"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.RunContainer.InstanceGet(System.Guid)">
            <summary>
            Returns the <see cref="T:CodeLink.RunInstance"/> with the given <paramref name="runInstanceID"/>
            </summary>
            <param name="runInstanceID"></param>
            <returns></returns>
        </member>
        <member name="T:CodeLink.RunInstanceFingerprint">
            <summary>
            Contains information to check if a runInstance is in the same state as when the fingerprint was created
            </summary>
        </member>
        <member name="P:CodeLink.RunInstanceFingerprint.IsValid">
            <summary>
            Returns 'true' if the RunInstance is in nominally the same (non-running) state as when the fingerprint was created
            </summary>
        </member>
        <member name="P:CodeLink.RunInstanceFingerprint.HasChanged">
            <summary>
            Returns 'true' if the RunInstance has been altered since the fingerprint was created
            </summary>
        </member>
        <member name="M:CodeLink.Serialization.Deserializer.ReadUInt8Array">
            <summary>
            Reads the count and the bytes from the deserializer, returning a new byte[]
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.Serialization.Deserializer.ReadBytes(System.Int32,System.Boolean)">
            <summary>
            Reads bytes (raw) from the deserializer. Does NOT read an inherent length
            </summary>
            <param name="length"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
        </member>
        <member name="M:CodeLink.Serialization.ISerializable.Serialize(CodeLink.Serialization.Serializer)">
            <summary>
            Serialize this item using the passed in 'serializer'
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:CodeLink.Serialization.ISerializable.Deserialize(CodeLink.Serialization.Deserializer,System.Boolean)">
            <summary>
            Deserialize this item using the passed in 'serializer'
            </summary>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="T:CodeLink.Serialization.MetaContainer">
            <summary>
            A binary-packed meta-data container. Quickly serialize/deserialize the contents
            </summary>
        </member>
        <member name="M:CodeLink.Serialization.MetaContainer.MetaItem.Clone">
            <summary>
            Deep-copies all of the contents of this container
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.Serialization.MetaContainer.BooleanRead(System.String,System.Boolean)">
            <summary>
            Reads a <see cref="T:System.Boolean"/> from this container. If the key doesn't exist, or is the wrong type, the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.Serialization.MetaContainer.BooleanWrite(System.String,System.Boolean)">
            <summary>
            Writes a boolean to this container. If the key existed previously, it is overwritten with this boolean value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:CodeLink.Serialization.MetaContainer.Boolean(System.String,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Acts as a getter/setter for a this item. If setValue != null, 'write' is called. If setValue == null, 'read' is called.
            </summary>
            <param name="key"></param>
            <param name="setValue"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.Serialization.MetaContainer.DateTimeUTCRead(System.String,System.Nullable{System.DateTime})">
            <summary>
            Reads a <see cref="T:System.DateTime"/> from this container. If the key doesn't exist, or is the wrong type, the <paramref name="defaultValue"/> is returned
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.Serialization.MetaContainer.DateTimeUTCWrite(System.String,System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> to this container. If the key existed previously, it is overwritten with this DateTime value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:CodeLink.Serialization.MetaContainer.DateTimeUTC(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Acts as a getter/setter for a this item. If setValue != null, 'write' is called. If setValue == null, 'read' is called.
            </summary>
            <param name="key"></param>
            <param name="setValue"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.Serialization.MetaContainer.DateTimeLocalRead(System.String,System.Nullable{System.DateTime})">
            <summary>
            Reads a <see cref="T:System.DateTime"/> item as percieved in local time
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.Serialization.MetaContainer.DateTimeLocalWrite(System.String,System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> item as percieved in the local time
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.Serialization.MetaContainer.DateTimeLocal(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Acts as a getter/setter for this item. If setValue != null, 'write' is called. If setValue == null, 'read' is called
            </summary>
            <param name="key"></param>
            <param name="setValue"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.Serialization.MetaContainer.SingleRead(System.String,System.Single)">
            <summary>
            Reads a <see cref="T:System.Single"/> from this container. If the key doesn't exist, or is the wrong type, the <paramref name="defaultValue"/> is returned
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.Serialization.MetaContainer.SingleWrite(System.String,System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> to this container. If the key existed previously, it is overwritten with this value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:CodeLink.Serialization.MetaContainer.Single(System.String,System.Nullable{System.Single},System.Single)">
            <summary>
            Acts as a getter/setter for a this item. If setValue != null, 'write' is called. If setValue == null, 'read' is called.
            </summary>
            <param name="key"></param>
            <param name="setValue"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.Serialization.MetaContainer.DoubleRead(System.String,System.Double)">
            <summary>
            Reads a <see cref="T:System.Double"/> from this container. If the key does not exist, or is the wrong type, the <paramref name="defaultValue"/> is returned
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.Serialization.MetaContainer.DoubleWrite(System.String,System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> to this container. If the key existed previously, it is overwritten with this value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:CodeLink.Serialization.MetaContainer.Double(System.String,System.Nullable{System.Double},System.Double)">
            <summary>
            Acts as a getter/setter for a this item. If setValue != null, 'write' is called. If setValue == null, 'read' is called.
            </summary>
            <param name="key"></param>
            <param name="setValue"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.Serialization.MetaContainer.Int32Read(System.String,System.Int32)">
            <summary>
            Reads a <see cref="T:System.Int32"/> from this container. If the key does not exist, or is the wrong type, the <paramref name="defaultValue"/> is returned
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.Serialization.MetaContainer.Int32Write(System.String,System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> to this container. If the key existed previously, it is overwritten with this value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:CodeLink.Serialization.MetaContainer.Int32(System.String,System.Nullable{System.Int32},System.Int32)">
            <summary>
            Acts as a getter/setter for a this item. If setValue != null, 'write' is called. If setValue == null, 'read' is called.
            </summary>
            <param name="key"></param>
            <param name="setValue"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.Serialization.MetaContainer.Int64Read(System.String,System.Int64)">
            <summary>
            Reads a <see cref="T:System.Int64"/> from this container. If hte key does not exist, or the value is of the wrong type, returns <paramref name="defaultValue"/>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.Serialization.MetaContainer.Int64Write(System.String,System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> to this container. If the key existed preiviously, it is overwritten with this value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:CodeLink.Serialization.MetaContainer.Int64(System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            Acts as a getter/setter for a this item. If setValue != null, 'write' is called. If setValue == null, 'read' is called.
            </summary>
            <param name="key"></param>
            <param name="setValue"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.Serialization.MetaContainer.StringRead(System.String,System.String)">
            <summary>
            Reads a <see cref="T:System.String"/> from this container. If the key does not exist, or is of the wrong type, returns <paramref name="defaultValue"/>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.Serialization.MetaContainer.StringWrite(System.String,System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> to this container. If the key existed previously, it is overwritten with this value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:CodeLink.Serialization.MetaContainer.String(System.String,System.String,System.String)">
            <summary>
            Acts as a getter/setter for a this item. If setValue != null, 'write' is called. If setValue == null, 'read' is called.
            </summary>
            <param name="key"></param>
            <param name="setValue"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.Serialization.MetaContainer.StringListRead(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Reads a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:System.String"/> objects from this container. If the key does not exist, or is of the wrong type, the <paramref name="defaultValue"/> is returned
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.Serialization.MetaContainer.StringListWrite(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Writes a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:System.String"/> objects to this container. If the key existed previously, it is overwritten with this value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:CodeLink.Serialization.MetaContainer.StringList(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Acts as a getter/setter for a this item. If setValue != null, 'write' is called. If setValue == null, 'read' is called.
            </summary>
            <param name="key"></param>
            <param name="setValue"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.Serialization.MetaContainer.StringListIncludes(System.String,System.String,System.Boolean)">
            <summary>
            Returns 'true' if the item with the given key is defined, a string list, and that the string list contains the requested value. False otherwise.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.Serialization.MetaContainer.Serialize(CodeLink.Serialization.Serializer)">
            <summary>
            Serializes this container in its entirety to the desired <paramref name="serializer"/>
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:CodeLink.Serialization.MetaContainer.Clone">
            <summary>
            Produces an exact duplicate of this meta container and all of its content
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeLink.Serialization.Serializer.WriteBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Does NOT store a count. Must be known by another means at deserialization time
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:CodeLink.EngineeringUnits.Unit">
            <summary>
            A class which contains a single unit (i.e. 'seconds' or 'bar')
            </summary>
        </member>
        <member name="P:CodeLink.EngineeringUnits.Unit.ScaleMagnitude">
            <summary>
            Retrieve the 'magnitude' component of this unit, in the form Dest = Magnitude * Src + Offset
            </summary>
        </member>
        <member name="P:CodeLink.EngineeringUnits.Unit.ScaleOffset">
            <summary>
            Retrieve the 'offset' component of this unit, in the form Dest = Magnitude * Src + Offset
            </summary>
        </member>
        <member name="P:CodeLink.EngineeringUnits.Unit.UnitClass">
            <summary>
            Returns a reference to the <see cref="T:CodeLink.EngineeringUnits.UnitClass"/> which owns this <see cref="T:CodeLink.EngineeringUnits.Unit"/>
            </summary>
        </member>
        <member name="P:CodeLink.EngineeringUnits.Unit.UnitID">
            <summary>
            Returns a <see cref="T:System.Int32"/> which uniquely defines this <see cref="T:CodeLink.EngineeringUnits.Unit"/>
            </summary>
        </member>
        <member name="M:CodeLink.EngineeringUnits.Unit.ToString">
            <summary>
            Returns a textual representation of this unit (i.e. 'bar' or 'psi')
            </summary>
            <returns></returns>
        </member>
        <member name="P:CodeLink.EngineeringUnits.Unit.Text">
            <summary>
            Returns a human-readable textual representation of this unit (i.e. 'bar' or 'psi'). May include non-ASCII compliant characters.
            </summary>
        </member>
        <member name="P:CodeLink.EngineeringUnits.Unit.CodeText">
            <summary>
            Returns a human-readable textual representation of this unit (i.e. 'bar' or 'psi'). Will never include non-ASCII compliant characters.
            </summary>
        </member>
        <member name="P:CodeLink.EngineeringUnits.Unit.AlternateTextList">
            <summary>
            Returns a list of 'alternate' text descriptions for this <see cref="T:CodeLink.EngineeringUnits.Unit"/>. These symbols can be used for lookup up a <see cref="T:CodeLink.EngineeringUnits.Unit"/> by <see cref="T:System.String"/> via <see cref="M:CodeLink.EngineeringUnits.Units.Unit(System.String)"/>
            </summary>
        </member>
        <member name="M:CodeLink.EngineeringUnits.Unit.AddAlternateText(System.String)">
            <summary>
            Adds another textual representation of this unit. Typically upper/lower case variations on the initial text.
            </summary>
            <param name="altText"></param>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:CodeLink.EngineeringUnits.Unit.AddAlternateText(System.String[])">
            <summary>
            Adds multiple textual representations of this unit. Typically upper/lower case variations on the initial text. 
            </summary>
            <param name="altTextArray"></param>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:CodeLink.EngineeringUnits.Unit.Convert(System.Double,CodeLink.EngineeringUnits.Unit)">
            <summary>
            Scales <paramref name="value"/> from this unit to <paramref name="destUnit"/>. Both units MUST be associated with the same <see cref="T:CodeLink.EngineeringUnits.UnitClass"/>.
            </summary>
            <param name="value">The value to scale</param>
            <param name="destUnit">The destination <see cref="T:CodeLink.EngineeringUnits.Unit"/></param>
            <returns>The value converted into <paramref name="destUnit"/></returns>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:CodeLink.EngineeringUnits.Unit.Convert(System.Double,System.String)">
            <summary>
            Scales <paramref name="value"/> from this unit to <paramref name="destUnitText"/>. Both units MUST be associated with the same <see cref="T:CodeLink.EngineeringUnits.UnitClass"/>.
            </summary>
            <param name="value">The value to scale</param>
            <param name="destUnitText">The destination <see cref="T:CodeLink.EngineeringUnits.Unit"/>. Must match <see cref="P:CodeLink.EngineeringUnits.Unit.Text"/>, or be contained in the <see cref="P:CodeLink.EngineeringUnits.Unit.AlternateTextList"/></param>
            <returns>The value converted into <paramref name="destUnitText"/></returns>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:CodeLink.EngineeringUnits.Unit.Convert(System.Double,System.Int32)">
            <summary>
            Scales <paramref name="value"/> from this unit to <paramref name="destUnitID"/>. Both units MUST be associated with the same <see cref="T:CodeLink.EngineeringUnits.UnitClass"/>.
            </summary>
            <param name="value">The value to scale</param>
            <param name="destUnitID">The destination <see cref="T:CodeLink.EngineeringUnits.Unit"/>. Must match the <see cref="P:CodeLink.EngineeringUnits.Unit.UnitID"/> of a valid <see cref="T:CodeLink.EngineeringUnits.Unit"/> object</param>
            <returns>The value scaled into <paramref name="destUnitID"/></returns>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:CodeLink.EngineeringUnits.Unit.ConvertUnsafe(System.Double,CodeLink.EngineeringUnits.Unit)">
            <summary>
            Scales <paramref name="value"/> from this unit to <paramref name="destUnit"/>. Does *NOT* check if both units are assocaited with the same <see cref="T:CodeLink.EngineeringUnits.UnitClass"/>.
            </summary>
            <param name="value">The value to scale</param>
            <param name="destUnit">The destination <see cref="T:CodeLink.EngineeringUnits.Unit"/></param>
            <returns>The value scaled to <paramref name="destUnit"/></returns>
        </member>
        <member name="M:CodeLink.EngineeringUnits.Unit.ConvertUnsafe(System.Double,System.String)">
            <summary>
            Scales <paramref name="value"/> from this unit to <paramref name="destUnitText"/>. Does *NOT* check if both units are associated with the same <see cref="T:CodeLink.EngineeringUnits.UnitClass"/>.
            </summary>
            <param name="value">The value to scale</param>
            <param name="destUnitText">The destination <see cref="T:CodeLink.EngineeringUnits.Unit"/>. Must match <see cref="P:CodeLink.EngineeringUnits.Unit.Text"/>, or be contained in the <see cref="P:CodeLink.EngineeringUnits.Unit.AlternateTextList"/></param>
            <returns>The value scaled to <paramref name="destUnitText"/></returns>
        </member>
        <member name="M:CodeLink.EngineeringUnits.Unit.ConvertUnsafe(System.Double,System.Int32)">
            <summary>
            Scales <paramref name="value"/> from this unit to <paramref name="destUnitID"/>. Does *NOT* check if both units are associated with the same see <see cref="T:CodeLink.EngineeringUnits.UnitClass"/>.
            </summary>
            <param name="value">The value to scale</param>
            <param name="destUnitID">The destination <see cref="T:CodeLink.EngineeringUnits.Unit"/>. Must match the <see cref="P:CodeLink.EngineeringUnits.Unit.UnitID"/> of a valid <see cref="T:CodeLink.EngineeringUnits.Unit"/> object</param>
            <returns>The value scaled to <paramref name="destUnitID"/></returns>
        </member>
        <member name="M:CodeLink.EngineeringUnits.Unit.ConvertFunction(CodeLink.EngineeringUnits.Unit)">
            <summary>
            Returns a <see cref="T:CodeLink.EngineeringUnits.UnitConvertFunction"/> which is specific to scaling numbers from this <see cref="T:CodeLink.EngineeringUnits.Unit"/> to <paramref name="destUnit"/>. Both units MUST be associated with the same <see cref="T:CodeLink.EngineeringUnits.UnitClass"/>.
            </summary>
            <param name="destUnit">The destination unit for the scale</param>
            <returns>A <see cref="T:CodeLink.EngineeringUnits.UnitConvertFunction"/> which converts from this <see cref="T:CodeLink.EngineeringUnits.Unit"/> to <paramref name="destUnit"/></returns>
        </member>
        <member name="M:CodeLink.EngineeringUnits.Unit.ConvertFunction(System.String)">
            <summary>
            Returns a <see cref="T:CodeLink.EngineeringUnits.UnitConvertFunction"/> which is specific to scaling numbers from this <see cref="T:CodeLink.EngineeringUnits.Unit"/> to <paramref name="destUnitText"/>. Both units MUST be associated with the same <see cref="T:CodeLink.EngineeringUnits.UnitClass"/>.
            </summary>
            <param name="destUnitText">The destination <see cref="T:CodeLink.EngineeringUnits.Unit"/>. Must match <see cref="P:CodeLink.EngineeringUnits.Unit.Text"/>, or be contained in the <see cref="P:CodeLink.EngineeringUnits.Unit.AlternateTextList"/></param>
            <returns>A <see cref="T:CodeLink.EngineeringUnits.UnitConvertFunction"/> which converts from this <see cref="T:CodeLink.EngineeringUnits.Unit"/> to <paramref name="destUnitText"/></returns>
        </member>
        <member name="M:CodeLink.EngineeringUnits.Unit.ConvertFunction(System.Int32)">
            <summary>
            Returns a <see cref="T:CodeLink.EngineeringUnits.UnitConvertFunction"/> which is specific to scaling numbers from this <see cref="T:CodeLink.EngineeringUnits.Unit"/> to <paramref name="destUnitID"/>. Both units MUST be associated with the same <see cref="T:CodeLink.EngineeringUnits.UnitClass"/>.
            </summary>
            <param name="destUnitID">The destination <see cref="T:CodeLink.EngineeringUnits.Unit"/>. Must match the <see cref="P:CodeLink.EngineeringUnits.Unit.UnitID"/> of a valid <see cref="T:CodeLink.EngineeringUnits.Unit"/> object</param>
            <returns>A <see cref="T:CodeLink.EngineeringUnits.UnitConvertFunction"/> which converts from this <see cref="T:CodeLink.EngineeringUnits.Unit"/> to <paramref name="destUnitID"/></returns>
        </member>
        <member name="P:CodeLink.EngineeringUnits.Unit.IsSystemUnit">
            <summary>
            Returns true if this unit was created by the root system
            </summary>
        </member>
        <member name="P:CodeLink.EngineeringUnits.Unit.IsExternalUnit">
            <summary>
            Returns true if this unit was created by an external source
            </summary>
        </member>
        <member name="P:CodeLink.EngineeringUnits.Unit.IsBaseUnit">
            <summary>
            Returns true if this unit has a <see cref="P:CodeLink.EngineeringUnits.Unit.ScaleMagnitude"/> == 1, and <see cref="P:CodeLink.EngineeringUnits.Unit.ScaleOffset"/> == 0
            </summary>
        </member>
        <member name="T:CodeLink.EngineeringUnits.UnitClass">
            <summary>
            A container for various associated (scalable) <see cref="T:CodeLink.EngineeringUnits.Unit"/> objects
            </summary>
        </member>
        <member name="P:CodeLink.EngineeringUnits.UnitClass.Name">
            <summary>
            A textual representation of this <see cref="T:CodeLink.EngineeringUnits.UnitClass"/>, i.e. "Temperature" or "Linear Velocity"
            </summary>
        </member>
        <member name="P:CodeLink.EngineeringUnits.UnitClass.ClassID">
            <summary>
            A <see cref="T:System.Int32"/> which is unique to this <see cref="T:CodeLink.EngineeringUnits.UnitClass"/>
            </summary>
        </member>
        <member name="M:CodeLink.EngineeringUnits.UnitClass.RemoveUnit(CodeLink.EngineeringUnits.Unit)">
            <summary>
            Removes a previously created unit from this unit class
            </summary>
            <param name="unit">Must be an exact reference to a currently valid unit within this class</param>
            <returns>True if the unit was actually removed</returns>
        </member>
        <member name="M:CodeLink.EngineeringUnits.UnitClass.CreateUnit(System.String,System.Double,System.Double,System.String[])">
            <summary>
            Creates a new <see cref="T:CodeLink.EngineeringUnits.Unit"/> object associated with this <see cref="T:CodeLink.EngineeringUnits.UnitClass"/>. 
            </summary>
            <param name="name">The human-readable name of the <see cref="T:CodeLink.EngineeringUnits.Unit"/>. May include non-ASCII compliant characters</param>
            <param name="scaleMagnitude">The scaling factor for this <see cref="T:CodeLink.EngineeringUnits.Unit"/> from the 'base' unit in this <see cref="T:CodeLink.EngineeringUnits.UnitClass"/></param>
            <param name="scaleOffset">The scaling offset for this <see cref="T:CodeLink.EngineeringUnits.Unit"/> from the 'base' unit in this <see cref="T:CodeLink.EngineeringUnits.UnitClass"/></param>
            <param name="altText">Alternative textual representations of this <see cref="T:CodeLink.EngineeringUnits.Unit"/>. Typically, these are variations of upper/lower casing characters.</param>
            <returns></returns>
        </member>
        <member name="P:CodeLink.EngineeringUnits.UnitClass.UnitList">
            <summary>
            Returns a list of <see cref="T:CodeLink.EngineeringUnits.Unit"/> objects, sorted by their <see cref="P:CodeLink.EngineeringUnits.Unit.Text"/> property (case-insensitive)
            </summary>
        </member>
        <member name="P:CodeLink.EngineeringUnits.UnitClass.IsSystemUnitClass">
            <summary>
            Returns true if this unit class was created by the root system
            </summary>
        </member>
        <member name="P:CodeLink.EngineeringUnits.UnitClass.IsExternalUnitClass">
            <summary>
            Returns true if this unit class was created by an external source
            </summary>
        </member>
        <member name="P:CodeLink.EngineeringUnits.UnitClass.BaseUnit">
            <summary>
            Finds and returns a 'base unit' (where <see cref="P:CodeLink.EngineeringUnits.Unit.ScaleMagnitude"/> == 1, and <see cref="P:CodeLink.EngineeringUnits.Unit.ScaleOffset"/> == 0) for this class. Returns 'null' if one could not be found.
            </summary>
        </member>
        <member name="T:CodeLink.EngineeringUnits.UnitConvertFunction">
            <summary>
            A function delegate which scales <paramref name="value"/> from a source <see cref="T:CodeLink.EngineeringUnits.Unit"/> to a destination <see cref="T:CodeLink.EngineeringUnits.Unit"/>. 
            </summary>
            <param name="value">The vlaue to convert</param>
            <returns></returns>
        </member>
        <member name="T:CodeLink.EngineeringUnits.SystemUnitClassID">
            <summary>
            Uniquely identifies the system unit classes
            </summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.AngularAcceleration">
            <summary></summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.AngularPosition">
            <summary></summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.AngularVelocity">
            <summary></summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.Area">
            <summary></summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.DataSize">
            <summary></summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.DataSpeed">
            <summary></summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.Db">
            <summary></summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.Density">
            <summary></summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.ElectricalCurrent">
            <summary></summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.ElectricalPotential">
            <summary></summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.ElectricalResistance">
            <summary></summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.Energy">
            <summary></summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.EnergyReactive">
            <summary></summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.Force">
            <summary></summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.ForceRate">
            <summary></summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.Frequency">
            <summary></summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.Inertia">
            <summary></summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.LinearAcceleration">
            <summary></summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.LinearPosition">
            <summary></summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.LinearVelocity">
            <summary></summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.Percent">
            <summary></summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.Power">
            <summary></summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.PowerFlux">
            <summary></summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.Pressure">
            <summary></summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.PressureRate">
            <summary></summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.SpringRate">
            <summary></summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.Strain">
            <summary></summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.Temperature">
            <summary></summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.TemperatureDelta">
            <summary></summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.Time">
            <summary></summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.Torque">
            <summary></summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.TorqueRate">
            <summary></summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.Unitless">
            <summary></summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.Volume">
            <summary></summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.VolumeRate">
            <summary></summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.SystemUnitClassID.WearRate">
            <summary></summary>
        </member>
        <member name="T:CodeLink.EngineeringUnits.Units">
            <summary>
            The base container for all <see cref="T:CodeLink.EngineeringUnits.UnitClass"/> objects, which contain <see cref="T:CodeLink.EngineeringUnits.Unit"/> objects
            </summary>
        </member>
        <member name="M:CodeLink.EngineeringUnits.Units.Convert(System.Double,CodeLink.EngineeringUnits.Unit,CodeLink.EngineeringUnits.Unit)">
            <summary>
            Scales <paramref name="value"/> based on the conversion from <paramref name="srcUnit"/> to <paramref name="destUnit"/>. Both units must be associated with the same <see cref="T:CodeLink.EngineeringUnits.UnitClass"/>.
            </summary>
            <param name="value">The value (in <paramref name="srcUnit"/>) which will be scaled to <paramref name="destUnit"/></param>
            <param name="srcUnit">The source <see cref="T:CodeLink.EngineeringUnits.Unit"/></param>
            <param name="destUnit">The destination <see cref="T:CodeLink.EngineeringUnits.Unit"/></param>
            <returns>The <paramref name="value"/> scaled from <paramref name="srcUnit"/> to <paramref name="destUnit"/></returns>
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:CodeLink.EngineeringUnits.Units.Convert(System.Double,System.String,System.String)">
            <summary>
            Scales <paramref name="value"/> based on the conversion from <paramref name="srcUnitText"/> to <paramref name="destUnitText"/>. Both units must be associated with the same <see cref="T:CodeLink.EngineeringUnits.UnitClass"/>.
            </summary>
            <param name="value">The value (in <paramref name="srcUnitText"/>) which will be scaled to <paramref name="destUnitText"/></param>
            <param name="srcUnitText">The source <see cref="T:CodeLink.EngineeringUnits.Unit"/> as a <see cref="T:System.String"/>. Must equal <see cref="P:CodeLink.EngineeringUnits.Unit.Text"/> or in the <see cref="P:CodeLink.EngineeringUnits.Unit.AlternateTextList"/> for a valid <see cref="T:CodeLink.EngineeringUnits.Unit"/></param>
            <param name="destUnitText">The destination <see cref="T:CodeLink.EngineeringUnits.Unit"/> as a <see cref="T:System.String"/>. Must equal <see cref="P:CodeLink.EngineeringUnits.Unit.Text"/> or in the <see cref="P:CodeLink.EngineeringUnits.Unit.AlternateTextList"/> for a valid <see cref="T:CodeLink.EngineeringUnits.Unit"/></param>
            <returns>The <paramref name="value"/> scaled from <paramref name="srcUnitText"/> to <paramref name="destUnitText"/></returns>
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:CodeLink.EngineeringUnits.Units.Convert(System.Double,System.Int32,System.Int32)">
            <summary>
            Scales <paramref name="value"/> based on the conversion from <paramref name="srcUnitID"/> to <paramref name="destUnitID"/>. Both units must be associated with the same <see cref="T:CodeLink.EngineeringUnits.UnitClass"/>.
            </summary>
            <param name="value">The value (in <paramref name="srcUnitID"/>) which will be scaled to <paramref name="destUnitID"/></param>
            <param name="srcUnitID">The source UnitID. Must equal <see cref="P:CodeLink.EngineeringUnits.Unit.UnitID"/> of a valid <see cref="T:CodeLink.EngineeringUnits.Unit"/>.</param>
            <param name="destUnitID">The destination UnitID. Must equal <see cref="P:CodeLink.EngineeringUnits.Unit.UnitID"/> of a valid <see cref="T:CodeLink.EngineeringUnits.Unit"/>.</param>
            <returns>The <paramref name="value"/> scaled from <paramref name="srcUnitID"/> to <paramref name="destUnitID"/></returns>
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:CodeLink.EngineeringUnits.Units.ConvertUnsafe(System.Double,CodeLink.EngineeringUnits.Unit,CodeLink.EngineeringUnits.Unit)">
            <summary>
            Scales <paramref name="value"/> based on the conversion from <paramref name="srcUnit"/> to <paramref name="destUnit"/>. Does *NOT* check if both units are from the same <see cref="T:CodeLink.EngineeringUnits.UnitClass"/>.
            </summary>
            <param name="value">The value (in <paramref name="srcUnit"/>) which will be scaled to <paramref name="destUnit"/></param>
            <param name="srcUnit">The source <see cref="T:CodeLink.EngineeringUnits.Unit"/></param>
            <param name="destUnit">The destination <see cref="T:CodeLink.EngineeringUnits.Unit"/></param>
            <returns>The <paramref name="value"/> scaled from <paramref name="srcUnit"/> to <paramref name="destUnit"/></returns>
        </member>
        <member name="M:CodeLink.EngineeringUnits.Units.ConvertUnsafe(System.Double,System.String,System.String)">
            <summary>
            Scales <paramref name="value"/> based on the conversion from <paramref name="srcUnitText"/> to <paramref name="destUnitText"/>. Does *NOT* check if both units are from the same <see cref="T:CodeLink.EngineeringUnits.UnitClass"/>.
            </summary>
            <param name="value">The value (in <paramref name="srcUnitText"/>) which will be scaled to <paramref name="destUnitText"/></param>
            <param name="srcUnitText">The source <see cref="T:CodeLink.EngineeringUnits.Unit"/> as a <see cref="T:System.String"/>. Must equal <see cref="P:CodeLink.EngineeringUnits.Unit.Text"/> or in the <see cref="P:CodeLink.EngineeringUnits.Unit.AlternateTextList"/> for a valid <see cref="T:CodeLink.EngineeringUnits.Unit"/></param>
            <param name="destUnitText">The destination <see cref="T:CodeLink.EngineeringUnits.Unit"/> as a <see cref="T:System.String"/>. Must equal <see cref="P:CodeLink.EngineeringUnits.Unit.Text"/> or in the <see cref="P:CodeLink.EngineeringUnits.Unit.AlternateTextList"/> for a valid <see cref="T:CodeLink.EngineeringUnits.Unit"/></param>
            <returns>The <paramref name="value"/> scaled from <paramref name="srcUnitText"/> to <paramref name="destUnitText"/></returns>
        </member>
        <member name="M:CodeLink.EngineeringUnits.Units.ConvertUnsafe(System.Double,System.Int32,System.Int32)">
            <summary>
            Scales <paramref name="value"/> based on the conversion from <paramref name="srcUnitID"/> to <paramref name="destUnitID"/>. Does *NOT* check if both units are from the same <see cref="T:CodeLink.EngineeringUnits.UnitClass"/>.
            </summary>
            <param name="value">The value (in <paramref name="srcUnitID"/>) which will be scaled to <paramref name="destUnitID"/></param>
            <param name="srcUnitID">The source UnitID. Must equal <see cref="P:CodeLink.EngineeringUnits.Unit.UnitID"/> of a valid <see cref="T:CodeLink.EngineeringUnits.Unit"/>.</param>
            <param name="destUnitID">The destination UnitID. Must equal <see cref="P:CodeLink.EngineeringUnits.Unit.UnitID"/> of a valid <see cref="T:CodeLink.EngineeringUnits.Unit"/>.</param>
            <returns>The <paramref name="value"/> scaled from <paramref name="srcUnitID"/> to <paramref name="destUnitID"/></returns>
        </member>
        <member name="M:CodeLink.EngineeringUnits.Units.ConvertFunction(CodeLink.EngineeringUnits.Unit,CodeLink.EngineeringUnits.Unit)">
            <summary>
            Returns a <see cref="T:CodeLink.EngineeringUnits.UnitConvertFunction"/> which can be used for snappier repeated conversions (removes lookup / exception checking). Both <paramref name="srcUnit"/> and <paramref name="destUnit"/> must come from the same <see cref="T:CodeLink.EngineeringUnits.UnitClass"/>.
            </summary>
            <param name="srcUnit">The source unit for the scaling</param>
            <param name="destUnit">The destination unit for the scaling</param>
            <returns>A <see cref="T:CodeLink.EngineeringUnits.UnitConvertFunction"/> tailored to the desired conversion</returns>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:CodeLink.EngineeringUnits.Units.ConvertFunction(System.String,System.String)">
            <summary>
            Returns a <see cref="T:CodeLink.EngineeringUnits.UnitConvertFunction"/> which can be used for snappier repeated conversions (removes lookup / exception checking). Both <paramref name="srcUnitText"/> and <paramref name="destUnitText"/> must come from the same <see cref="T:CodeLink.EngineeringUnits.UnitClass"/>.
            </summary>
            <param name="srcUnitText">The source <see cref="T:CodeLink.EngineeringUnits.Unit"/> as a <see cref="T:System.String"/>. Must equal <see cref="P:CodeLink.EngineeringUnits.Unit.Text"/> or in the <see cref="P:CodeLink.EngineeringUnits.Unit.AlternateTextList"/> for a valid <see cref="T:CodeLink.EngineeringUnits.Unit"/></param>
            <param name="destUnitText">The destination <see cref="T:CodeLink.EngineeringUnits.Unit"/> as a <see cref="T:System.String"/>. Must equal <see cref="P:CodeLink.EngineeringUnits.Unit.Text"/> or in the <see cref="P:CodeLink.EngineeringUnits.Unit.AlternateTextList"/> for a valid <see cref="T:CodeLink.EngineeringUnits.Unit"/></param>
            <returns>A <see cref="T:CodeLink.EngineeringUnits.UnitConvertFunction"/> tailored to the desired conversion</returns>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:CodeLink.EngineeringUnits.Units.ConvertFunction(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:CodeLink.EngineeringUnits.UnitConvertFunction"/> which can be used for snappier repeated conversions (removes lookup / exception checking). Both <paramref name="srcUnitID"/> and <paramref name="destUnitID"/> must come from the same <see cref="T:CodeLink.EngineeringUnits.UnitClass"/>.
            </summary>
            <param name="srcUnitID">The source UnitID. Must equal <see cref="P:CodeLink.EngineeringUnits.Unit.UnitID"/> of a valid <see cref="T:CodeLink.EngineeringUnits.Unit"/>.</param>
            <param name="destUnitID">The destination UnitID. Must equal <see cref="P:CodeLink.EngineeringUnits.Unit.UnitID"/> of a valid <see cref="T:CodeLink.EngineeringUnits.Unit"/>.</param>
            <returns>A <see cref="T:CodeLink.EngineeringUnits.UnitConvertFunction"/> tailored to the desired conversion</returns>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:CodeLink.EngineeringUnits.Units.Unit(System.Int32)">
            <summary>
            Retrieve a <see cref="T:CodeLink.EngineeringUnits.Unit"/> based on a <paramref name="unitID"/>. Must exactly match the <see cref="P:CodeLink.EngineeringUnits.Unit.UnitID"/> of a valid <see cref="T:CodeLink.EngineeringUnits.Unit"/>.
            </summary>
            <param name="unitID">A valid <see cref="P:CodeLink.EngineeringUnits.Unit.UnitID"/></param>
            <returns>A valid <see cref="T:CodeLink.EngineeringUnits.Unit"/> object, or <code>null</code> if not found.</returns>
        </member>
        <member name="P:CodeLink.EngineeringUnits.Units.Unitless">
            <summary>
            Returns the 'unitless' unit
            </summary>
        </member>
        <member name="M:CodeLink.EngineeringUnits.Units.Unit(System.String)">
            <summary>
            Retrieve a <see cref="T:CodeLink.EngineeringUnits.Unit"/> based on a <paramref name="unitText"/>. Must exactly match the <see cref="P:CodeLink.EngineeringUnits.Unit.UnitID"/> of a valid <see cref="T:CodeLink.EngineeringUnits.Unit"/>.
            </summary>
            <param name="unitText">A <see cref="T:CodeLink.EngineeringUnits.Unit"/> as a <see cref="T:System.String"/>. Must equal <see cref="P:CodeLink.EngineeringUnits.Unit.Text"/> or in the <see cref="P:CodeLink.EngineeringUnits.Unit.AlternateTextList"/> for a valid <see cref="T:CodeLink.EngineeringUnits.Unit"/></param>
            <returns>A valid <see cref="T:CodeLink.EngineeringUnits.Unit"/> object, or <code>null</code> if not found.</returns>
        </member>
        <member name="M:CodeLink.EngineeringUnits.Units.Unit(CodeLink.Token)">
            <summary>
            Given a <see cref="T:CodeLink.Token"/> object, attempts to return the hard-coded unit which is associated with the token text
            </summary>
            <param name="unitText"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.EngineeringUnits.Units.UnitIDValid(System.Int32)">
            <summary>
            Returns 'true' if the given UnitID maps to a valid unit
            </summary>
            <param name="unitID"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.EngineeringUnits.Units.CreateUnitClass(System.String)">
            <summary>
            Creates a new unit class if the name is not currently defined.
            </summary>
            <param name="name"></param>
            <returns>Null if the name was already defined, or the new <see cref="T:CodeLink.EngineeringUnits.UnitClass"/> object</returns>
        </member>
        <member name="M:CodeLink.EngineeringUnits.Units.RemoveUnitClass(CodeLink.EngineeringUnits.UnitClass)">
            <summary>
            Removes an entire <see cref="T:CodeLink.EngineeringUnits.UnitClass"/> from the <see cref="T:CodeLink.EngineeringUnits.Units"/>
            </summary>
            <param name="unitClass"></param>
            <returns></returns>
        </member>
        <member name="M:CodeLink.EngineeringUnits.Units.UnitClass(System.Int32)">
            <summary>
            Retrieve a <see cref="T:CodeLink.EngineeringUnits.UnitClass"/> object based on a valid <see cref="P:CodeLink.EngineeringUnits.UnitClass.ClassID"/>.
            </summary>
            <param name="unitClassID">A valid <see cref="P:CodeLink.EngineeringUnits.UnitClass.ClassID"/> value</param>
            <returns>A valid <see cref="T:CodeLink.EngineeringUnits.UnitClass"/> object, or <code>null</code> if not found</returns>
        </member>
        <member name="P:CodeLink.EngineeringUnits.Units.UnitClassList">
            <summary>
            Returns a list of <see cref="T:CodeLink.EngineeringUnits.UnitClass"/> objects, sorted by <see cref="P:CodeLink.EngineeringUnits.UnitClass.Name"/>
            </summary>
        </member>
        <member name="F:CodeLink.EngineeringUnits.Units.myUnitContainerMutex">
            <summary>
            Locks the ability to create the singleton
            </summary>
        </member>
    </members>
</doc>
